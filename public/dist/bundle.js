(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

},{}],2:[function(require,module,exports){
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var tslib = require('tslib');

var firebase = require('@firebase/app');

require('@firebase/installations');

var logger$1 = require('@firebase/logger');

var util = require('@firebase/util');

var component = require('@firebase/component');

function _interopDefaultLegacy(e) {
  return e && _typeof(e) === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Key to attach FID to in gtag params.


var GA_FID_KEY = 'firebase_id';
var ORIGIN_KEY = 'origin';
var FETCH_TIMEOUT_MILLIS = 60 * 1000;
var DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
var GTAG_URL = 'https://www.googletagmanager.com/gtag/js';
var GtagCommand;

(function (GtagCommand) {
  GtagCommand["EVENT"] = "event";
  GtagCommand["SET"] = "set";
  GtagCommand["CONFIG"] = "config";
})(GtagCommand || (GtagCommand = {}));
/*
 * Officially recommended event names for gtag.js
 * Any other string is also allowed.
 */


var EventName;

(function (EventName) {
  EventName["ADD_SHIPPING_INFO"] = "add_shipping_info";
  EventName["ADD_PAYMENT_INFO"] = "add_payment_info";
  EventName["ADD_TO_CART"] = "add_to_cart";
  EventName["ADD_TO_WISHLIST"] = "add_to_wishlist";
  EventName["BEGIN_CHECKOUT"] = "begin_checkout";
  /** @deprecated */

  EventName["CHECKOUT_PROGRESS"] = "checkout_progress";
  EventName["EXCEPTION"] = "exception";
  EventName["GENERATE_LEAD"] = "generate_lead";
  EventName["LOGIN"] = "login";
  EventName["PAGE_VIEW"] = "page_view";
  EventName["PURCHASE"] = "purchase";
  EventName["REFUND"] = "refund";
  EventName["REMOVE_FROM_CART"] = "remove_from_cart";
  EventName["SCREEN_VIEW"] = "screen_view";
  EventName["SEARCH"] = "search";
  EventName["SELECT_CONTENT"] = "select_content";
  EventName["SELECT_ITEM"] = "select_item";
  EventName["SELECT_PROMOTION"] = "select_promotion";
  /** @deprecated */

  EventName["SET_CHECKOUT_OPTION"] = "set_checkout_option";
  EventName["SHARE"] = "share";
  EventName["SIGN_UP"] = "sign_up";
  EventName["TIMING_COMPLETE"] = "timing_complete";
  EventName["VIEW_CART"] = "view_cart";
  EventName["VIEW_ITEM"] = "view_item";
  EventName["VIEW_ITEM_LIST"] = "view_item_list";
  EventName["VIEW_PROMOTION"] = "view_promotion";
  EventName["VIEW_SEARCH_RESULTS"] = "view_search_results";
})(EventName || (EventName = {}));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Logs an analytics event through the Firebase SDK.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param eventName Google Analytics event name, choose from standard list or use a custom string.
 * @param eventParams Analytics event parameters.
 */


function _logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var measurementId, params;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (!(options && options.global)) return [3
          /*break*/
          , 1];
          gtagFunction(GtagCommand.EVENT, eventName, eventParams);
          return [2
          /*return*/
          ];

        case 1:
          return [4
          /*yield*/
          , initializationPromise];

        case 2:
          measurementId = _a.sent();
          params = tslib.__assign(tslib.__assign({}, eventParams), {
            'send_to': measurementId
          });
          gtagFunction(GtagCommand.EVENT, eventName, params);
          _a.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Set screen_name parameter for this Google Analytics ID.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param screenName Screen name string to set.
 */


function _setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var measurementId;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (!(options && options.global)) return [3
          /*break*/
          , 1];
          gtagFunction(GtagCommand.SET, {
            'screen_name': screenName
          });
          return [2
          /*return*/
          , Promise.resolve()];

        case 1:
          return [4
          /*yield*/
          , initializationPromise];

        case 2:
          measurementId = _a.sent();
          gtagFunction(GtagCommand.CONFIG, measurementId, {
            update: true,
            'screen_name': screenName
          });
          _a.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Set user_id parameter for this Google Analytics ID.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param id User ID string to set
 */


function _setUserId(gtagFunction, initializationPromise, id, options) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var measurementId;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (!(options && options.global)) return [3
          /*break*/
          , 1];
          gtagFunction(GtagCommand.SET, {
            'user_id': id
          });
          return [2
          /*return*/
          , Promise.resolve()];

        case 1:
          return [4
          /*yield*/
          , initializationPromise];

        case 2:
          measurementId = _a.sent();
          gtagFunction(GtagCommand.CONFIG, measurementId, {
            update: true,
            'user_id': id
          });
          _a.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Set all other user properties other than user_id and screen_name.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param properties Map of user properties to set
 */


function _setUserProperties(gtagFunction, initializationPromise, properties, options) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var flatProperties, _i, _a, key, measurementId;

    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          if (!(options && options.global)) return [3
          /*break*/
          , 1];
          flatProperties = {};

          for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {
            key = _a[_i]; // use dot notation for merge behavior in gtag.js

            flatProperties["user_properties." + key] = properties[key];
          }

          gtagFunction(GtagCommand.SET, flatProperties);
          return [2
          /*return*/
          , Promise.resolve()];

        case 1:
          return [4
          /*yield*/
          , initializationPromise];

        case 2:
          measurementId = _b.sent();
          gtagFunction(GtagCommand.CONFIG, measurementId, {
            update: true,
            'user_properties': properties
          });
          _b.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Set whether collection is enabled for this ID.
 *
 * @param enabled If true, collection is enabled for this ID.
 */


function _setAnalyticsCollectionEnabled(initializationPromise, enabled) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var measurementId;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , initializationPromise];

        case 1:
          measurementId = _a.sent();
          window["ga-disable-" + measurementId] = !enabled;
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var logger = new logger$1.Logger('@firebase/analytics');
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Inserts gtag script tag into the page to asynchronously download gtag.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */

function insertScriptTag(dataLayerName) {
  var script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`
  // without fid. We will initialize ga-id using gtag (config) command together with fid.

  script.src = GTAG_URL + "?l=" + dataLayerName;
  script.async = true;
  document.head.appendChild(script);
}
/**
 * Get reference to, or create, global datalayer.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */


function getOrCreateDataLayer(dataLayerName) {
  // Check for existing dataLayer and create if needed.
  var dataLayer = [];

  if (Array.isArray(window[dataLayerName])) {
    dataLayer = window[dataLayerName];
  } else {
    window[dataLayerName] = dataLayer;
  }

  return dataLayer;
}
/**
 * Wrapped gtag logic when gtag is called with 'config' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param measurementId GA Measurement ID to set config for.
 * @param gtagParams Gtag config params to set.
 */


function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          correspondingAppId = measurementIdToAppId[measurementId];
          _a.label = 1;

        case 1:
          _a.trys.push([1, 7,, 8]);

          if (!correspondingAppId) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , initializationPromisesMap[correspondingAppId]];

        case 2:
          _a.sent();

          return [3
          /*break*/
          , 6];

        case 3:
          return [4
          /*yield*/
          , Promise.all(dynamicConfigPromisesList)];

        case 4:
          dynamicConfigResults = _a.sent();
          foundConfig = dynamicConfigResults.find(function (config) {
            return config.measurementId === measurementId;
          });
          if (!foundConfig) return [3
          /*break*/
          , 6];
          return [4
          /*yield*/
          , initializationPromisesMap[foundConfig.appId]];

        case 5:
          _a.sent();

          _a.label = 6;

        case 6:
          return [3
          /*break*/
          , 8];

        case 7:
          e_1 = _a.sent();
          logger.error(e_1);
          return [3
          /*break*/
          , 8];

        case 8:
          gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Wrapped gtag logic when gtag is called with 'event' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementId GA Measurement ID to log event to.
 * @param gtagParams Params to log with this event.
 */


function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;

    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 4,, 5]);

          initializationPromisesToWaitFor = [];
          if (!(gtagParams && gtagParams['send_to'])) return [3
          /*break*/
          , 2];
          gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.

          if (!Array.isArray(gaSendToList)) {
            gaSendToList = [gaSendToList];
          }

          return [4
          /*yield*/
          , Promise.all(dynamicConfigPromisesList)];

        case 1:
          dynamicConfigResults = _a.sent();

          _loop_1 = function _loop_1(sendToId) {
            // Any fetched dynamic measurement ID that matches this 'send_to' ID
            var foundConfig = dynamicConfigResults.find(function (config) {
              return config.measurementId === sendToId;
            });
            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];

            if (initializationPromise) {
              initializationPromisesToWaitFor.push(initializationPromise);
            } else {
              // Found an item in 'send_to' that is not associated
              // directly with an FID, possibly a group.  Empty this array,
              // exit the loop early, and let it get populated below.
              initializationPromisesToWaitFor = [];
              return "break";
            }
          };

          for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {
            sendToId = gaSendToList_1[_i];
            state_1 = _loop_1(sendToId);
            if (state_1 === "break") break;
          }

          _a.label = 2;

        case 2:
          // This will be unpopulated if there was no 'send_to' field , or
          // if not all entries in the 'send_to' field could be mapped to
          // a FID. In these cases, wait on all pending initialization promises.
          if (initializationPromisesToWaitFor.length === 0) {
            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
          } // Run core gtag function with args after all relevant initialization
          // promises have been resolved.


          return [4
          /*yield*/
          , Promise.all(initializationPromisesToWaitFor)];

        case 3:
          // Run core gtag function with args after all relevant initialization
          // promises have been resolved.
          _a.sent(); // Workaround for http://b/141370449 - third argument cannot be undefined.


          gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});
          return [3
          /*break*/
          , 5];

        case 4:
          e_2 = _a.sent();
          logger.error(e_2);
          return [3
          /*break*/
          , 5];

        case 5:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Wraps a standard gtag function with extra code to wait for completion of
 * relevant initialization promises before sending requests.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 */


function wrapGtag(gtagCore,
/**
 * Allows wrapped gtag calls to wait on whichever intialization promises are required,
 * depending on the contents of the gtag params' `send_to` field, if any.
 */
initializationPromisesMap,
/**
 * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
 * before determining what initialization promises (which include FIDs) to wait for.
 */
dynamicConfigPromisesList,
/**
 * Wrapped gtag config calls can narrow down which initialization promise (with FID)
 * to wait for if the measurementId is already fetched, by getting the corresponding appId,
 * which is the key for the initialization promises map.
 */
measurementIdToAppId) {
  /**
   * Wrapper around gtag that ensures FID is sent with gtag calls.
   * @param command Gtag command type.
   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
   * @param gtagParams Params if event is EVENT/CONFIG.
   */
  function gtagWrapper(command, idOrNameOrParams, gtagParams) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var e_3;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 6,, 7]);

            if (!(command === GtagCommand.EVENT)) return [3
            /*break*/
            , 2]; // If EVENT, second arg must be measurementId.

            return [4
            /*yield*/
            , gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];

          case 1:
            // If EVENT, second arg must be measurementId.
            _a.sent();

            return [3
            /*break*/
            , 5];

          case 2:
            if (!(command === GtagCommand.CONFIG)) return [3
            /*break*/
            , 4]; // If CONFIG, second arg must be measurementId.

            return [4
            /*yield*/
            , gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];

          case 3:
            // If CONFIG, second arg must be measurementId.
            _a.sent();

            return [3
            /*break*/
            , 5];

          case 4:
            // If SET, second arg must be params.
            gtagCore(GtagCommand.SET, idOrNameOrParams);
            _a.label = 5;

          case 5:
            return [3
            /*break*/
            , 7];

          case 6:
            e_3 = _a.sent();
            logger.error(e_3);
            return [3
            /*break*/
            , 7];

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  }

  return gtagWrapper;
}
/**
 * Creates global gtag function or wraps existing one if found.
 * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
 * 'event' calls that belong to the GAID associated with this Firebase instance.
 *
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param dataLayerName Name of global GA datalayer array.
 * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
 */


function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
  // Create a basic core gtag function
  var gtagCore = function gtagCore() {
    var _args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      _args[_i] = arguments[_i];
    } // Must push IArguments object, not an array.


    window[dataLayerName].push(arguments);
  }; // Replace it with existing one if found


  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {
    // @ts-ignore
    gtagCore = window[gtagFunctionName];
  }

  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
  return {
    gtagCore: gtagCore,
    wrappedGtag: window[gtagFunctionName]
  };
}
/**
 * Returns first script tag in DOM matching our gtag url pattern.
 */


function findGtagScriptOnPage() {
  var scriptTags = window.document.getElementsByTagName('script');

  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {
    var tag = _a[_i];

    if (tag.src && tag.src.includes(GTAG_URL)) {
      return tag;
    }
  }

  return null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var _a;

var ERRORS = (_a = {}, _a["already-exists"
/* ALREADY_EXISTS */
] = 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.', _a["already-initialized"
/* ALREADY_INITIALIZED */
] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a["interop-component-reg-failed"
/* INTEROP_COMPONENT_REG_FAILED */
] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}', _a["invalid-analytics-context"
/* INVALID_ANALYTICS_CONTEXT */
] = 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a["indexeddb-unavailable"
/* INDEXEDDB_UNAVAILABLE */
] = 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a["fetch-throttle"
/* FETCH_THROTTLE */
] = 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a["config-fetch-failed"
/* CONFIG_FETCH_FAILED */
] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}', _a["no-api-key"
/* NO_API_KEY */
] = 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.', _a["no-app-id"
/* NO_APP_ID */
] = 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.', _a);
var ERROR_FACTORY = new util.ErrorFactory('analytics', 'Analytics', ERRORS);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Backoff factor for 503 errors, which we want to be conservative about
 * to avoid overloading servers. Each retry interval will be
 * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
 * will be ~30 seconds (with fuzzing).
 */

var LONG_RETRY_FACTOR = 30;
/**
 * Base wait interval to multiplied by backoffFactor^backoffCount.
 */

var BASE_INTERVAL_MILLIS = 1000;
/**
 * Stubbable retry data storage class.
 */

var RetryData =
/** @class */
function () {
  function RetryData(throttleMetadata, intervalMillis) {
    if (throttleMetadata === void 0) {
      throttleMetadata = {};
    }

    if (intervalMillis === void 0) {
      intervalMillis = BASE_INTERVAL_MILLIS;
    }

    this.throttleMetadata = throttleMetadata;
    this.intervalMillis = intervalMillis;
  }

  RetryData.prototype.getThrottleMetadata = function (appId) {
    return this.throttleMetadata[appId];
  };

  RetryData.prototype.setThrottleMetadata = function (appId, metadata) {
    this.throttleMetadata[appId] = metadata;
  };

  RetryData.prototype.deleteThrottleMetadata = function (appId) {
    delete this.throttleMetadata[appId];
  };

  return RetryData;
}();

var defaultRetryData = new RetryData();
/**
 * Set GET request headers.
 * @param apiKey App API key.
 */

function getHeaders(apiKey) {
  return new Headers({
    Accept: 'application/json',
    'x-goog-api-key': apiKey
  });
}
/**
 * Fetches dynamic config from backend.
 * @param app Firebase app to fetch config for.
 */


function fetchDynamicConfig(appFields) {
  var _a;

  return tslib.__awaiter(this, void 0, void 0, function () {
    var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse, _ignored_1;

    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          appId = appFields.appId, apiKey = appFields.apiKey;
          request = {
            method: 'GET',
            headers: getHeaders(apiKey)
          };
          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
          return [4
          /*yield*/
          , fetch(appUrl, request)];

        case 1:
          response = _b.sent();
          if (!(response.status !== 200 && response.status !== 304)) return [3
          /*break*/
          , 6];
          errorMessage = '';
          _b.label = 2;

        case 2:
          _b.trys.push([2, 4,, 5]);

          return [4
          /*yield*/
          , response.json()];

        case 3:
          jsonResponse = _b.sent();

          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {
            errorMessage = jsonResponse.error.message;
          }

          return [3
          /*break*/
          , 5];

        case 4:
          _ignored_1 = _b.sent();
          return [3
          /*break*/
          , 5];

        case 5:
          throw ERROR_FACTORY.create("config-fetch-failed"
          /* CONFIG_FETCH_FAILED */
          , {
            httpStatus: response.status,
            responseMessage: errorMessage
          });

        case 6:
          return [2
          /*return*/
          , response.json()];
      }
    });
  });
}
/**
 * Fetches dynamic config from backend, retrying if failed.
 * @param app Firebase app to fetch config for.
 */


function fetchDynamicConfigWithRetry(app, // retryData and timeoutMillis are parameterized to allow passing a different value for testing.
retryData, timeoutMillis) {
  if (retryData === void 0) {
    retryData = defaultRetryData;
  }

  return tslib.__awaiter(this, void 0, void 0, function () {
    var _a, appId, apiKey, measurementId, throttleMetadata, signal;

    var _this = this;

    return tslib.__generator(this, function (_b) {
      _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;

      if (!appId) {
        throw ERROR_FACTORY.create("no-app-id"
        /* NO_APP_ID */
        );
      }

      if (!apiKey) {
        if (measurementId) {
          return [2
          /*return*/
          , {
            measurementId: measurementId,
            appId: appId
          }];
        }

        throw ERROR_FACTORY.create("no-api-key"
        /* NO_API_KEY */
        );
      }

      throttleMetadata = retryData.getThrottleMetadata(appId) || {
        backoffCount: 0,
        throttleEndTimeMillis: Date.now()
      };
      signal = new AnalyticsAbortSignal();
      setTimeout(function () {
        return tslib.__awaiter(_this, void 0, void 0, function () {
          return tslib.__generator(this, function (_a) {
            // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
            signal.abort();
            return [2
            /*return*/
            ];
          });
        });
      }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
      return [2
      /*return*/
      , attemptFetchDynamicConfigWithRetry({
        appId: appId,
        apiKey: apiKey,
        measurementId: measurementId
      }, throttleMetadata, signal, retryData)];
    });
  });
}
/**
 * Runs one retry attempt.
 * @param appFields Necessary app config fields.
 * @param throttleMetadata Ongoing metadata to determine throttling times.
 * @param signal Abort signal.
 */


function attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing
) {
  var throttleEndTimeMillis = _a.throttleEndTimeMillis,
      backoffCount = _a.backoffCount;

  if (retryData === void 0) {
    retryData = defaultRetryData;
  }

  return tslib.__awaiter(this, void 0, void 0, function () {
    var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          appId = appFields.appId, measurementId = appFields.measurementId;
          _b.label = 1;

        case 1:
          _b.trys.push([1, 3,, 4]);

          return [4
          /*yield*/
          , setAbortableTimeout(signal, throttleEndTimeMillis)];

        case 2:
          _b.sent();

          return [3
          /*break*/
          , 4];

        case 3:
          e_1 = _b.sent();

          if (measurementId) {
            logger.warn("Timed out fetching this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (" provided in the \"measurementId\" field in the local Firebase config. [" + e_1.message + "]"));
            return [2
            /*return*/
            , {
              appId: appId,
              measurementId: measurementId
            }];
          }

          throw e_1;

        case 4:
          _b.trys.push([4, 6,, 7]);

          return [4
          /*yield*/
          , fetchDynamicConfig(appFields)];

        case 5:
          response = _b.sent(); // Note the SDK only clears throttle state if response is success or non-retriable.

          retryData.deleteThrottleMetadata(appId);
          return [2
          /*return*/
          , response];

        case 6:
          e_2 = _b.sent();

          if (!isRetriableError(e_2)) {
            retryData.deleteThrottleMetadata(appId);

            if (measurementId) {
              logger.warn("Failed to fetch this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (" provided in the \"measurementId\" field in the local Firebase config. [" + e_2.message + "]"));
              return [2
              /*return*/
              , {
                appId: appId,
                measurementId: measurementId
              }];
            } else {
              throw e_2;
            }
          }

          backoffMillis = Number(e_2.customData.httpStatus) === 503 ? util.calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : util.calculateBackoffMillis(backoffCount, retryData.intervalMillis);
          throttleMetadata = {
            throttleEndTimeMillis: Date.now() + backoffMillis,
            backoffCount: backoffCount + 1
          }; // Persists state.

          retryData.setThrottleMetadata(appId, throttleMetadata);
          logger.debug("Calling attemptFetch again in " + backoffMillis + " millis");
          return [2
          /*return*/
          , attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];

        case 7:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Supports waiting on a backoff by:
 *
 * <ul>
 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
 *       request appear the same.</li>
 * </ul>
 *
 * <p>Visible for testing.
 */


function setAbortableTimeout(signal, throttleEndTimeMillis) {
  return new Promise(function (resolve, reject) {
    // Derives backoff from given end time, normalizing negative numbers to zero.
    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
    var timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.

    signal.addEventListener(function () {
      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.

      reject(ERROR_FACTORY.create("fetch-throttle"
      /* FETCH_THROTTLE */
      , {
        throttleEndTimeMillis: throttleEndTimeMillis
      }));
    });
  });
}
/**
 * Returns true if the {@link Error} indicates a fetch request may succeed later.
 */


function isRetriableError(e) {
  if (!(e instanceof util.FirebaseError) || !e.customData) {
    return false;
  } // Uses string index defined by ErrorData, which FirebaseError implements.


  var httpStatus = Number(e.customData['httpStatus']);
  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
/**
 * Shims a minimal AbortSignal (copied from Remote Config).
 *
 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
 * swapped out if/when we do.
 */


var AnalyticsAbortSignal =
/** @class */
function () {
  function AnalyticsAbortSignal() {
    this.listeners = [];
  }

  AnalyticsAbortSignal.prototype.addEventListener = function (listener) {
    this.listeners.push(listener);
  };

  AnalyticsAbortSignal.prototype.abort = function () {
    this.listeners.forEach(function (listener) {
      return listener();
    });
  };

  return AnalyticsAbortSignal;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function validateIndexedDB() {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var e_1;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (!!util.isIndexedDBAvailable()) return [3
          /*break*/
          , 1];
          logger.warn(ERROR_FACTORY.create("indexeddb-unavailable"
          /* INDEXEDDB_UNAVAILABLE */
          , {
            errorInfo: 'IndexedDB is not available in this environment.'
          }).message);
          return [2
          /*return*/
          , false];

        case 1:
          _a.trys.push([1, 3,, 4]);

          return [4
          /*yield*/
          , util.validateIndexedDBOpenable()];

        case 2:
          _a.sent();

          return [3
          /*break*/
          , 4];

        case 3:
          e_1 = _a.sent();
          logger.warn(ERROR_FACTORY.create("indexeddb-unavailable"
          /* INDEXEDDB_UNAVAILABLE */
          , {
            errorInfo: e_1
          }).message);
          return [2
          /*return*/
          , false];

        case 4:
          return [2
          /*return*/
          , true];
      }
    });
  });
}
/**
 * Initialize the analytics instance in gtag.js by calling config command with fid.
 *
 * NOTE: We combine analytics initialization and setting fid together because we want fid to be
 * part of the `page_view` event that's sent during the initialization
 * @param app Firebase app
 * @param gtagCore The gtag function that's not wrapped.
 * @param dynamicConfigPromisesList Array of all dynamic config promises.
 * @param measurementIdToAppId Maps measurementID to appID.
 * @param installations FirebaseInstallations instance.
 *
 * @returns Measurement ID.
 */


function initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;

    var _b;

    return tslib.__generator(this, function (_c) {
      switch (_c.label) {
        case 0:
          dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.

          dynamicConfigPromise.then(function (config) {
            measurementIdToAppId[config.measurementId] = config.appId;

            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {
              logger.warn("The measurement ID in the local Firebase config (" + app.options.measurementId + ")" + (" does not match the measurement ID fetched from the server (" + config.measurementId + ").") + " To ensure analytics events are always sent to the correct Analytics property," + " update the" + " measurement ID field in the local config or remove it from the local config.");
            }
          })["catch"](function (e) {
            return logger.error(e);
          }); // Add to list to track state of all dynamic config promises.

          dynamicConfigPromisesList.push(dynamicConfigPromise);
          fidPromise = validateIndexedDB().then(function (envIsValid) {
            if (envIsValid) {
              return installations.getId();
            } else {
              return undefined;
            }
          });
          return [4
          /*yield*/
          , Promise.all([dynamicConfigPromise, fidPromise])];

        case 1:
          _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1]; // This command initializes gtag.js and only needs to be called once for the entire web app,
          // but since it is idempotent, we can call it multiple times.
          // We keep it together with other initialization logic for better code structure.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any

          gtagCore('js', new Date());
          configProperties = (_b = {}, // guard against developers accidentally setting properties with prefix `firebase_`
          _b[ORIGIN_KEY] = 'firebase', _b.update = true, _b);

          if (fid != null) {
            configProperties[GA_FID_KEY] = fid;
          } // It should be the first config command called on this GA-ID
          // Initialize this GA-ID and set FID on it using the gtag config API.


          gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);
          return [2
          /*return*/
          , dynamicConfig.measurementId];
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Maps appId to full initialization promise. Wrapped gtag calls must wait on
 * all or some of these, depending on the call's `send_to` param and the status
 * of the dynamic config fetches (see below).
 */


var initializationPromisesMap = {};
/**
 * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
 * wait on all these to be complete in order to determine if it can selectively
 * wait for only certain initialization (FID) promises or if it must wait for all.
 */

var dynamicConfigPromisesList = [];
/**
 * Maps fetched measurementIds to appId. Populated when the app's dynamic config
 * fetch completes. If already populated, gtag config calls can use this to
 * selectively wait for only this app's initialization promise (FID) instead of all
 * initialization promises.
 */

var measurementIdToAppId = {};
/**
 * Name for window global data layer array used by GA: defaults to 'dataLayer'.
 */

var dataLayerName = 'dataLayer';
/**
 * Name for window global gtag function used by GA: defaults to 'gtag'.
 */

var gtagName = 'gtag';
/**
 * Reproduction of standard gtag function or reference to existing
 * gtag function on window object.
 */

var gtagCoreFunction;
/**
 * Wrapper around gtag function that ensures FID is sent with all
 * relevant event and config calls.
 */

var wrappedGtagFunction;
/**
 * Flag to ensure page initialization steps (creation or wrapping of
 * dataLayer and gtag script) are only run once per page load.
 */

var globalInitDone = false;
/**
 * For testing
 */

function resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {
  if (newGlobalInitDone === void 0) {
    newGlobalInitDone = false;
  }

  if (newInitializationPromisesMap === void 0) {
    newInitializationPromisesMap = {};
  }

  if (newDynamicPromises === void 0) {
    newDynamicPromises = [];
  }

  globalInitDone = newGlobalInitDone;
  initializationPromisesMap = newInitializationPromisesMap;
  dynamicConfigPromisesList = newDynamicPromises;
  dataLayerName = 'dataLayer';
  gtagName = 'gtag';
}
/**
 * For testing
 */


function getGlobalVars() {
  return {
    initializationPromisesMap: initializationPromisesMap,
    dynamicConfigPromisesList: dynamicConfigPromisesList
  };
}
/**
 * This must be run before calling firebase.analytics() or it won't
 * have any effect.
 * @param options Custom gtag and dataLayer names.
 */


function settings(options) {
  if (globalInitDone) {
    throw ERROR_FACTORY.create("already-initialized"
    /* ALREADY_INITIALIZED */
    );
  }

  if (options.dataLayerName) {
    dataLayerName = options.dataLayerName;
  }

  if (options.gtagName) {
    gtagName = options.gtagName;
  }
}
/**
 * Returns true if no environment mismatch is found.
 * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
 * error that also lists details for each mismatch found.
 */


function warnOnBrowserContextMismatch() {
  var mismatchedEnvMessages = [];

  if (util.isBrowserExtension()) {
    mismatchedEnvMessages.push('This is a browser extension environment.');
  }

  if (!util.areCookiesEnabled()) {
    mismatchedEnvMessages.push('Cookies are not available.');
  }

  if (mismatchedEnvMessages.length > 0) {
    var details = mismatchedEnvMessages.map(function (message, index) {
      return "(" + (index + 1) + ") " + message;
    }).join(' ');
    var err = ERROR_FACTORY.create("invalid-analytics-context"
    /* INVALID_ANALYTICS_CONTEXT */
    , {
      errorInfo: details
    });
    logger.warn(err.message);
  }
}

function factory(app, installations) {
  warnOnBrowserContextMismatch();
  var appId = app.options.appId;

  if (!appId) {
    throw ERROR_FACTORY.create("no-app-id"
    /* NO_APP_ID */
    );
  }

  if (!app.options.apiKey) {
    if (app.options.measurementId) {
      logger.warn("The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest" + (" measurement ID for this Firebase app. Falling back to the measurement ID " + app.options.measurementId) + " provided in the \"measurementId\" field in the local Firebase config.");
    } else {
      throw ERROR_FACTORY.create("no-api-key"
      /* NO_API_KEY */
      );
    }
  }

  if (initializationPromisesMap[appId] != null) {
    throw ERROR_FACTORY.create("already-exists"
    /* ALREADY_EXISTS */
    , {
      id: appId
    });
  }

  if (!globalInitDone) {
    // Steps here should only be done once per page: creation or wrapping
    // of dataLayer and global gtag function.
    // Detect if user has already put the gtag <script> tag on this page.
    if (!findGtagScriptOnPage()) {
      insertScriptTag(dataLayerName);
    }

    getOrCreateDataLayer(dataLayerName);

    var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),
        wrappedGtag = _a.wrappedGtag,
        gtagCore = _a.gtagCore;

    wrappedGtagFunction = wrappedGtag;
    gtagCoreFunction = gtagCore;
    globalInitDone = true;
  } // Async but non-blocking.
  // This map reflects the completion state of all promises for each appId.


  initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction);
  var analyticsInstance = {
    app: app,
    // Public methods return void for API simplicity and to better match gtag,
    // while internal implementations return promises.
    logEvent: function logEvent(eventName, eventParams, options) {
      _logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options)["catch"](function (e) {
        return logger.error(e);
      });
    },
    setCurrentScreen: function setCurrentScreen(screenName, options) {
      _setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options)["catch"](function (e) {
        return logger.error(e);
      });
    },
    setUserId: function setUserId(id, options) {
      _setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options)["catch"](function (e) {
        return logger.error(e);
      });
    },
    setUserProperties: function setUserProperties(properties, options) {
      _setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options)["catch"](function (e) {
        return logger.error(e);
      });
    },
    setAnalyticsCollectionEnabled: function setAnalyticsCollectionEnabled(enabled) {
      _setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled)["catch"](function (e) {
        return logger.error(e);
      });
    },
    INTERNAL: {
      "delete": function _delete() {
        delete initializationPromisesMap[appId];
        return Promise.resolve();
      }
    }
  };
  return analyticsInstance;
}

var name = "@firebase/analytics";
var version = "0.6.2";
/**
 * Type constant for Firebase Analytics.
 */

var ANALYTICS_TYPE = 'analytics';

function registerAnalytics(instance) {
  instance.INTERNAL.registerComponent(new component.Component(ANALYTICS_TYPE, function (container) {
    // getImmediate for FirebaseApp will always succeed
    var app = container.getProvider('app').getImmediate();
    var installations = container.getProvider('installations').getImmediate();
    return factory(app, installations);
  }, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps({
    settings: settings,
    EventName: EventName,
    isSupported: isSupported
  }));
  instance.INTERNAL.registerComponent(new component.Component('analytics-internal', internalFactory, "PRIVATE"
  /* PRIVATE */
  ));
  instance.registerVersion(name, version);

  function internalFactory(container) {
    try {
      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
      return {
        logEvent: analytics.logEvent
      };
    } catch (e) {
      throw ERROR_FACTORY.create("interop-component-reg-failed"
      /* INTEROP_COMPONENT_REG_FAILED */
      , {
        reason: e
      });
    }
  }
}

registerAnalytics(firebase__default['default']);
/**
 * this is a public static method provided to users that wraps four different checks:
 *
 * 1. check if it's not a browser extension environment.
 * 1. check if cookie is enabled in current browser.
 * 3. check if IndexedDB is supported by the browser environment.
 * 4. check if the current browser context is valid for using IndexedDB.
 *
 */

function isSupported() {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var isDBOpenable, error_1;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (util.isBrowserExtension()) {
            return [2
            /*return*/
            , false];
          }

          if (!util.areCookiesEnabled()) {
            return [2
            /*return*/
            , false];
          }

          if (!util.isIndexedDBAvailable()) {
            return [2
            /*return*/
            , false];
          }

          _a.label = 1;

        case 1:
          _a.trys.push([1, 3,, 4]);

          return [4
          /*yield*/
          , util.validateIndexedDBOpenable()];

        case 2:
          isDBOpenable = _a.sent();
          return [2
          /*return*/
          , isDBOpenable];

        case 3:
          error_1 = _a.sent();
          return [2
          /*return*/
          , false];

        case 4:
          return [2
          /*return*/
          ];
      }
    });
  });
}

exports.factory = factory;
exports.getGlobalVars = getGlobalVars;
exports.registerAnalytics = registerAnalytics;
exports.resetGlobalVars = resetGlobalVars;
exports.settings = settings;

},{"@firebase/app":3,"@firebase/component":5,"@firebase/installations":6,"@firebase/logger":7,"@firebase/util":9,"tslib":17}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.firebase = exports["default"] = void 0;

var _tslib = require("tslib");

var _util = require("@firebase/util");

var _component = require("@firebase/component");

var _logger = require("@firebase/logger");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;

var ERRORS = (_a = {}, _a["no-app"
/* NO_APP */
] = "No Firebase App '{$appName}' has been created - " + 'call Firebase App.initializeApp()', _a["bad-app-name"
/* BAD_APP_NAME */
] = "Illegal App name: '{$appName}", _a["duplicate-app"
/* DUPLICATE_APP */
] = "Firebase App named '{$appName}' already exists", _a["app-deleted"
/* APP_DELETED */
] = "Firebase App named '{$appName}' already deleted", _a["invalid-app-argument"
/* INVALID_APP_ARGUMENT */
] = 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.', _a["invalid-log-argument"
/* INVALID_LOG_ARGUMENT */
] = 'First argument to `onLog` must be null or a function.', _a);
var ERROR_FACTORY = new _util.ErrorFactory('app', 'Firebase', ERRORS);
var name$1 = "@firebase/app";
var version = "0.6.13";
var name$2 = "@firebase/analytics";
var name$3 = "@firebase/auth";
var name$4 = "@firebase/database";
var name$5 = "@firebase/functions";
var name$6 = "@firebase/installations";
var name$7 = "@firebase/messaging";
var name$8 = "@firebase/performance";
var name$9 = "@firebase/remote-config";
var name$a = "@firebase/storage";
var name$b = "@firebase/firestore";
var name$c = "firebase-wrapper";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _a$1;

var DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$1] = 'fire-core', _a$1[name$2] = 'fire-analytics', _a$1[name$3] = 'fire-auth', _a$1[name$4] = 'fire-rtdb', _a$1[name$5] = 'fire-fn', _a$1[name$6] = 'fire-iid', _a$1[name$7] = 'fire-fcm', _a$1[name$8] = 'fire-perf', _a$1[name$9] = 'fire-rc', _a$1[name$a] = 'fire-gcs', _a$1[name$b] = 'fire-fst', _a$1['fire-js'] = 'fire-js', _a$1[name$c] = 'fire-js-all', _a$1);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = new _logger.Logger('@firebase/app');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */

var FirebaseAppImpl =
/** @class */
function () {
  function FirebaseAppImpl(options, config, firebase_) {
    var e_1, _a;

    var _this = this;

    this.firebase_ = firebase_;
    this.isDeleted_ = false;
    this.name_ = config.name;
    this.automaticDataCollectionEnabled_ = config.automaticDataCollectionEnabled || false;
    this.options_ = (0, _util.deepCopy)(options);
    this.container = new _component.ComponentContainer(config.name); // add itself to container

    this._addComponent(new _component.Component('app', function () {
      return _this;
    }, "PUBLIC"
    /* PUBLIC */
    ));

    try {
      // populate ComponentContainer with existing components
      for (var _b = (0, _tslib.__values)(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var component = _c.value;

        this._addComponent(component);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }

  Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
    get: function get() {
      this.checkDestroyed_();
      return this.automaticDataCollectionEnabled_;
    },
    set: function set(val) {
      this.checkDestroyed_();
      this.automaticDataCollectionEnabled_ = val;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "name", {
    get: function get() {
      this.checkDestroyed_();
      return this.name_;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "options", {
    get: function get() {
      this.checkDestroyed_();
      return this.options_;
    },
    enumerable: false,
    configurable: true
  });

  FirebaseAppImpl.prototype["delete"] = function () {
    var _this = this;

    return new Promise(function (resolve) {
      _this.checkDestroyed_();

      resolve();
    }).then(function () {
      _this.firebase_.INTERNAL.removeApp(_this.name_);

      return Promise.all(_this.container.getProviders().map(function (provider) {
        return provider["delete"]();
      }));
    }).then(function () {
      _this.isDeleted_ = true;
    });
  };
  /**
   * Return a service instance associated with this app (creating it
   * on demand), identified by the passed instanceIdentifier.
   *
   * NOTE: Currently storage and functions are the only ones that are leveraging this
   * functionality. They invoke it by calling:
   *
   * ```javascript
   * firebase.app().storage('STORAGE BUCKET ID')
   * ```
   *
   * The service name is passed to this already
   * @internal
   */


  FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
    if (instanceIdentifier === void 0) {
      instanceIdentifier = DEFAULT_ENTRY_NAME;
    }

    this.checkDestroyed_(); // getImmediate will always succeed because _getService is only called for registered components.

    return this.container.getProvider(name).getImmediate({
      identifier: instanceIdentifier
    });
  };
  /**
   * Remove a service instance from the cache, so we will create a new instance for this service
   * when people try to get this service again.
   *
   * NOTE: currently only firestore is using this functionality to support firestore shutdown.
   *
   * @param name The service name
   * @param instanceIdentifier instance identifier in case multiple instances are allowed
   * @internal
   */


  FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
    if (instanceIdentifier === void 0) {
      instanceIdentifier = DEFAULT_ENTRY_NAME;
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any


    this.container.getProvider(name).clearInstance(instanceIdentifier);
  };
  /**
   * @param component the component being added to this app's container
   */


  FirebaseAppImpl.prototype._addComponent = function (component) {
    try {
      this.container.addComponent(component);
    } catch (e) {
      logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
    }
  };

  FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
    this.container.addOrOverwriteComponent(component);
  };
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */


  FirebaseAppImpl.prototype.checkDestroyed_ = function () {
    if (this.isDeleted_) {
      throw ERROR_FACTORY.create("app-deleted"
      /* APP_DELETED */
      , {
        appName: this.name_
      });
    }
  };

  return FirebaseAppImpl;
}(); // Prevent dead-code elimination of these methods w/o invalid property
// copying.


FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype["delete"] || console.log('dc');
var version$1 = "8.0.1";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */

function createFirebaseNamespaceCore(firebaseAppImpl) {
  var apps = {}; // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var components = new Map(); // A namespace is a plain JavaScript Object.

  var namespace = {
    // Hack to prevent Babel from modifying the object returned
    // as the firebase namespace.
    // @ts-ignore
    __esModule: true,
    initializeApp: initializeApp,
    // @ts-ignore
    app: app,
    registerVersion: registerVersion,
    setLogLevel: _logger.setLogLevel,
    onLog: onLog,
    // @ts-ignore
    apps: null,
    SDK_VERSION: version$1,
    INTERNAL: {
      registerComponent: registerComponent,
      removeApp: removeApp,
      components: components,
      useAsService: useAsService
    }
  }; // Inject a circular default export to allow Babel users who were previously
  // using:
  //
  //   import firebase from 'firebase';
  //   which becomes: var firebase = require('firebase').default;
  //
  // instead of
  //
  //   import * as firebase from 'firebase';
  //   which becomes: var firebase = require('firebase');
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  namespace['default'] = namespace; // firebase.apps is a read-only getter.

  Object.defineProperty(namespace, 'apps', {
    get: getApps
  });
  /**
   * Called by App.delete() - but before any services associated with the App
   * are deleted.
   */

  function removeApp(name) {
    delete apps[name];
  }
  /**
   * Get the App object for a given name (or DEFAULT).
   */


  function app(name) {
    name = name || DEFAULT_ENTRY_NAME;

    if (!(0, _util.contains)(apps, name)) {
      throw ERROR_FACTORY.create("no-app"
      /* NO_APP */
      , {
        appName: name
      });
    }

    return apps[name];
  } // @ts-ignore


  app['App'] = firebaseAppImpl;

  function initializeApp(options, rawConfig) {
    if (rawConfig === void 0) {
      rawConfig = {};
    }

    if (_typeof(rawConfig) !== 'object' || rawConfig === null) {
      var name_1 = rawConfig;
      rawConfig = {
        name: name_1
      };
    }

    var config = rawConfig;

    if (config.name === undefined) {
      config.name = DEFAULT_ENTRY_NAME;
    }

    var name = config.name;

    if (typeof name !== 'string' || !name) {
      throw ERROR_FACTORY.create("bad-app-name"
      /* BAD_APP_NAME */
      , {
        appName: String(name)
      });
    }

    if ((0, _util.contains)(apps, name)) {
      throw ERROR_FACTORY.create("duplicate-app"
      /* DUPLICATE_APP */
      , {
        appName: name
      });
    }

    var app = new firebaseAppImpl(options, config, namespace);
    apps[name] = app;
    return app;
  }
  /*
   * Return an array of all the non-deleted FirebaseApps.
   */


  function getApps() {
    // Make a copy so caller cannot mutate the apps list.
    return Object.keys(apps).map(function (name) {
      return apps[name];
    });
  }

  function registerComponent(component) {
    var e_1, _a;

    var componentName = component.name;

    if (components.has(componentName)) {
      logger.debug("There were multiple attempts to register component " + componentName + ".");
      return component.type === "PUBLIC"
      /* PUBLIC */
      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
      namespace[componentName] : null;
    }

    components.set(componentName, component); // create service namespace for public components

    if (component.type === "PUBLIC"
    /* PUBLIC */
    ) {
        // The Service namespace is an accessor function ...
        var serviceNamespace = function serviceNamespace(appArg) {
          if (appArg === void 0) {
            appArg = app();
          } // eslint-disable-next-line @typescript-eslint/no-explicit-any


          if (typeof appArg[componentName] !== 'function') {
            // Invalid argument.
            // This happens in the following case: firebase.storage('gs:/')
            throw ERROR_FACTORY.create("invalid-app-argument"
            /* INVALID_APP_ARGUMENT */
            , {
              appName: componentName
            });
          } // Forward service instance lookup to the FirebaseApp.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any


          return appArg[componentName]();
        }; // ... and a container for service-level properties.


        if (component.serviceProps !== undefined) {
          (0, _util.deepExtend)(serviceNamespace, component.serviceProps);
        } // eslint-disable-next-line @typescript-eslint/no-explicit-any


        namespace[componentName] = serviceNamespace; // Patch the FirebaseAppImpl prototype
        // eslint-disable-next-line @typescript-eslint/no-explicit-any

        firebaseAppImpl.prototype[componentName] = // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
        // option added to the no-explicit-any rule when ESlint releases it.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          var serviceFxn = this._getService.bind(this, componentName);

          return serviceFxn.apply(this, component.multipleInstances ? args : []);
        };
      }

    try {
      // add the component to existing app instances
      for (var _b = (0, _tslib.__values)(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var appName = _c.value;

        apps[appName]._addComponent(component);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    return component.type === "PUBLIC"
    /* PUBLIC */
    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace[componentName] : null;
  }

  function registerVersion(libraryKeyOrName, version, variant) {
    var _a; // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.


    var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;

    if (variant) {
      library += "-" + variant;
    }

    var libraryMismatch = library.match(/\s|\//);
    var versionMismatch = version.match(/\s|\//);

    if (libraryMismatch || versionMismatch) {
      var warning = ["Unable to register library \"" + library + "\" with version \"" + version + "\":"];

      if (libraryMismatch) {
        warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
      }

      if (libraryMismatch && versionMismatch) {
        warning.push('and');
      }

      if (versionMismatch) {
        warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
      }

      logger.warn(warning.join(' '));
      return;
    }

    registerComponent(new _component.Component(library + "-version", function () {
      return {
        library: library,
        version: version
      };
    }, "VERSION"
    /* VERSION */
    ));
  }

  function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== 'function') {
      throw ERROR_FACTORY.create("invalid-log-argument"
      /* INVALID_LOG_ARGUMENT */
      , {
        appName: name
      });
    }

    (0, _logger.setUserLogHandler)(logCallback, options);
  } // Map the requested service to a registered service name
  // (used to map auth to serverAuth service when needed).


  function useAsService(app, name) {
    if (name === 'serverAuth') {
      return null;
    }

    var useService = name;
    return useService;
  }

  return namespace;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */


function createFirebaseNamespace() {
  var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
  namespace.INTERNAL = (0, _tslib.__assign)((0, _tslib.__assign)({}, namespace.INTERNAL), {
    createFirebaseNamespace: createFirebaseNamespace,
    extendNamespace: extendNamespace,
    createSubscribe: _util.createSubscribe,
    ErrorFactory: _util.ErrorFactory,
    deepExtend: _util.deepExtend
  });
  /**
   * Patch the top-level firebase namespace with additional properties.
   *
   * firebase.INTERNAL.extendNamespace()
   */

  function extendNamespace(props) {
    (0, _util.deepExtend)(namespace, props);
  }

  return namespace;
}

var firebase = createFirebaseNamespace();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var PlatformLoggerService =
/** @class */
function () {
  function PlatformLoggerService(container) {
    this.container = container;
  } // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.


  PlatformLoggerService.prototype.getPlatformInfoString = function () {
    var providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are
    // version components.

    return providers.map(function (provider) {
      if (isVersionServiceProvider(provider)) {
        var service = provider.getImmediate();
        return service.library + "/" + service.version;
      } else {
        return null;
      }
    }).filter(function (logString) {
      return logString;
    }).join(' ');
  };

  return PlatformLoggerService;
}();
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */


function isVersionServiceProvider(provider) {
  var component = provider.getComponent();
  return (component === null || component === void 0 ? void 0 : component.type) === "VERSION"
  /* VERSION */
  ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function registerCoreComponents(firebase, variant) {
  firebase.INTERNAL.registerComponent(new _component.Component('platform-logger', function (container) {
    return new PlatformLoggerService(container);
  }, "PRIVATE"
  /* PRIVATE */
  )); // Register `app` package.

  firebase.registerVersion(name$1, version, variant); // Register platform SDK identifier (no version).

  firebase.registerVersion('fire-js', '');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Firebase Lite detection test
// eslint-disable-next-line @typescript-eslint/no-explicit-any


if ((0, _util.isBrowser)() && self.firebase !== undefined) {
  logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  "); // eslint-disable-next-line

  var sdkVersion = self.firebase.SDK_VERSION;

  if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
    logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
  }
}

var initializeApp = firebase.initializeApp; // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
// the no-explicit-any rule when ESlint releases it.
// eslint-disable-next-line @typescript-eslint/no-explicit-any

firebase.initializeApp = function () {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  } // Environment check before initializing app
  // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
  // in @firebase/logger


  if ((0, _util.isNode)()) {
    logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      ");
  }

  return initializeApp.apply(undefined, args);
};

var firebase$1 = firebase;
exports.firebase = firebase$1;
registerCoreComponents(firebase$1);
var _default = firebase$1;
exports["default"] = _default;

},{"@firebase/component":5,"@firebase/logger":7,"@firebase/util":9,"tslib":17}],4:[function(require,module,exports){
(function (global){(function (){
"use strict";

var _app = _interopRequireDefault(require("@firebase/app"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function () {
  /*
  Copyright The Closure Library Authors.
  SPDX-License-Identifier: Apache-2.0
  */
  var k,
      aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
    a != Array.prototype && a != Object.prototype && (a[b] = c.value);
  };

  function ba(a) {
    a = ["object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && window, "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self, "object" == (typeof global === "undefined" ? "undefined" : _typeof(global)) && global, a];

    for (var b = 0; b < a.length; ++b) {
      var c = a[b];
      if (c && c.Math == Math) return c;
    }

    return globalThis;
  }

  var ca = ba(this);

  function da(a, b) {
    if (b) {
      var c = ca;
      a = a.split(".");

      for (var d = 0; d < a.length - 1; d++) {
        var e = a[d];
        e in c || (c[e] = {});
        c = c[e];
      }

      a = a[a.length - 1];
      d = c[a];
      b = b(d);
      b != d && null != b && aa(c, a, {
        configurable: !0,
        writable: !0,
        value: b
      });
    }
  }

  function ea(a) {
    var b = 0;
    return function () {
      return b < a.length ? {
        done: !1,
        value: a[b++]
      } : {
        done: !0
      };
    };
  }

  function fa(a) {
    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
    return b ? b.call(a) : {
      next: ea(a)
    };
  }

  da("Promise", function (a) {
    function b(g) {
      this.b = 0;
      this.c = void 0;
      this.a = [];
      var h = this.f();

      try {
        g(h.resolve, h.reject);
      } catch (n) {
        h.reject(n);
      }
    }

    function c() {
      this.a = null;
    }

    function d(g) {
      return g instanceof b ? g : new b(function (h) {
        h(g);
      });
    }

    if (a) return a;

    c.prototype.b = function (g) {
      if (null == this.a) {
        this.a = [];
        var h = this;
        this.c(function () {
          h.g();
        });
      }

      this.a.push(g);
    };

    var e = ca.setTimeout;

    c.prototype.c = function (g) {
      e(g, 0);
    };

    c.prototype.g = function () {
      for (; this.a && this.a.length;) {
        var g = this.a;
        this.a = [];

        for (var h = 0; h < g.length; ++h) {
          var n = g[h];
          g[h] = null;

          try {
            n();
          } catch (p) {
            this.f(p);
          }
        }
      }

      this.a = null;
    };

    c.prototype.f = function (g) {
      this.c(function () {
        throw g;
      });
    };

    b.prototype.f = function () {
      function g(p) {
        return function (v) {
          n || (n = !0, p.call(h, v));
        };
      }

      var h = this,
          n = !1;
      return {
        resolve: g(this.v),
        reject: g(this.g)
      };
    };

    b.prototype.v = function (g) {
      if (g === this) this.g(new TypeError("A Promise cannot resolve to itself"));else if (g instanceof b) this.s(g);else {
        a: switch (_typeof(g)) {
          case "object":
            var h = null != g;
            break a;

          case "function":
            h = !0;
            break a;

          default:
            h = !1;
        }

        h ? this.m(g) : this.i(g);
      }
    };

    b.prototype.m = function (g) {
      var h = void 0;

      try {
        h = g.then;
      } catch (n) {
        this.g(n);
        return;
      }

      "function" == typeof h ? this.u(h, g) : this.i(g);
    };

    b.prototype.g = function (g) {
      this.h(2, g);
    };

    b.prototype.i = function (g) {
      this.h(1, g);
    };

    b.prototype.h = function (g, h) {
      if (0 != this.b) throw Error("Cannot settle(" + g + ", " + h + "): Promise already settled in state" + this.b);
      this.b = g;
      this.c = h;
      this.l();
    };

    b.prototype.l = function () {
      if (null != this.a) {
        for (var g = 0; g < this.a.length; ++g) {
          f.b(this.a[g]);
        }

        this.a = null;
      }
    };

    var f = new c();

    b.prototype.s = function (g) {
      var h = this.f();
      g.Pa(h.resolve, h.reject);
    };

    b.prototype.u = function (g, h) {
      var n = this.f();

      try {
        g.call(h, n.resolve, n.reject);
      } catch (p) {
        n.reject(p);
      }
    };

    b.prototype.then = function (g, h) {
      function n(A, Q) {
        return "function" == typeof A ? function (xa) {
          try {
            p(A(xa));
          } catch (Ad) {
            v(Ad);
          }
        } : Q;
      }

      var p,
          v,
          B = new b(function (A, Q) {
        p = A;
        v = Q;
      });
      this.Pa(n(g, p), n(h, v));
      return B;
    };

    b.prototype["catch"] = function (g) {
      return this.then(void 0, g);
    };

    b.prototype.Pa = function (g, h) {
      function n() {
        switch (p.b) {
          case 1:
            g(p.c);
            break;

          case 2:
            h(p.c);
            break;

          default:
            throw Error("Unexpected state: " + p.b);
        }
      }

      var p = this;
      null == this.a ? f.b(n) : this.a.push(n);
    };

    b.resolve = d;

    b.reject = function (g) {
      return new b(function (h, n) {
        n(g);
      });
    };

    b.race = function (g) {
      return new b(function (h, n) {
        for (var p = fa(g), v = p.next(); !v.done; v = p.next()) {
          d(v.value).Pa(h, n);
        }
      });
    };

    b.all = function (g) {
      var h = fa(g),
          n = h.next();
      return n.done ? d([]) : new b(function (p, v) {
        function B(xa) {
          return function (Ad) {
            A[xa] = Ad;
            Q--;
            0 == Q && p(A);
          };
        }

        var A = [],
            Q = 0;

        do {
          A.push(void 0), Q++, d(n.value).Pa(B(A.length - 1), v), n = h.next();
        } while (!n.done);
      });
    };

    return b;
  });
  var ha = ha || {},
      l = this || self,
      ia = /^[\w+/_-]+[=]{0,2}$/,
      ja = null;

  function ka(a) {
    return (a = a.querySelector && a.querySelector("script[nonce]")) && (a = a.nonce || a.getAttribute("nonce")) && ia.test(a) ? a : "";
  }

  function la() {}

  function ma(a) {
    var b = _typeof(a);

    return "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
  }

  function na(a) {
    var b = ma(a);
    return "array" == b || "object" == b && "number" == typeof a.length;
  }

  function oa(a) {
    return "function" == ma(a);
  }

  function m(a) {
    var b = _typeof(a);

    return "object" == b && null != a || "function" == b;
  }

  function pa(a) {
    return Object.prototype.hasOwnProperty.call(a, qa) && a[qa] || (a[qa] = ++ra);
  }

  var qa = "closure_uid_" + (1E9 * Math.random() >>> 0),
      ra = 0;

  function sa(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }

  function ta(a, b, c) {
    if (!a) throw Error();

    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var e = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(e, d);
        return a.apply(b, e);
      };
    }

    return function () {
      return a.apply(b, arguments);
    };
  }

  function q(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = sa : q = ta;
    return q.apply(null, arguments);
  }

  function ua(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var d = c.slice();
      d.push.apply(d, arguments);
      return a.apply(this, d);
    };
  }

  var va = Date.now;

  function r(a, b) {
    function c() {}

    c.prototype = b.prototype;
    a.$a = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;
  }

  function wa(a) {
    return a;
  }

  ;
  /*
  Copyright 2017 Google Inc.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function t(a, b, c) {
    this.code = ya + a;
    this.message = b || za[a] || "";
    this.a = c || null;
  }

  r(t, Error);

  t.prototype.w = function () {
    var a = {
      code: this.code,
      message: this.message
    };
    this.a && (a.serverResponse = this.a);
    return a;
  };

  t.prototype.toJSON = function () {
    return this.w();
  };

  function Aa(a) {
    var b = a && a.code;
    return b ? new t(b.substring(ya.length), a.message, a.serverResponse) : null;
  }

  var ya = "auth/",
      za = {
    "admin-restricted-operation": "This operation is restricted to administrators only.",
    "argument-error": "",
    "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
    "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
    "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
    "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
    "cordova-not-ready": "Cordova framework is not ready.",
    "cors-unsupported": "This browser is not supported.",
    "credential-already-in-use": "This credential is already associated with a different user account.",
    "custom-token-mismatch": "The custom token corresponds to a different audience.",
    "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
    "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
    "email-change-needs-verification": "Multi-factor users must always have a verified email.",
    "email-already-in-use": "The email address is already in use by another account.",
    "expired-action-code": "The action code has expired. ",
    "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
    "internal-error": "An internal error has occurred.",
    "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
    "invalid-app-id": "The mobile app identifier is not registed for the current project.",
    "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
    "invalid-auth-event": "An internal error has occurred.",
    "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
    "invalid-continue-uri": "The continue URL provided in the request is invalid.",
    "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
    "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
    "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",
    "invalid-email": "The email address is badly formatted.",
    "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
    "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
    "invalid-credential": "The supplied auth credential is malformed or has expired.",
    "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-multi-factor-session": "The request does not contain a valid proof of first factor successful sign-in.",
    "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
    "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
    "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
    "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
    "wrong-password": "The password is invalid or the user does not have a password.",
    "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
    "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
    "invalid-provider-id": "The specified provider ID is invalid.",
    "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
    "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
    "invalid-tenant-id": "The Auth instance's tenant ID is invalid.",
    "multi-factor-info-not-found": "The user does not have a second factor matching the identifier provided.",
    "multi-factor-auth-required": "Proof of ownership of a second factor is required to complete sign-in.",
    "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
    "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
    "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
    "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
    "missing-continue-uri": "A continue URL must be provided in the request.",
    "missing-iframe-start": "An internal error has occurred.",
    "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
    "missing-multi-factor-info": "No second factor identifier is provided.",
    "missing-multi-factor-session": "The request is missing proof of first factor successful sign-in.",
    "missing-or-invalid-nonce": "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
    "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
    "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
    "app-deleted": "This instance of FirebaseApp has been deleted.",
    "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
    "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
    "no-auth-event": "An internal error has occurred.",
    "no-such-provider": "User was not linked to an account with the given provider.",
    "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",
    "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
    "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
    "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
    "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
    "provider-already-linked": "User can only be linked to one identity for the given provider.",
    "quota-exceeded": "The project's quota for this operation has been exceeded.",
    "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
    "redirect-operation-pending": "A redirect sign-in operation is already pending.",
    "rejected-credential": "The request contains malformed or mismatching credentials.",
    "second-factor-already-in-use": "The second factor is already enrolled on this account.",
    "maximum-second-factor-count-exceeded": "The maximum allowed number of second factors on a user has been exceeded.",
    "tenant-id-mismatch": "The provided tenant ID does not match the Auth instance's tenant ID",
    timeout: "The operation has timed out.",
    "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
    "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
    "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
    "unsupported-first-factor": "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",
    "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
    "unsupported-tenant-operation": "This operation is not supported in a multi-tenant context.",
    "unverified-email": "The operation requires a verified email.",
    "user-cancelled": "The user did not grant your application the permissions it requested.",
    "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
    "user-disabled": "The user account has been disabled by an administrator.",
    "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
    "user-signed-out": "",
    "weak-password": "The password must be 6 characters long or more.",
    "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
  };
  /*
  Copyright 2017 Google LLC
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  var Ba = {
    kd: {
      Sa: "https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
      Ya: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
      Va: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",
      id: "b"
    },
    rd: {
      Sa: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
      Ya: "https://securetoken.googleapis.com/v1/token",
      Va: "https://identitytoolkit.googleapis.com/v2/",
      id: "p"
    },
    td: {
      Sa: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
      Ya: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
      Va: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",
      id: "s"
    },
    ud: {
      Sa: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",
      Ya: "https://test-securetoken.sandbox.googleapis.com/v1/token",
      Va: "https://test-identitytoolkit.sandbox.googleapis.com/v2/",
      id: "t"
    }
  };

  function Ca(a) {
    for (var b in Ba) {
      if (Ba[b].id === a) return a = Ba[b], {
        firebaseEndpoint: a.Sa,
        secureTokenEndpoint: a.Ya,
        identityPlatformEndpoint: a.Va
      };
    }

    return null;
  }

  var Da;
  Da = Ca("__EID__") ? "__EID__" : void 0;

  function Ea(a) {
    if (!a) return !1;

    try {
      return !!a.$goog_Thenable;
    } catch (b) {
      return !1;
    }
  }

  ;

  function u(a) {
    if (Error.captureStackTrace) Error.captureStackTrace(this, u);else {
      var b = Error().stack;
      b && (this.stack = b);
    }
    a && (this.message = String(a));
  }

  r(u, Error);
  u.prototype.name = "CustomError";

  function Fa(a, b) {
    a = a.split("%s");

    for (var c = "", d = a.length - 1, e = 0; e < d; e++) {
      c += a[e] + (e < b.length ? b[e] : "%s");
    }

    u.call(this, c + a[d]);
  }

  r(Fa, u);
  Fa.prototype.name = "AssertionError";

  function Ga(a, b) {
    throw new Fa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
  }

  ;

  function Ha(a, b) {
    this.c = a;
    this.f = b;
    this.b = 0;
    this.a = null;
  }

  Ha.prototype.get = function () {
    if (0 < this.b) {
      this.b--;
      var a = this.a;
      this.a = a.next;
      a.next = null;
    } else a = this.c();

    return a;
  };

  function Ia(a, b) {
    a.f(b);
    100 > a.b && (a.b++, b.next = a.a, a.a = b);
  }

  ;

  function Ja() {
    this.b = this.a = null;
  }

  var La = new Ha(function () {
    return new Ka();
  }, function (a) {
    a.reset();
  });

  Ja.prototype.add = function (a, b) {
    var c = La.get();
    c.set(a, b);
    this.b ? this.b.next = c : this.a = c;
    this.b = c;
  };

  function Ma() {
    var a = Na,
        b = null;
    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
    return b;
  }

  function Ka() {
    this.next = this.b = this.a = null;
  }

  Ka.prototype.set = function (a, b) {
    this.a = a;
    this.b = b;
    this.next = null;
  };

  Ka.prototype.reset = function () {
    this.next = this.b = this.a = null;
  };

  var Oa = Array.prototype.indexOf ? function (a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
  } : function (a, b) {
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);

    for (var c = 0; c < a.length; c++) {
      if (c in a && a[c] === b) return c;
    }

    return -1;
  },
      w = Array.prototype.forEach ? function (a, b, c) {
    Array.prototype.forEach.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++) {
      f in e && b.call(c, e[f], f, a);
    }
  };

  function Pa(a, b) {
    for (var c = "string" === typeof a ? a.split("") : a, d = a.length - 1; 0 <= d; --d) {
      d in c && b.call(void 0, c[d], d, a);
    }
  }

  var Qa = Array.prototype.filter ? function (a, b) {
    return Array.prototype.filter.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = [], e = 0, f = "string" === typeof a ? a.split("") : a, g = 0; g < c; g++) {
      if (g in f) {
        var h = f[g];
        b.call(void 0, h, g, a) && (d[e++] = h);
      }
    }

    return d;
  },
      Ra = Array.prototype.map ? function (a, b) {
    return Array.prototype.map.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = Array(c), e = "string" === typeof a ? a.split("") : a, f = 0; f < c; f++) {
      f in e && (d[f] = b.call(void 0, e[f], f, a));
    }

    return d;
  },
      Sa = Array.prototype.some ? function (a, b) {
    return Array.prototype.some.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++) {
      if (e in d && b.call(void 0, d[e], e, a)) return !0;
    }

    return !1;
  };

  function Ta(a) {
    a: {
      var b = Ua;

      for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++) {
        if (e in d && b.call(void 0, d[e], e, a)) {
          b = e;
          break a;
        }
      }

      b = -1;
    }

    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
  }

  function Va(a, b) {
    return 0 <= Oa(a, b);
  }

  function Wa(a, b) {
    b = Oa(a, b);
    var c;
    (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
    return c;
  }

  function Xa(a, b) {
    var c = 0;
    Pa(a, function (d, e) {
      b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
    });
  }

  function Ya(a) {
    return Array.prototype.concat.apply([], arguments);
  }

  function Za(a) {
    var b = a.length;

    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++) {
        c[d] = a[d];
      }

      return c;
    }

    return [];
  }

  ;
  var $a = String.prototype.trim ? function (a) {
    return a.trim();
  } : function (a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
  },
      ab = /&/g,
      bb = /</g,
      cb = />/g,
      db = /"/g,
      eb = /'/g,
      fb = /\x00/g,
      gb = /[\x00&<>"']/;

  function x(a, b) {
    return -1 != a.indexOf(b);
  }

  function hb(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  ;
  var ib;

  a: {
    var jb = l.navigator;

    if (jb) {
      var kb = jb.userAgent;

      if (kb) {
        ib = kb;
        break a;
      }
    }

    ib = "";
  }

  function y(a) {
    return x(ib, a);
  }

  ;

  function lb(a, b) {
    for (var c in a) {
      b.call(void 0, a[c], c, a);
    }
  }

  function mb(a) {
    for (var b in a) {
      return !1;
    }

    return !0;
  }

  function nb(a) {
    var b = {},
        c;

    for (c in a) {
      b[c] = a[c];
    }

    return b;
  }

  var ob = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

  function z(a, b) {
    for (var c, d, e = 1; e < arguments.length; e++) {
      d = arguments[e];

      for (c in d) {
        a[c] = d[c];
      }

      for (var f = 0; f < ob.length; f++) {
        c = ob[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
      }
    }
  }

  ;

  function pb(a, b) {
    a: {
      try {
        var c = a && a.ownerDocument,
            d = c && (c.defaultView || c.parentWindow);
        d = d || l;

        if (d.Element && d.Location) {
          var e = d;
          break a;
        }
      } catch (g) {}

      e = null;
    }

    if (e && "undefined" != typeof e[b] && (!a || !(a instanceof e[b]) && (a instanceof e.Location || a instanceof e.Element))) {
      if (m(a)) try {
        var f = a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a);
      } catch (g) {
        f = "<object could not be stringified>";
      } else f = void 0 === a ? "undefined" : null === a ? "null" : _typeof(a);
      Ga("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, f);
    }
  }

  ;

  function qb(a, b) {
    this.a = a === rb && b || "";
    this.b = sb;
  }

  qb.prototype.sa = !0;

  qb.prototype.ra = function () {
    return this.a;
  };

  qb.prototype.toString = function () {
    return "Const{" + this.a + "}";
  };

  function tb(a) {
    if (a instanceof qb && a.constructor === qb && a.b === sb) return a.a;
    Ga("expected object of type Const, got '" + a + "'");
    return "type_error:Const";
  }

  var sb = {},
      rb = {};
  var ub;

  function vb() {
    if (void 0 === ub) {
      var a = null,
          b = l.trustedTypes;

      if (b && b.createPolicy) {
        try {
          a = b.createPolicy("goog#html", {
            createHTML: wa,
            createScript: wa,
            createScriptURL: wa
          });
        } catch (c) {
          l.console && l.console.error(c.message);
        }

        ub = a;
      } else ub = a;
    }

    return ub;
  }

  ;

  function wb(a, b) {
    this.a = b === xb ? a : "";
  }

  wb.prototype.sa = !0;

  wb.prototype.ra = function () {
    return this.a.toString();
  };

  wb.prototype.toString = function () {
    return "TrustedResourceUrl{" + this.a + "}";
  };

  function yb(a) {
    if (a instanceof wb && a.constructor === wb) return a.a;
    Ga("expected object of type TrustedResourceUrl, got '" + a + "' of type " + ma(a));
    return "type_error:TrustedResourceUrl";
  }

  function zb(a, b) {
    var c = tb(a);
    if (!Ab.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
    a = c.replace(Bb, function (d, e) {
      if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
      d = b[e];
      return d instanceof qb ? tb(d) : encodeURIComponent(String(d));
    });
    return Cb(a);
  }

  var Bb = /%{(\w+)}/g,
      Ab = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,
      xb = {};

  function Cb(a) {
    var b = vb();
    a = b ? b.createScriptURL(a) : a;
    return new wb(a, xb);
  }

  ;

  function C(a, b) {
    this.a = b === Db ? a : "";
  }

  C.prototype.sa = !0;

  C.prototype.ra = function () {
    return this.a.toString();
  };

  C.prototype.toString = function () {
    return "SafeUrl{" + this.a + "}";
  };

  function Eb(a) {
    if (a instanceof C && a.constructor === C) return a.a;
    Ga("expected object of type SafeUrl, got '" + a + "' of type " + ma(a));
    return "type_error:SafeUrl";
  }

  var Fb = /^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,
      Gb = /^data:(.*);base64,[a-z0-9+\/]+=*$/i,
      Hb = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;

  function Ib(a) {
    if (a instanceof C) return a;
    a = "object" == _typeof(a) && a.sa ? a.ra() : String(a);
    if (Hb.test(a)) a = new C(a, Db);else {
      a = String(a);
      a = a.replace(/(%0A|%0D)/g, "");
      var b = a.match(Gb);
      a = b && Fb.test(b[1]) ? new C(a, Db) : null;
    }
    return a;
  }

  function Jb(a) {
    if (a instanceof C) return a;
    a = "object" == _typeof(a) && a.sa ? a.ra() : String(a);
    Hb.test(a) || (a = "about:invalid#zClosurez");
    return new C(a, Db);
  }

  var Db = {},
      Kb = new C("about:invalid#zClosurez", Db);

  function Lb(a, b, c) {
    this.a = c === Mb ? a : "";
  }

  Lb.prototype.sa = !0;

  Lb.prototype.ra = function () {
    return this.a.toString();
  };

  Lb.prototype.toString = function () {
    return "SafeHtml{" + this.a + "}";
  };

  function Nb(a) {
    if (a instanceof Lb && a.constructor === Lb) return a.a;
    Ga("expected object of type SafeHtml, got '" + a + "' of type " + ma(a));
    return "type_error:SafeHtml";
  }

  var Mb = {};

  function Ob(a, b) {
    pb(a, "HTMLScriptElement");
    a.src = yb(b);
    (b = a.ownerDocument && a.ownerDocument.defaultView) && b != l ? b = ka(b.document) : (null === ja && (ja = ka(l.document)), b = ja);
    b && a.setAttribute("nonce", b);
  }

  function Pb(a, b, c, d) {
    a = a instanceof C ? a : Jb(a);
    b = b || l;
    c = c instanceof qb ? tb(c) : c || "";
    return b.open(Eb(a), c, d, void 0);
  }

  ;

  function Qb(a, b) {
    for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) {
      d += c.shift() + e.shift();
    }

    return d + c.join("%s");
  }

  function Rb(a) {
    gb.test(a) && (-1 != a.indexOf("&") && (a = a.replace(ab, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(bb, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(cb, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(db, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(eb, "&#39;")), -1 != a.indexOf("\x00") && (a = a.replace(fb, "&#0;")));
    return a;
  }

  ;

  function Sb(a) {
    Sb[" "](a);
    return a;
  }

  Sb[" "] = la;

  function Tb(a, b) {
    var c = Ub;
    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
  }

  ;
  var Vb = y("Opera"),
      Wb = y("Trident") || y("MSIE"),
      Xb = y("Edge"),
      Yb = Xb || Wb,
      Zb = y("Gecko") && !(x(ib.toLowerCase(), "webkit") && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"),
      $b = x(ib.toLowerCase(), "webkit") && !y("Edge");

  function ac() {
    var a = l.document;
    return a ? a.documentMode : void 0;
  }

  var bc;

  a: {
    var cc = "",
        dc = function () {
      var a = ib;
      if (Zb) return /rv:([^\);]+)(\)|;)/.exec(a);
      if (Xb) return /Edge\/([\d\.]+)/.exec(a);
      if (Wb) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
      if ($b) return /WebKit\/(\S+)/.exec(a);
      if (Vb) return /(?:Version)[ \/]?(\S+)/.exec(a);
    }();

    dc && (cc = dc ? dc[1] : "");

    if (Wb) {
      var ec = ac();

      if (null != ec && ec > parseFloat(cc)) {
        bc = String(ec);
        break a;
      }
    }

    bc = cc;
  }

  var Ub = {};

  function fc(a) {
    return Tb(a, function () {
      for (var b = 0, c = $a(String(bc)).split("."), d = $a(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
        var g = c[f] || "",
            h = d[f] || "";

        do {
          g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];
          h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];
          if (0 == g[0].length && 0 == h[0].length) break;
          b = hb(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || hb(0 == g[2].length, 0 == h[2].length) || hb(g[2], h[2]);
          g = g[3];
          h = h[3];
        } while (0 == b);
      }

      return 0 <= b;
    });
  }

  var gc;

  if (l.document && Wb) {
    var hc = ac();
    gc = hc ? hc : parseInt(bc, 10) || void 0;
  } else gc = void 0;

  var ic = gc;

  try {
    new self.OffscreenCanvas(0, 0).getContext("2d");
  } catch (a) {}

  var jc = !Wb || 9 <= Number(ic);

  function kc(a) {
    var b = document;
    return "string" === typeof a ? b.getElementById(a) : a;
  }

  function lc(a, b) {
    lb(b, function (c, d) {
      c && "object" == _typeof(c) && c.sa && (c = c.ra());
      "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : mc.hasOwnProperty(d) ? a.setAttribute(mc[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;
    });
  }

  var mc = {
    cellpadding: "cellPadding",
    cellspacing: "cellSpacing",
    colspan: "colSpan",
    frameborder: "frameBorder",
    height: "height",
    maxlength: "maxLength",
    nonce: "nonce",
    role: "role",
    rowspan: "rowSpan",
    type: "type",
    usemap: "useMap",
    valign: "vAlign",
    width: "width"
  };

  function nc(a, b, c) {
    var d = arguments,
        e = document,
        f = String(d[0]),
        g = d[1];

    if (!jc && g && (g.name || g.type)) {
      f = ["<", f];
      g.name && f.push(' name="', Rb(g.name), '"');

      if (g.type) {
        f.push(' type="', Rb(g.type), '"');
        var h = {};
        z(h, g);
        delete h.type;
        g = h;
      }

      f.push(">");
      f = f.join("");
    }

    f = oc(e, f);
    g && ("string" === typeof g ? f.className = g : Array.isArray(g) ? f.className = g.join(" ") : lc(f, g));
    2 < d.length && pc(e, f, d);
    return f;
  }

  function pc(a, b, c) {
    function d(h) {
      h && b.appendChild("string" === typeof h ? a.createTextNode(h) : h);
    }

    for (var e = 2; e < c.length; e++) {
      var f = c[e];
      if (!na(f) || m(f) && 0 < f.nodeType) d(f);else {
        a: {
          if (f && "number" == typeof f.length) {
            if (m(f)) {
              var g = "function" == typeof f.item || "string" == typeof f.item;
              break a;
            }

            if (oa(f)) {
              g = "function" == typeof f.item;
              break a;
            }
          }

          g = !1;
        }

        w(g ? Za(f) : f, d);
      }
    }
  }

  function oc(a, b) {
    b = String(b);
    "application/xhtml+xml" === a.contentType && (b = b.toLowerCase());
    return a.createElement(b);
  }

  ;

  function qc(a) {
    l.setTimeout(function () {
      throw a;
    }, 0);
  }

  var rc;

  function sc() {
    var a = l.MessageChannel;
    "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y("Presto") && (a = function a() {
      var e = oc(document, "IFRAME");
      e.style.display = "none";
      document.documentElement.appendChild(e);
      var f = e.contentWindow;
      e = f.document;
      e.open();
      e.close();
      var g = "callImmediate" + Math.random(),
          h = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;
      e = q(function (n) {
        if (("*" == h || n.origin == h) && n.data == g) this.port1.onmessage();
      }, this);
      f.addEventListener("message", e, !1);
      this.port1 = {};
      this.port2 = {
        postMessage: function postMessage() {
          f.postMessage(g, h);
        }
      };
    });

    if ("undefined" !== typeof a && !y("Trident") && !y("MSIE")) {
      var b = new a(),
          c = {},
          d = c;

      b.port1.onmessage = function () {
        if (void 0 !== c.next) {
          c = c.next;
          var e = c.Fb;
          c.Fb = null;
          e();
        }
      };

      return function (e) {
        d.next = {
          Fb: e
        };
        d = d.next;
        b.port2.postMessage(0);
      };
    }

    return function (e) {
      l.setTimeout(e, 0);
    };
  }

  ;

  function tc(a, b) {
    uc || vc();
    wc || (uc(), wc = !0);
    Na.add(a, b);
  }

  var uc;

  function vc() {
    if (l.Promise && l.Promise.resolve) {
      var a = l.Promise.resolve(void 0);

      uc = function uc() {
        a.then(xc);
      };
    } else uc = function uc() {
      var b = xc;
      !oa(l.setImmediate) || l.Window && l.Window.prototype && !y("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (rc || (rc = sc()), rc(b)) : l.setImmediate(b);
    };
  }

  var wc = !1,
      Na = new Ja();

  function xc() {
    for (var a; a = Ma();) {
      try {
        a.a.call(a.b);
      } catch (b) {
        qc(b);
      }

      Ia(La, a);
    }

    wc = !1;
  }

  ;

  function D(a, b) {
    this.a = yc;
    this.h = void 0;
    this.f = this.b = this.c = null;
    this.g = this.i = !1;
    if (a != la) try {
      var c = this;
      a.call(b, function (d) {
        zc(c, Ac, d);
      }, function (d) {
        if (!(d instanceof Bc)) try {
          if (d instanceof Error) throw d;
          throw Error("Promise rejected.");
        } catch (e) {}
        zc(c, Cc, d);
      });
    } catch (d) {
      zc(this, Cc, d);
    }
  }

  var yc = 0,
      Ac = 2,
      Cc = 3;

  function Dc() {
    this.next = this.f = this.b = this.g = this.a = null;
    this.c = !1;
  }

  Dc.prototype.reset = function () {
    this.f = this.b = this.g = this.a = null;
    this.c = !1;
  };

  var Ec = new Ha(function () {
    return new Dc();
  }, function (a) {
    a.reset();
  });

  function Fc(a, b, c) {
    var d = Ec.get();
    d.g = a;
    d.b = b;
    d.f = c;
    return d;
  }

  function E(a) {
    if (a instanceof D) return a;
    var b = new D(la);
    zc(b, Ac, a);
    return b;
  }

  function F(a) {
    return new D(function (b, c) {
      c(a);
    });
  }

  function Gc(a, b, c) {
    Hc(a, b, c, null) || tc(ua(b, a));
  }

  function Ic(a) {
    return new D(function (b, c) {
      var d = a.length,
          e = [];
      if (d) for (var f = function f(p, v) {
        d--;
        e[p] = v;
        0 == d && b(e);
      }, g = function g(p) {
        c(p);
      }, h = 0, n; h < a.length; h++) {
        n = a[h], Gc(n, ua(f, h), g);
      } else b(e);
    });
  }

  function Jc(a) {
    return new D(function (b) {
      var c = a.length,
          d = [];
      if (c) for (var e = function e(h, n, p) {
        c--;
        d[h] = n ? {
          Ob: !0,
          value: p
        } : {
          Ob: !1,
          reason: p
        };
        0 == c && b(d);
      }, f = 0, g; f < a.length; f++) {
        g = a[f], Gc(g, ua(e, f, !0), ua(e, f, !1));
      } else b(d);
    });
  }

  D.prototype.then = function (a, b, c) {
    return Kc(this, oa(a) ? a : null, oa(b) ? b : null, c);
  };

  D.prototype.$goog_Thenable = !0;
  k = D.prototype;

  k.na = function (a, b) {
    a = Fc(a, a, b);
    a.c = !0;
    Lc(this, a);
    return this;
  };

  k.o = function (a, b) {
    return Kc(this, null, a, b);
  };

  k.cancel = function (a) {
    if (this.a == yc) {
      var b = new Bc(a);
      tc(function () {
        Mc(this, b);
      }, this);
    }
  };

  function Mc(a, b) {
    if (a.a == yc) if (a.c) {
      var c = a.c;

      if (c.b) {
        for (var d = 0, e = null, f = null, g = c.b; g && (g.c || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next) {
          e || (f = g);
        }

        e && (c.a == yc && 1 == d ? Mc(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : Nc(c), Oc(c, e, Cc, b)));
      }

      a.c = null;
    } else zc(a, Cc, b);
  }

  function Lc(a, b) {
    a.b || a.a != Ac && a.a != Cc || Pc(a);
    a.f ? a.f.next = b : a.b = b;
    a.f = b;
  }

  function Kc(a, b, c, d) {
    var e = Fc(null, null, null);
    e.a = new D(function (f, g) {
      e.g = b ? function (h) {
        try {
          var n = b.call(d, h);
          f(n);
        } catch (p) {
          g(p);
        }
      } : f;
      e.b = c ? function (h) {
        try {
          var n = c.call(d, h);
          void 0 === n && h instanceof Bc ? g(h) : f(n);
        } catch (p) {
          g(p);
        }
      } : g;
    });
    e.a.c = a;
    Lc(a, e);
    return e.a;
  }

  k.Zc = function (a) {
    this.a = yc;
    zc(this, Ac, a);
  };

  k.$c = function (a) {
    this.a = yc;
    zc(this, Cc, a);
  };

  function zc(a, b, c) {
    a.a == yc && (a === c && (b = Cc, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, Hc(c, a.Zc, a.$c, a) || (a.h = c, a.a = b, a.c = null, Pc(a), b != Cc || c instanceof Bc || Qc(a, c)));
  }

  function Hc(a, b, c, d) {
    if (a instanceof D) return Lc(a, Fc(b || la, c || null, d)), !0;
    if (Ea(a)) return a.then(b, c, d), !0;
    if (m(a)) try {
      var e = a.then;
      if (oa(e)) return Rc(a, e, b, c, d), !0;
    } catch (f) {
      return c.call(d, f), !0;
    }
    return !1;
  }

  function Rc(a, b, c, d, e) {
    function f(n) {
      h || (h = !0, d.call(e, n));
    }

    function g(n) {
      h || (h = !0, c.call(e, n));
    }

    var h = !1;

    try {
      b.call(a, g, f);
    } catch (n) {
      f(n);
    }
  }

  function Pc(a) {
    a.i || (a.i = !0, tc(a.fc, a));
  }

  function Nc(a) {
    var b = null;
    a.b && (b = a.b, a.b = b.next, b.next = null);
    a.b || (a.f = null);
    return b;
  }

  k.fc = function () {
    for (var a; a = Nc(this);) {
      Oc(this, a, this.a, this.h);
    }

    this.i = !1;
  };

  function Oc(a, b, c, d) {
    if (c == Cc && b.b && !b.c) for (; a && a.g; a = a.c) {
      a.g = !1;
    }
    if (b.a) b.a.c = null, Sc(b, c, d);else try {
      b.c ? b.g.call(b.f) : Sc(b, c, d);
    } catch (e) {
      Tc.call(null, e);
    }
    Ia(Ec, b);
  }

  function Sc(a, b, c) {
    b == Ac ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
  }

  function Qc(a, b) {
    a.g = !0;
    tc(function () {
      a.g && Tc.call(null, b);
    });
  }

  var Tc = qc;

  function Bc(a) {
    u.call(this, a);
  }

  r(Bc, u);
  Bc.prototype.name = "cancel";

  function Uc() {
    0 != Vc && (Wc[pa(this)] = this);
    this.xa = this.xa;
    this.oa = this.oa;
  }

  var Vc = 0,
      Wc = {};
  Uc.prototype.xa = !1;

  function Xc(a) {
    if (!a.xa && (a.xa = !0, a.Da(), 0 != Vc)) {
      var b = pa(a);
      if (0 != Vc && a.oa && 0 < a.oa.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
      delete Wc[b];
    }
  }

  Uc.prototype.Da = function () {
    if (this.oa) for (; this.oa.length;) {
      this.oa.shift()();
    }
  };

  var Yc = Object.freeze || function (a) {
    return a;
  };

  var Zc = !Wb || 9 <= Number(ic),
      $c = Wb && !fc("9"),
      ad = function () {
    if (!l.addEventListener || !Object.defineProperty) return !1;
    var a = !1,
        b = Object.defineProperty({}, "passive", {
      get: function get() {
        a = !0;
      }
    });

    try {
      l.addEventListener("test", la, b), l.removeEventListener("test", la, b);
    } catch (c) {}

    return a;
  }();

  function G(a, b) {
    this.type = a;
    this.b = this.target = b;
    this.defaultPrevented = !1;
  }

  G.prototype.preventDefault = function () {
    this.defaultPrevented = !0;
  };

  function bd(a, b) {
    G.call(this, a ? a.type : "");
    this.relatedTarget = this.b = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.pointerId = 0;
    this.pointerType = "";
    this.a = null;

    if (a) {
      var c = this.type = a.type,
          d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      this.target = a.target || a.srcElement;
      this.b = b;

      if (b = a.relatedTarget) {
        if (Zb) {
          a: {
            try {
              Sb(b.nodeName);
              var e = !0;
              break a;
            } catch (f) {}

            e = !1;
          }

          e || (b = null);
        }
      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

      this.relatedTarget = b;
      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
      this.button = a.button;
      this.key = a.key || "";
      this.ctrlKey = a.ctrlKey;
      this.altKey = a.altKey;
      this.shiftKey = a.shiftKey;
      this.metaKey = a.metaKey;
      this.pointerId = a.pointerId || 0;
      this.pointerType = "string" === typeof a.pointerType ? a.pointerType : cd[a.pointerType] || "";
      this.a = a;
      a.defaultPrevented && this.preventDefault();
    }
  }

  r(bd, G);
  var cd = Yc({
    2: "touch",
    3: "pen",
    4: "mouse"
  });

  bd.prototype.preventDefault = function () {
    bd.$a.preventDefault.call(this);
    var a = this.a;
    if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, $c) try {
      if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
    } catch (b) {}
  };

  bd.prototype.g = function () {
    return this.a;
  };

  var dd = "closure_listenable_" + (1E6 * Math.random() | 0),
      ed = 0;

  function fd(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.Ua = e;
    this.key = ++ed;
    this.va = this.Oa = !1;
  }

  function gd(a) {
    a.va = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.Ua = null;
  }

  ;

  function hd(a) {
    this.src = a;
    this.a = {};
    this.b = 0;
  }

  hd.prototype.add = function (a, b, c, d, e) {
    var f = a.toString();
    a = this.a[f];
    a || (a = this.a[f] = [], this.b++);
    var g = id(a, b, d, e);
    -1 < g ? (b = a[g], c || (b.Oa = !1)) : (b = new fd(b, this.src, f, !!d, e), b.Oa = c, a.push(b));
    return b;
  };

  function jd(a, b) {
    var c = b.type;
    c in a.a && Wa(a.a[c], b) && (gd(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
  }

  function id(a, b, c, d) {
    for (var e = 0; e < a.length; ++e) {
      var f = a[e];
      if (!f.va && f.listener == b && f.capture == !!c && f.Ua == d) return e;
    }

    return -1;
  }

  ;
  var kd = "closure_lm_" + (1E6 * Math.random() | 0),
      ld = {},
      md = 0;

  function nd(a, b, c, d, e) {
    if (d && d.once) od(a, b, c, d, e);else if (Array.isArray(b)) for (var f = 0; f < b.length; f++) {
      nd(a, b[f], c, d, e);
    } else c = pd(c), a && a[dd] ? qd(a, b, c, m(d) ? !!d.capture : !!d, e) : rd(a, b, c, !1, d, e);
  }

  function rd(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var g = m(e) ? !!e.capture : !!e,
        h = sd(a);
    h || (a[kd] = h = new hd(a));
    c = h.add(b, c, d, g, f);

    if (!c.proxy) {
      d = td();
      c.proxy = d;
      d.src = a;
      d.listener = c;
      if (a.addEventListener) ad || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(ud(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
      md++;
    }
  }

  function td() {
    var a = vd,
        b = Zc ? function (c) {
      return a.call(b.src, b.listener, c);
    } : function (c) {
      c = a.call(b.src, b.listener, c);
      if (!c) return c;
    };
    return b;
  }

  function od(a, b, c, d, e) {
    if (Array.isArray(b)) for (var f = 0; f < b.length; f++) {
      od(a, b[f], c, d, e);
    } else c = pd(c), a && a[dd] ? wd(a, b, c, m(d) ? !!d.capture : !!d, e) : rd(a, b, c, !0, d, e);
  }

  function H(a, b, c, d, e) {
    if (Array.isArray(b)) for (var f = 0; f < b.length; f++) {
      H(a, b[f], c, d, e);
    } else (d = m(d) ? !!d.capture : !!d, c = pd(c), a && a[dd]) ? (a = a.v, b = String(b).toString(), b in a.a && (f = a.a[b], c = id(f, c, d, e), -1 < c && (gd(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = sd(a)) && (b = a.a[b.toString()], a = -1, b && (a = id(b, c, d, e)), (c = -1 < a ? b[a] : null) && xd(c));
  }

  function xd(a) {
    if ("number" !== typeof a && a && !a.va) {
      var b = a.src;
      if (b && b[dd]) jd(b.v, a);else {
        var c = a.type,
            d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(ud(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        md--;
        (c = sd(b)) ? (jd(c, a), 0 == c.b && (c.src = null, b[kd] = null)) : gd(a);
      }
    }
  }

  function ud(a) {
    return a in ld ? ld[a] : ld[a] = "on" + a;
  }

  function yd(a, b, c, d) {
    var e = !0;
    if (a = sd(a)) if (b = a.a[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
      var f = b[a];
      f && f.capture == c && !f.va && (f = zd(f, d), e = e && !1 !== f);
    }
    return e;
  }

  function zd(a, b) {
    var c = a.listener,
        d = a.Ua || a.src;
    a.Oa && xd(a);
    return c.call(d, b);
  }

  function vd(a, b) {
    if (a.va) return !0;

    if (!Zc) {
      if (!b) a: {
        b = ["window", "event"];

        for (var c = l, d = 0; d < b.length; d++) {
          if (c = c[b[d]], null == c) {
            b = null;
            break a;
          }
        }

        b = c;
      }
      d = b;
      b = new bd(d, this);
      c = !0;

      if (!(0 > d.keyCode || void 0 != d.returnValue)) {
        a: {
          var e = !1;
          if (0 == d.keyCode) try {
            d.keyCode = -1;
            break a;
          } catch (g) {
            e = !0;
          }
          if (e || void 0 == d.returnValue) d.returnValue = !0;
        }

        d = [];

        for (e = b.b; e; e = e.parentNode) {
          d.push(e);
        }

        a = a.type;

        for (e = d.length - 1; 0 <= e; e--) {
          b.b = d[e];
          var f = yd(d[e], a, !0, b);
          c = c && f;
        }

        for (e = 0; e < d.length; e++) {
          b.b = d[e], f = yd(d[e], a, !1, b), c = c && f;
        }
      }

      return c;
    }

    return zd(a, new bd(b, this));
  }

  function sd(a) {
    a = a[kd];
    return a instanceof hd ? a : null;
  }

  var Bd = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

  function pd(a) {
    if (oa(a)) return a;
    a[Bd] || (a[Bd] = function (b) {
      return a.handleEvent(b);
    });
    return a[Bd];
  }

  ;

  function I() {
    Uc.call(this);
    this.v = new hd(this);
    this.$b = this;
    this.fb = null;
  }

  r(I, Uc);
  I.prototype[dd] = !0;

  I.prototype.addEventListener = function (a, b, c, d) {
    nd(this, a, b, c, d);
  };

  I.prototype.removeEventListener = function (a, b, c, d) {
    H(this, a, b, c, d);
  };

  I.prototype.dispatchEvent = function (a) {
    var b,
        c = this.fb;
    if (c) for (b = []; c; c = c.fb) {
      b.push(c);
    }
    c = this.$b;
    var d = a.type || a;
    if ("string" === typeof a) a = new G(a, c);else if (a instanceof G) a.target = a.target || c;else {
      var e = a;
      a = new G(d, c);
      z(a, e);
    }
    e = !0;
    if (b) for (var f = b.length - 1; 0 <= f; f--) {
      var g = a.b = b[f];
      e = Cd(g, d, !0, a) && e;
    }
    g = a.b = c;
    e = Cd(g, d, !0, a) && e;
    e = Cd(g, d, !1, a) && e;
    if (b) for (f = 0; f < b.length; f++) {
      g = a.b = b[f], e = Cd(g, d, !1, a) && e;
    }
    return e;
  };

  I.prototype.Da = function () {
    I.$a.Da.call(this);

    if (this.v) {
      var a = this.v,
          b = 0,
          c;

      for (c in a.a) {
        for (var d = a.a[c], e = 0; e < d.length; e++) {
          ++b, gd(d[e]);
        }

        delete a.a[c];
        a.b--;
      }
    }

    this.fb = null;
  };

  function qd(a, b, c, d, e) {
    a.v.add(String(b), c, !1, d, e);
  }

  function wd(a, b, c, d, e) {
    a.v.add(String(b), c, !0, d, e);
  }

  function Cd(a, b, c, d) {
    b = a.v.a[String(b)];
    if (!b) return !0;
    b = b.concat();

    for (var e = !0, f = 0; f < b.length; ++f) {
      var g = b[f];

      if (g && !g.va && g.capture == c) {
        var h = g.listener,
            n = g.Ua || g.src;
        g.Oa && jd(a.v, g);
        e = !1 !== h.call(n, d) && e;
      }
    }

    return e && !d.defaultPrevented;
  }

  ;

  function Dd(a, b, c) {
    if (oa(a)) c && (a = q(a, c));else if (a && "function" == typeof a.handleEvent) a = q(a.handleEvent, a);else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
  }

  function Ed(a) {
    var b = null;
    return new D(function (c, d) {
      b = Dd(function () {
        c(void 0);
      }, a);
      -1 == b && d(Error("Failed to schedule timer."));
    }).o(function (c) {
      l.clearTimeout(b);
      throw c;
    });
  }

  ;

  function Fd(a) {
    if (a.V && "function" == typeof a.V) return a.V();
    if ("string" === typeof a) return a.split("");

    if (na(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++) {
        b.push(a[d]);
      }

      return b;
    }

    b = [];
    c = 0;

    for (d in a) {
      b[c++] = a[d];
    }

    return b;
  }

  function Gd(a) {
    if (a.Y && "function" == typeof a.Y) return a.Y();

    if (!a.V || "function" != typeof a.V) {
      if (na(a) || "string" === typeof a) {
        var b = [];
        a = a.length;

        for (var c = 0; c < a; c++) {
          b.push(c);
        }

        return b;
      }

      b = [];
      c = 0;

      for (var d in a) {
        b[c++] = d;
      }

      return b;
    }
  }

  function Hd(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (na(a) || "string" === typeof a) w(a, b, void 0);else for (var c = Gd(a), d = Fd(a), e = d.length, f = 0; f < e; f++) {
      b.call(void 0, d[f], c && c[f], a);
    }
  }

  ;

  function Id(a, b) {
    this.b = {};
    this.a = [];
    this.c = 0;
    var c = arguments.length;

    if (1 < c) {
      if (c % 2) throw Error("Uneven number of arguments");

      for (var d = 0; d < c; d += 2) {
        this.set(arguments[d], arguments[d + 1]);
      }
    } else if (a) if (a instanceof Id) for (c = a.Y(), d = 0; d < c.length; d++) {
      this.set(c[d], a.get(c[d]));
    } else for (d in a) {
      this.set(d, a[d]);
    }
  }

  k = Id.prototype;

  k.V = function () {
    Jd(this);

    for (var a = [], b = 0; b < this.a.length; b++) {
      a.push(this.b[this.a[b]]);
    }

    return a;
  };

  k.Y = function () {
    Jd(this);
    return this.a.concat();
  };

  k.clear = function () {
    this.b = {};
    this.c = this.a.length = 0;
  };

  function Jd(a) {
    if (a.c != a.a.length) {
      for (var b = 0, c = 0; b < a.a.length;) {
        var d = a.a[b];
        Kd(a.b, d) && (a.a[c++] = d);
        b++;
      }

      a.a.length = c;
    }

    if (a.c != a.a.length) {
      var e = {};

      for (c = b = 0; b < a.a.length;) {
        d = a.a[b], Kd(e, d) || (a.a[c++] = d, e[d] = 1), b++;
      }

      a.a.length = c;
    }
  }

  k.get = function (a, b) {
    return Kd(this.b, a) ? this.b[a] : b;
  };

  k.set = function (a, b) {
    Kd(this.b, a) || (this.c++, this.a.push(a));
    this.b[a] = b;
  };

  k.forEach = function (a, b) {
    for (var c = this.Y(), d = 0; d < c.length; d++) {
      var e = c[d],
          f = this.get(e);
      a.call(b, f, e, this);
    }
  };

  function Kd(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }

  ;
  var Ld = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

  function Md(a, b) {
    if (a) {
      a = a.split("&");

      for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="),
            e = null;

        if (0 <= d) {
          var f = a[c].substring(0, d);
          e = a[c].substring(d + 1);
        } else f = a[c];

        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
    }
  }

  ;

  function Nd(a, b) {
    this.a = this.l = this.f = "";
    this.g = null;
    this.i = this.c = "";
    this.h = !1;
    var c;
    a instanceof Nd ? (this.h = void 0 !== b ? b : a.h, Od(this, a.f), this.l = a.l, this.a = a.a, Pd(this, a.g), this.c = a.c, Qd(this, Rd(a.b)), this.i = a.i) : a && (c = String(a).match(Ld)) ? (this.h = !!b, Od(this, c[1] || "", !0), this.l = Sd(c[2] || ""), this.a = Sd(c[3] || "", !0), Pd(this, c[4]), this.c = Sd(c[5] || "", !0), Qd(this, c[6] || "", !0), this.i = Sd(c[7] || "")) : (this.h = !!b, this.b = new Td(null, this.h));
  }

  Nd.prototype.toString = function () {
    var a = [],
        b = this.f;
    b && a.push(Ud(b, Vd, !0), ":");
    var c = this.a;
    if (c || "file" == b) a.push("//"), (b = this.l) && a.push(Ud(b, Vd, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.g, null != c && a.push(":", String(c));
    if (c = this.c) this.a && "/" != c.charAt(0) && a.push("/"), a.push(Ud(c, "/" == c.charAt(0) ? Wd : Xd, !0));
    (c = this.b.toString()) && a.push("?", c);
    (c = this.i) && a.push("#", Ud(c, Yd));
    return a.join("");
  };

  Nd.prototype.resolve = function (a) {
    var b = new Nd(this),
        c = !!a.f;
    c ? Od(b, a.f) : c = !!a.l;
    c ? b.l = a.l : c = !!a.a;
    c ? b.a = a.a : c = null != a.g;
    var d = a.c;
    if (c) Pd(b, a.g);else if (c = !!a.c) {
      if ("/" != d.charAt(0)) if (this.a && !this.c) d = "/" + d;else {
        var e = b.c.lastIndexOf("/");
        -1 != e && (d = b.c.substr(0, e + 1) + d);
      }
      e = d;
      if (".." == e || "." == e) d = "";else if (x(e, "./") || x(e, "/.")) {
        d = 0 == e.lastIndexOf("/", 0);
        e = e.split("/");

        for (var f = [], g = 0; g < e.length;) {
          var h = e[g++];
          "." == h ? d && g == e.length && f.push("") : ".." == h ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(h), d = !0);
        }

        d = f.join("/");
      } else d = e;
    }
    c ? b.c = d : c = "" !== a.b.toString();
    c ? Qd(b, Rd(a.b)) : c = !!a.i;
    c && (b.i = a.i);
    return b;
  };

  function Od(a, b, c) {
    a.f = c ? Sd(b, !0) : b;
    a.f && (a.f = a.f.replace(/:$/, ""));
  }

  function Pd(a, b) {
    if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
      a.g = b;
    } else a.g = null;
  }

  function Qd(a, b, c) {
    b instanceof Td ? (a.b = b, Zd(a.b, a.h)) : (c || (b = Ud(b, $d)), a.b = new Td(b, a.h));
  }

  function J(a, b, c) {
    a.b.set(b, c);
  }

  function ae(a, b) {
    return a.b.get(b);
  }

  function be(a) {
    return a instanceof Nd ? new Nd(a) : new Nd(a, void 0);
  }

  function ce(a, b, c, d) {
    var e = new Nd(null, void 0);
    a && Od(e, a);
    b && (e.a = b);
    c && Pd(e, c);
    d && (e.c = d);
    return e;
  }

  function Sd(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }

  function Ud(a, b, c) {
    return "string" === typeof a ? (a = encodeURI(a).replace(b, de), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }

  function de(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }

  var Vd = /[#\/\?@]/g,
      Xd = /[#\?:]/g,
      Wd = /[#\?]/g,
      $d = /[#\?@]/g,
      Yd = /#/g;

  function Td(a, b) {
    this.b = this.a = null;
    this.c = a || null;
    this.f = !!b;
  }

  function ee(a) {
    a.a || (a.a = new Id(), a.b = 0, a.c && Md(a.c, function (b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
  }

  function fe(a) {
    var b = Gd(a);
    if ("undefined" == typeof b) throw Error("Keys are undefined");
    var c = new Td(null, void 0);
    a = Fd(a);

    for (var d = 0; d < b.length; d++) {
      var e = b[d],
          f = a[d];
      Array.isArray(f) ? ge(c, e, f) : c.add(e, f);
    }

    return c;
  }

  k = Td.prototype;

  k.add = function (a, b) {
    ee(this);
    this.c = null;
    a = he(this, a);
    var c = this.a.get(a);
    c || this.a.set(a, c = []);
    c.push(b);
    this.b += 1;
    return this;
  };

  function ie(a, b) {
    ee(a);
    b = he(a, b);
    Kd(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Kd(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Jd(a)));
  }

  k.clear = function () {
    this.a = this.c = null;
    this.b = 0;
  };

  function je(a, b) {
    ee(a);
    b = he(a, b);
    return Kd(a.a.b, b);
  }

  k.forEach = function (a, b) {
    ee(this);
    this.a.forEach(function (c, d) {
      w(c, function (e) {
        a.call(b, e, d, this);
      }, this);
    }, this);
  };

  k.Y = function () {
    ee(this);

    for (var a = this.a.V(), b = this.a.Y(), c = [], d = 0; d < b.length; d++) {
      for (var e = a[d], f = 0; f < e.length; f++) {
        c.push(b[d]);
      }
    }

    return c;
  };

  k.V = function (a) {
    ee(this);
    var b = [];
    if ("string" === typeof a) je(this, a) && (b = Ya(b, this.a.get(he(this, a))));else {
      a = this.a.V();

      for (var c = 0; c < a.length; c++) {
        b = Ya(b, a[c]);
      }
    }
    return b;
  };

  k.set = function (a, b) {
    ee(this);
    this.c = null;
    a = he(this, a);
    je(this, a) && (this.b -= this.a.get(a).length);
    this.a.set(a, [b]);
    this.b += 1;
    return this;
  };

  k.get = function (a, b) {
    if (!a) return b;
    a = this.V(a);
    return 0 < a.length ? String(a[0]) : b;
  };

  function ge(a, b, c) {
    ie(a, b);
    0 < c.length && (a.c = null, a.a.set(he(a, b), Za(c)), a.b += c.length);
  }

  k.toString = function () {
    if (this.c) return this.c;
    if (!this.a) return "";

    for (var a = [], b = this.a.Y(), c = 0; c < b.length; c++) {
      var d = b[c],
          e = encodeURIComponent(String(d));
      d = this.V(d);

      for (var f = 0; f < d.length; f++) {
        var g = e;
        "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
        a.push(g);
      }
    }

    return this.c = a.join("&");
  };

  function Rd(a) {
    var b = new Td();
    b.c = a.c;
    a.a && (b.a = new Id(a.a), b.b = a.b);
    return b;
  }

  function he(a, b) {
    b = String(b);
    a.f && (b = b.toLowerCase());
    return b;
  }

  function Zd(a, b) {
    b && !a.f && (ee(a), a.c = null, a.a.forEach(function (c, d) {
      var e = d.toLowerCase();
      d != e && (ie(this, d), ge(this, e, c));
    }, a));
    a.f = b;
  }

  ;

  function ke(a) {
    var b = [];
    le(new me(), a, b);
    return b.join("");
  }

  function me() {}

  function le(a, b, c) {
    if (null == b) c.push("null");else {
      if ("object" == _typeof(b)) {
        if (Array.isArray(b)) {
          var d = b;
          b = d.length;
          c.push("[");

          for (var e = "", f = 0; f < b; f++) {
            c.push(e), le(a, d[f], c), e = ",";
          }

          c.push("]");
          return;
        }

        if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {
          c.push("{");
          e = "";

          for (d in b) {
            Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), ne(d, c), c.push(":"), le(a, f, c), e = ","));
          }

          c.push("}");
          return;
        }
      }

      switch (_typeof(b)) {
        case "string":
          ne(b, c);
          break;

        case "number":
          c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
          break;

        case "boolean":
          c.push(String(b));
          break;

        case "function":
          c.push("null");
          break;

        default:
          throw Error("Unknown type: " + _typeof(b));
      }
    }
  }

  var oe = {
    '"': '\\"',
    "\\": "\\\\",
    "/": "\\/",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\x0B": "\\u000b"
  },
      pe = /\uffff/.test("\uFFFF") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;

  function ne(a, b) {
    b.push('"', a.replace(pe, function (c) {
      var d = oe[c];
      d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), oe[c] = d);
      return d;
    }), '"');
  }

  ;

  function qe() {
    var a = K();
    return Wb && !!ic && 11 == ic || /Edge\/\d+/.test(a);
  }

  function re() {
    return l.window && l.window.location.href || self && self.location && self.location.href || "";
  }

  function se(a, b) {
    b = b || l.window;
    var c = "about:blank";
    a && (c = Eb(Ib(a) || Kb));
    b.location.href = c;
  }

  function te(a, b) {
    var c = [],
        d;

    for (d in a) {
      d in b ? _typeof(a[d]) != _typeof(b[d]) ? c.push(d) : "object" == _typeof(a[d]) && null != a[d] && null != b[d] ? 0 < te(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);
    }

    for (d in b) {
      d in a || c.push(d);
    }

    return c;
  }

  function ue() {
    var a = K();
    a = ve(a) != we ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
    return a && 30 > a ? !1 : !Wb || !ic || 9 < ic;
  }

  function xe(a) {
    a = (a || K()).toLowerCase();
    return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
  }

  function ye(a) {
    a = a || l.window;

    try {
      a.close();
    } catch (b) {}
  }

  function ze(a, b, c) {
    var d = Math.floor(1E9 * Math.random()).toString();
    b = b || 500;
    c = c || 600;
    var e = (window.screen.availHeight - c) / 2,
        f = (window.screen.availWidth - b) / 2;
    b = {
      width: b,
      height: c,
      top: 0 < e ? e : 0,
      left: 0 < f ? f : 0,
      location: !0,
      resizable: !0,
      statusbar: !0,
      toolbar: !1
    };
    c = K().toLowerCase();
    d && (b.target = d, x(c, "crios/") && (b.target = "_blank"));
    ve(K()) == Ae && (a = a || "http://localhost", b.scrollbars = !0);
    c = a || "";
    (a = b) || (a = {});
    d = window;
    b = c instanceof C ? c : Ib("undefined" != typeof c.href ? c.href : String(c)) || Kb;
    c = a.target || c.target;
    e = [];

    for (g in a) {
      switch (g) {
        case "width":
        case "height":
        case "top":
        case "left":
          e.push(g + "=" + a[g]);
          break;

        case "target":
        case "noopener":
        case "noreferrer":
          break;

        default:
          e.push(g + "=" + (a[g] ? 1 : 0));
      }
    }

    var g = e.join(",");
    if ((y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c) g = oc(document, "A"), pb(g, "HTMLAnchorElement"), b = b instanceof C ? b : Jb(b), g.href = Eb(b), g.setAttribute("target", c), a.noreferrer && g.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", !0, !0, d, 1), g.dispatchEvent(a), g = {};else if (a.noreferrer) {
      if (g = Pb("", d, c, g), a = Eb(b), g && (Yb && x(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), g.opener = null, a = '<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + Rb(a) + '">', a = (d = vb()) ? d.createHTML(a) : a, a = new Lb(a, null, Mb), d = g.document)) d.write(Nb(a)), d.close();
    } else (g = Pb(b, d, c, g)) && a.noopener && (g.opener = null);
    if (g) try {
      g.focus();
    } catch (h) {}
    return g;
  }

  function Be(a) {
    return new D(function (b) {
      function c() {
        Ed(2E3).then(function () {
          if (!a || a.closed) b();else return c();
        });
      }

      return c();
    });
  }

  var Ce = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
      De = /^[^@]+@[^@]+$/;

  function Ee() {
    var a = null;
    return new D(function (b) {
      "complete" == l.document.readyState ? b() : (a = function a() {
        b();
      }, od(window, "load", a));
    }).o(function (b) {
      H(window, "load", a);
      throw b;
    });
  }

  function Fe() {
    return Ge(void 0) ? Ee().then(function () {
      return new D(function (a, b) {
        var c = l.document,
            d = setTimeout(function () {
          b(Error("Cordova framework is not ready."));
        }, 1E3);
        c.addEventListener("deviceready", function () {
          clearTimeout(d);
          a();
        }, !1);
      });
    }) : F(Error("Cordova must run in an Android or iOS file scheme."));
  }

  function Ge(a) {
    a = a || K();
    return !("file:" !== He() && "ionic:" !== He() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
  }

  function Ie() {
    var a = l.window;

    try {
      return !(!a || a == a.top);
    } catch (b) {
      return !1;
    }
  }

  function Je() {
    return "undefined" !== typeof l.WorkerGlobalScope && "function" === typeof l.importScripts;
  }

  function Ke() {
    return _app["default"].INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : _app["default"].INTERNAL.hasOwnProperty("node") ? "Node" : Je() ? "Worker" : "Browser";
  }

  function Le() {
    var a = Ke();
    return "ReactNative" === a || "Node" === a;
  }

  function Me() {
    for (var a = 50, b = []; 0 < a;) {
      b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
    }

    return b.join("");
  }

  var Ae = "Firefox",
      we = "Chrome";

  function ve(a) {
    var b = a.toLowerCase();
    if (x(b, "opera/") || x(b, "opr/") || x(b, "opios/")) return "Opera";
    if (x(b, "iemobile")) return "IEMobile";
    if (x(b, "msie") || x(b, "trident/")) return "IE";
    if (x(b, "edge/")) return "Edge";
    if (x(b, "firefox/")) return Ae;
    if (x(b, "silk/")) return "Silk";
    if (x(b, "blackberry")) return "Blackberry";
    if (x(b, "webos")) return "Webos";
    if (!x(b, "safari/") || x(b, "chrome/") || x(b, "crios/") || x(b, "android")) {
      if (!x(b, "chrome/") && !x(b, "crios/") || x(b, "edge/")) {
        if (x(b, "android")) return "Android";
        if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
      } else return we;
    } else return "Safari";
    return "Other";
  }

  var Ne = {
    ld: "FirebaseCore-web",
    nd: "FirebaseUI-web"
  };

  function Oe(a, b) {
    b = b || [];
    var c = [],
        d = {},
        e;

    for (e in Ne) {
      d[Ne[e]] = !0;
    }

    for (e = 0; e < b.length; e++) {
      "undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));
    }

    c.sort();
    b = c;
    b.length || (b = ["FirebaseCore-web"]);
    c = Ke();
    "Browser" === c ? (d = K(), c = ve(d)) : "Worker" === c && (d = K(), c = ve(d) + "-" + c);
    return c + "/JsCore/" + a + "/" + b.join(",");
  }

  function K() {
    return l.navigator && l.navigator.userAgent || "";
  }

  function L(a, b) {
    a = a.split(".");
    b = b || l;

    for (var c = 0; c < a.length && "object" == _typeof(b) && null != b; c++) {
      b = b[a[c]];
    }

    c != a.length && (b = void 0);
    return b;
  }

  function Pe() {
    try {
      var a = l.localStorage,
          b = Qe();
      if (a) return a.setItem(b, "1"), a.removeItem(b), qe() ? !!l.indexedDB : !0;
    } catch (c) {
      return Je() && !!l.indexedDB;
    }

    return !1;
  }

  function Re() {
    return (Se() || "chrome-extension:" === He() || Ge()) && !Le() && Pe() && !Je();
  }

  function Se() {
    return "http:" === He() || "https:" === He();
  }

  function He() {
    return l.location && l.location.protocol || null;
  }

  function Te(a) {
    a = a || K();
    return xe(a) || ve(a) == Ae ? !1 : !0;
  }

  function Ue(a) {
    return "undefined" === typeof a ? null : ke(a);
  }

  function Ve(a) {
    var b = {},
        c;

    for (c in a) {
      a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);
    }

    return b;
  }

  function We(a) {
    if (null !== a) return JSON.parse(a);
  }

  function Qe(a) {
    return a ? a : Math.floor(1E9 * Math.random()).toString();
  }

  function Xe(a) {
    a = a || K();
    return "Safari" == ve(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
  }

  function Ye() {
    var a = l.___jsl;
    if (a && a.H) for (var b in a.H) {
      if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) {
        a.CP[c] = null;
      }
    }
  }

  function Ze(a, b) {
    if (a > b) throw Error("Short delay should be less than long delay!");
    this.a = a;
    this.c = b;
    a = K();
    b = Ke();
    this.b = xe(a) || "ReactNative" === b;
  }

  Ze.prototype.get = function () {
    var a = l.navigator;
    return (a && "boolean" === typeof a.onLine && (Se() || "chrome-extension:" === He() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5E3, this.a);
  };

  function $e() {
    var a = l.document;
    return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;
  }

  function af() {
    var a = l.document,
        _b = null;
    return $e() || !a ? E() : new D(function (c) {
      _b = function b() {
        $e() && (a.removeEventListener("visibilitychange", _b, !1), c());
      };

      a.addEventListener("visibilitychange", _b, !1);
    }).o(function (c) {
      a.removeEventListener("visibilitychange", _b, !1);
      throw c;
    });
  }

  function bf(a) {
    try {
      var b = new Date(parseInt(a, 10));
      if (!isNaN(b.getTime()) && !/[^0-9]/.test(a)) return b.toUTCString();
    } catch (c) {}

    return null;
  }

  function cf() {
    return !(!L("fireauth.oauthhelper", l) && !L("fireauth.iframe", l));
  }

  function df() {
    var a = l.navigator;
    return a && a.serviceWorker && a.serviceWorker.controller || null;
  }

  function ef() {
    var a = l.navigator;
    return a && a.serviceWorker ? E().then(function () {
      return a.serviceWorker.ready;
    }).then(function (b) {
      return b.active || null;
    }).o(function () {
      return null;
    }) : E(null);
  }

  ;
  var ff = {};

  function gf(a) {
    ff[a] || (ff[a] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
  }

  ;
  var hf;

  try {
    var jf = {};
    Object.defineProperty(jf, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 1
    });
    Object.defineProperty(jf, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 2
    });
    hf = 2 == jf.abcd;
  } catch (a) {
    hf = !1;
  }

  function M(a, b, c) {
    hf ? Object.defineProperty(a, b, {
      configurable: !0,
      enumerable: !0,
      value: c
    }) : a[b] = c;
  }

  function N(a, b) {
    if (b) for (var c in b) {
      b.hasOwnProperty(c) && M(a, c, b[c]);
    }
  }

  function kf(a) {
    var b = {};
    N(b, a);
    return b;
  }

  function lf(a) {
    var b = {},
        c;

    for (c in a) {
      a.hasOwnProperty(c) && (b[c] = a[c]);
    }

    return b;
  }

  function mf(a, b) {
    if (!b || !b.length) return !0;
    if (!a) return !1;

    for (var c = 0; c < b.length; c++) {
      var d = a[b[c]];
      if (void 0 === d || null === d || "" === d) return !1;
    }

    return !0;
  }

  function nf(a) {
    var b = a;

    if ("object" == _typeof(a) && null != a) {
      b = "length" in a ? [] : {};

      for (var c in a) {
        M(b, c, nf(a[c]));
      }
    }

    return b;
  }

  ;
  /*
  Copyright 2019 Google Inc.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function of(a) {
    var b = a && (a[pf] ? "phone" : null);

    if (b && a && a[qf]) {
      M(this, "uid", a[qf]);
      M(this, "displayName", a[rf] || null);
      var c = null;
      a[sf] && (c = new Date(a[sf]).toUTCString());
      M(this, "enrollmentTime", c);
      M(this, "factorId", b);
    } else throw new t("internal-error", "Internal assert: invalid MultiFactorInfo object");
  }

  of.prototype.w = function () {
    return {
      uid: this.uid,
      displayName: this.displayName,
      factorId: this.factorId,
      enrollmentTime: this.enrollmentTime
    };
  };

  function tf(a) {
    try {
      var b = new uf(a);
    } catch (c) {
      b = null;
    }

    return b;
  }

  var rf = "displayName",
      sf = "enrolledAt",
      qf = "mfaEnrollmentId",
      pf = "phoneInfo";

  function uf(a) {
    of.call(this, a);
    M(this, "phoneNumber", a[pf]);
  }

  r(uf, of);

  uf.prototype.w = function () {
    var a = uf.$a.w.call(this);
    a.phoneNumber = this.phoneNumber;
    return a;
  };

  function vf(a) {
    var b = {},
        c = a[wf],
        d = a[xf],
        e = a[yf];
    a = tf(a[zf]);
    if (!e || e != Af && e != Bf && !c || e == Bf && !d || e == Cf && !a) throw Error("Invalid checkActionCode response!");
    e == Bf ? (b[Df] = c || null, b[Ef] = c || null, b[Ff] = d) : (b[Df] = d || null, b[Ef] = d || null, b[Ff] = c || null);
    b[Gf] = a || null;
    M(this, Hf, e);
    M(this, If, nf(b));
  }

  var Cf = "REVERT_SECOND_FACTOR_ADDITION",
      Af = "EMAIL_SIGNIN",
      Bf = "VERIFY_AND_CHANGE_EMAIL",
      wf = "email",
      zf = "mfaInfo",
      xf = "newEmail",
      yf = "requestType",
      Ff = "email",
      Df = "fromEmail",
      Gf = "multiFactorInfo",
      Ef = "previousEmail",
      If = "data",
      Hf = "operation";

  function Jf(a) {
    a = be(a);
    var b = ae(a, Kf) || null,
        c = ae(a, Lf) || null,
        d = ae(a, Mf) || null;
    d = d ? Nf[d] || null : null;
    if (!b || !c || !d) throw new t("argument-error", Kf + ", " + Lf + "and " + Mf + " are required in a valid action code URL.");
    N(this, {
      apiKey: b,
      operation: d,
      code: c,
      continueUrl: ae(a, Of) || null,
      languageCode: ae(a, Pf) || null,
      tenantId: ae(a, Qf) || null
    });
  }

  var Kf = "apiKey",
      Lf = "oobCode",
      Of = "continueUrl",
      Pf = "languageCode",
      Mf = "mode",
      Qf = "tenantId",
      Nf = {
    recoverEmail: "RECOVER_EMAIL",
    resetPassword: "PASSWORD_RESET",
    revertSecondFactorAddition: Cf,
    signIn: Af,
    verifyAndChangeEmail: Bf,
    verifyEmail: "VERIFY_EMAIL"
  };

  function Rf(a) {
    try {
      return new Jf(a);
    } catch (b) {
      return null;
    }
  }

  ;

  function Sf(a) {
    var b = a[Tf];
    if ("undefined" === typeof b) throw new t("missing-continue-uri");
    if ("string" !== typeof b || "string" === typeof b && !b.length) throw new t("invalid-continue-uri");
    this.i = b;
    this.b = this.a = null;
    this.g = !1;
    var c = a[Uf];

    if (c && "object" === _typeof(c)) {
      b = c[Vf];
      var d = c[Wf];
      c = c[Xf];

      if ("string" === typeof b && b.length) {
        this.a = b;
        if ("undefined" !== typeof d && "boolean" !== typeof d) throw new t("argument-error", Wf + " property must be a boolean when specified.");
        this.g = !!d;
        if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new t("argument-error", Xf + " property must be a non empty string when specified.");
        this.b = c || null;
      } else {
        if ("undefined" !== typeof b) throw new t("argument-error", Vf + " property must be a non empty string when specified.");
        if ("undefined" !== typeof d || "undefined" !== typeof c) throw new t("missing-android-pkg-name");
      }
    } else if ("undefined" !== typeof c) throw new t("argument-error", Uf + " property must be a non null object when specified.");

    this.f = null;
    if ((b = a[Yf]) && "object" === _typeof(b)) {
      if (b = b[Zf], "string" === typeof b && b.length) this.f = b;else {
        if ("undefined" !== typeof b) throw new t("argument-error", Zf + " property must be a non empty string when specified.");
      }
    } else if ("undefined" !== typeof b) throw new t("argument-error", Yf + " property must be a non null object when specified.");
    b = a[$f];
    if ("undefined" !== typeof b && "boolean" !== typeof b) throw new t("argument-error", $f + " property must be a boolean when specified.");
    this.c = !!b;
    a = a[ag];
    if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length)) throw new t("argument-error", ag + " property must be a non empty string when specified.");
    this.h = a || null;
  }

  var Uf = "android",
      ag = "dynamicLinkDomain",
      $f = "handleCodeInApp",
      Yf = "iOS",
      Tf = "url",
      Wf = "installApp",
      Xf = "minimumVersion",
      Vf = "packageName",
      Zf = "bundleId";

  function bg(a) {
    var b = {};
    b.continueUrl = a.i;
    b.canHandleCodeInApp = a.c;
    if (b.androidPackageName = a.a) b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;
    b.iOSBundleId = a.f;
    b.dynamicLinkDomain = a.h;

    for (var c in b) {
      null === b[c] && delete b[c];
    }

    return b;
  }

  ;

  function cg(a) {
    return Ra(a, function (b) {
      b = b.toString(16);
      return 1 < b.length ? b : "0" + b;
    }).join("");
  }

  ;
  var dg = null;

  function eg(a) {
    var b = "";
    fg(a, function (c) {
      b += String.fromCharCode(c);
    });
    return b;
  }

  function fg(a, b) {
    function c(n) {
      for (; d < a.length;) {
        var p = a.charAt(d++),
            v = dg[p];
        if (null != v) return v;
        if (!/^[\s\xa0]*$/.test(p)) throw Error("Unknown base64 encoding at char: " + p);
      }

      return n;
    }

    gg();

    for (var d = 0;;) {
      var e = c(-1),
          f = c(0),
          g = c(64),
          h = c(64);
      if (64 === h && -1 === e) break;
      b(e << 2 | f >> 4);
      64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
    }
  }

  function gg() {
    if (!dg) {
      dg = {};

      for (var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = ["+/=", "+/", "-_=", "-_.", "-_"], c = 0; 5 > c; c++) {
        for (var d = a.concat(b[c].split("")), e = 0; e < d.length; e++) {
          var f = d[e];
          void 0 === dg[f] && (dg[f] = e);
        }
      }
    }
  }

  ;

  function hg(a) {
    var b = ig(a);
    if (!(b && b.sub && b.iss && b.aud && b.exp)) throw Error("Invalid JWT");
    this.i = a;
    this.a = b.exp;
    this.h = b.sub;
    a = Date.now() / 1E3;
    this.g = b.iat || (a > this.a ? this.a : a);
    this.b = b.provider_id || b.firebase && b.firebase.sign_in_provider || null;
    this.f = b.firebase && b.firebase.tenant || null;
    this.c = !!b.is_anonymous || "anonymous" == this.b;
  }

  hg.prototype.S = function () {
    return this.f;
  };

  hg.prototype.l = function () {
    return this.c;
  };

  hg.prototype.toString = function () {
    return this.i;
  };

  function jg(a) {
    try {
      return new hg(a);
    } catch (b) {
      return null;
    }
  }

  function ig(a) {
    if (!a) return null;
    a = a.split(".");
    if (3 != a.length) return null;
    a = a[1];

    for (var b = (4 - a.length % 4) % 4, c = 0; c < b; c++) {
      a += ".";
    }

    try {
      return JSON.parse(eg(a));
    } catch (d) {}

    return null;
  }

  ;
  var kg = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),
      lg = ["client_id", "response_type", "scope", "redirect_uri", "state"],
      mg = {
    md: {
      Ja: "locale",
      ua: 700,
      ta: 600,
      fa: "facebook.com",
      Wa: lg
    },
    od: {
      Ja: null,
      ua: 500,
      ta: 750,
      fa: "github.com",
      Wa: lg
    },
    pd: {
      Ja: "hl",
      ua: 515,
      ta: 680,
      fa: "google.com",
      Wa: lg
    },
    vd: {
      Ja: "lang",
      ua: 485,
      ta: 705,
      fa: "twitter.com",
      Wa: kg
    },
    jd: {
      Ja: "locale",
      ua: 640,
      ta: 600,
      fa: "apple.com",
      Wa: []
    }
  };

  function ng(a) {
    for (var b in mg) {
      if (mg[b].fa == a) return mg[b];
    }

    return null;
  }

  ;

  function og(a) {
    var b = {};
    b["facebook.com"] = pg;
    b["google.com"] = qg;
    b["github.com"] = rg;
    b["twitter.com"] = sg;
    var c = a && a[tg];

    try {
      if (c) return b[c] ? new b[c](a) : new ug(a);
      if ("undefined" !== typeof a[vg]) return new wg(a);
    } catch (d) {}

    return null;
  }

  var vg = "idToken",
      tg = "providerId";

  function wg(a) {
    var b = a[tg];

    if (!b && a[vg]) {
      var c = jg(a[vg]);
      c && c.b && (b = c.b);
    }

    if (!b) throw Error("Invalid additional user info!");
    if ("anonymous" == b || "custom" == b) b = null;
    c = !1;
    "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = !0);
    M(this, "providerId", b);
    M(this, "isNewUser", c);
  }

  function ug(a) {
    wg.call(this, a);
    a = We(a.rawUserInfo || "{}");
    M(this, "profile", nf(a || {}));
  }

  r(ug, wg);

  function pg(a) {
    ug.call(this, a);
    if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");
  }

  r(pg, ug);

  function rg(a) {
    ug.call(this, a);
    if ("github.com" != this.providerId) throw Error("Invalid provider ID!");
    M(this, "username", this.profile && this.profile.login || null);
  }

  r(rg, ug);

  function qg(a) {
    ug.call(this, a);
    if ("google.com" != this.providerId) throw Error("Invalid provider ID!");
  }

  r(qg, ug);

  function sg(a) {
    ug.call(this, a);
    if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");
    M(this, "username", a.screenName || null);
  }

  r(sg, ug);

  function xg(a) {
    var b = be(a),
        c = ae(b, "link"),
        d = ae(be(c), "link");
    b = ae(b, "deep_link_id");
    return ae(be(b), "link") || b || d || c || a;
  }

  ;

  function yg(a, b) {
    if (!a && !b) throw new t("internal-error", "Internal assert: no raw session string available");
    if (a && b) throw new t("internal-error", "Internal assert: unable to determine the session type");
    this.a = a || null;
    this.b = b || null;
    this.type = this.a ? zg : Ag;
  }

  var zg = "enroll",
      Ag = "signin";

  yg.prototype.Ha = function () {
    return this.a ? E(this.a) : E(this.b);
  };

  yg.prototype.w = function () {
    return this.type == zg ? {
      multiFactorSession: {
        idToken: this.a
      }
    } : {
      multiFactorSession: {
        pendingCredential: this.b
      }
    };
  };

  function Bg() {}

  Bg.prototype.ja = function () {};

  Bg.prototype.b = function () {};

  Bg.prototype.c = function () {};

  Bg.prototype.w = function () {};

  function Cg(a, b) {
    return a.then(function (c) {
      if (c[Dg]) {
        var d = jg(c[Dg]);
        if (!d || b != d.h) throw new t("user-mismatch");
        return c;
      }

      throw new t("user-mismatch");
    }).o(function (c) {
      throw c && c.code && c.code == ya + "user-not-found" ? new t("user-mismatch") : c;
    });
  }

  function Eg(a, b) {
    if (b) this.a = b;else throw new t("internal-error", "failed to construct a credential");
    M(this, "providerId", a);
    M(this, "signInMethod", a);
  }

  Eg.prototype.ja = function (a) {
    return Fg(a, Gg(this));
  };

  Eg.prototype.b = function (a, b) {
    var c = Gg(this);
    c.idToken = b;
    return Hg(a, c);
  };

  Eg.prototype.c = function (a, b) {
    return Cg(Ig(a, Gg(this)), b);
  };

  function Gg(a) {
    return {
      pendingToken: a.a,
      requestUri: "http://localhost"
    };
  }

  Eg.prototype.w = function () {
    return {
      providerId: this.providerId,
      signInMethod: this.signInMethod,
      pendingToken: this.a
    };
  };

  function Jg(a) {
    if (a && a.providerId && a.signInMethod && 0 == a.providerId.indexOf("saml.") && a.pendingToken) try {
      return new Eg(a.providerId, a.pendingToken);
    } catch (b) {}
    return null;
  }

  function Kg(a, b, c) {
    this.a = null;
    if (b.idToken || b.accessToken) b.idToken && M(this, "idToken", b.idToken), b.accessToken && M(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && M(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken);else if (b.oauthToken && b.oauthTokenSecret) M(this, "accessToken", b.oauthToken), M(this, "secret", b.oauthTokenSecret);else throw new t("internal-error", "failed to construct a credential");
    M(this, "providerId", a);
    M(this, "signInMethod", c);
  }

  Kg.prototype.ja = function (a) {
    return Fg(a, Lg(this));
  };

  Kg.prototype.b = function (a, b) {
    var c = Lg(this);
    c.idToken = b;
    return Hg(a, c);
  };

  Kg.prototype.c = function (a, b) {
    var c = Lg(this);
    return Cg(Ig(a, c), b);
  };

  function Lg(a) {
    var b = {};
    a.idToken && (b.id_token = a.idToken);
    a.accessToken && (b.access_token = a.accessToken);
    a.secret && (b.oauth_token_secret = a.secret);
    b.providerId = a.providerId;
    a.nonce && !a.a && (b.nonce = a.nonce);
    b = {
      postBody: fe(b).toString(),
      requestUri: "http://localhost"
    };
    a.a && (delete b.postBody, b.pendingToken = a.a);
    return b;
  }

  Kg.prototype.w = function () {
    var a = {
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
    this.idToken && (a.oauthIdToken = this.idToken);
    this.accessToken && (a.oauthAccessToken = this.accessToken);
    this.secret && (a.oauthTokenSecret = this.secret);
    this.nonce && (a.nonce = this.nonce);
    this.a && (a.pendingToken = this.a);
    return a;
  };

  function Mg(a) {
    if (a && a.providerId && a.signInMethod) {
      var b = {
        idToken: a.oauthIdToken,
        accessToken: a.oauthTokenSecret ? null : a.oauthAccessToken,
        oauthTokenSecret: a.oauthTokenSecret,
        oauthToken: a.oauthTokenSecret && a.oauthAccessToken,
        nonce: a.nonce,
        pendingToken: a.pendingToken
      };

      try {
        return new Kg(a.providerId, b, a.signInMethod);
      } catch (c) {}
    }

    return null;
  }

  function Ng(a, b) {
    this.Pc = b || [];
    N(this, {
      providerId: a,
      isOAuthProvider: !0
    });
    this.Hb = {};
    this.ob = (ng(a) || {}).Ja || null;
    this.nb = null;
  }

  Ng.prototype.Ka = function (a) {
    this.Hb = nb(a);
    return this;
  };

  function Og(a) {
    if ("string" !== typeof a || 0 != a.indexOf("saml.")) throw new t("argument-error", 'SAML provider IDs must be prefixed with "saml."');
    Ng.call(this, a, []);
  }

  r(Og, Ng);

  function Pg(a) {
    Ng.call(this, a, lg);
    this.a = [];
  }

  r(Pg, Ng);

  Pg.prototype.Ca = function (a) {
    Va(this.a, a) || this.a.push(a);
    return this;
  };

  Pg.prototype.Pb = function () {
    return Za(this.a);
  };

  Pg.prototype.credential = function (a, b) {
    var c;
    m(a) ? c = {
      idToken: a.idToken || null,
      accessToken: a.accessToken || null,
      nonce: a.rawNonce || null
    } : c = {
      idToken: a || null,
      accessToken: b || null
    };
    if (!c.idToken && !c.accessToken) throw new t("argument-error", "credential failed: must provide the ID token and/or the access token.");
    return new Kg(this.providerId, c, this.providerId);
  };

  function Qg() {
    Pg.call(this, "facebook.com");
  }

  r(Qg, Pg);
  M(Qg, "PROVIDER_ID", "facebook.com");
  M(Qg, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");

  function Rg(a) {
    if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    m(a) && (b = a.accessToken);
    return new Qg().credential({
      accessToken: b
    });
  }

  function Sg() {
    Pg.call(this, "github.com");
  }

  r(Sg, Pg);
  M(Sg, "PROVIDER_ID", "github.com");
  M(Sg, "GITHUB_SIGN_IN_METHOD", "github.com");

  function Tg(a) {
    if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    m(a) && (b = a.accessToken);
    return new Sg().credential({
      accessToken: b
    });
  }

  function Ug() {
    Pg.call(this, "google.com");
    this.Ca("profile");
  }

  r(Ug, Pg);
  M(Ug, "PROVIDER_ID", "google.com");
  M(Ug, "GOOGLE_SIGN_IN_METHOD", "google.com");

  function Vg(a, b) {
    var c = a;
    m(a) && (c = a.idToken, b = a.accessToken);
    return new Ug().credential({
      idToken: c,
      accessToken: b
    });
  }

  function Wg() {
    Ng.call(this, "twitter.com", kg);
  }

  r(Wg, Ng);
  M(Wg, "PROVIDER_ID", "twitter.com");
  M(Wg, "TWITTER_SIGN_IN_METHOD", "twitter.com");

  function Xg(a, b) {
    var c = a;
    m(c) || (c = {
      oauthToken: a,
      oauthTokenSecret: b
    });
    if (!c.oauthToken || !c.oauthTokenSecret) throw new t("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
    return new Kg("twitter.com", c, "twitter.com");
  }

  function Yg(a, b, c) {
    this.a = a;
    this.f = b;
    M(this, "providerId", "password");
    M(this, "signInMethod", c === Zg.EMAIL_LINK_SIGN_IN_METHOD ? Zg.EMAIL_LINK_SIGN_IN_METHOD : Zg.EMAIL_PASSWORD_SIGN_IN_METHOD);
  }

  Yg.prototype.ja = function (a) {
    return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, $g, {
      email: this.a,
      oobCode: this.f
    }) : O(a, ah, {
      email: this.a,
      password: this.f
    });
  };

  Yg.prototype.b = function (a, b) {
    return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, bh, {
      idToken: b,
      email: this.a,
      oobCode: this.f
    }) : O(a, ch, {
      idToken: b,
      email: this.a,
      password: this.f
    });
  };

  Yg.prototype.c = function (a, b) {
    return Cg(this.ja(a), b);
  };

  Yg.prototype.w = function () {
    return {
      email: this.a,
      password: this.f,
      signInMethod: this.signInMethod
    };
  };

  function dh(a) {
    return a && a.email && a.password ? new Yg(a.email, a.password, a.signInMethod) : null;
  }

  function Zg() {
    N(this, {
      providerId: "password",
      isOAuthProvider: !1
    });
  }

  function eh(a, b) {
    b = fh(b);
    if (!b) throw new t("argument-error", "Invalid email link!");
    return new Yg(a, b.code, Zg.EMAIL_LINK_SIGN_IN_METHOD);
  }

  function fh(a) {
    a = xg(a);
    return (a = Rf(a)) && a.operation === Af ? a : null;
  }

  N(Zg, {
    PROVIDER_ID: "password"
  });
  N(Zg, {
    EMAIL_LINK_SIGN_IN_METHOD: "emailLink"
  });
  N(Zg, {
    EMAIL_PASSWORD_SIGN_IN_METHOD: "password"
  });

  function gh(a) {
    if (!(a.cb && a.bb || a.La && a.ea)) throw new t("internal-error");
    this.a = a;
    M(this, "providerId", "phone");
    this.fa = "phone";
    M(this, "signInMethod", "phone");
  }

  gh.prototype.ja = function (a) {
    return a.eb(hh(this));
  };

  gh.prototype.b = function (a, b) {
    var c = hh(this);
    c.idToken = b;
    return O(a, ih, c);
  };

  gh.prototype.c = function (a, b) {
    var c = hh(this);
    c.operation = "REAUTH";
    a = O(a, jh, c);
    return Cg(a, b);
  };

  gh.prototype.w = function () {
    var a = {
      providerId: "phone"
    };
    this.a.cb && (a.verificationId = this.a.cb);
    this.a.bb && (a.verificationCode = this.a.bb);
    this.a.La && (a.temporaryProof = this.a.La);
    this.a.ea && (a.phoneNumber = this.a.ea);
    return a;
  };

  function kh(a) {
    if (a && "phone" === a.providerId && (a.verificationId && a.verificationCode || a.temporaryProof && a.phoneNumber)) {
      var b = {};
      w(["verificationId", "verificationCode", "temporaryProof", "phoneNumber"], function (c) {
        a[c] && (b[c] = a[c]);
      });
      return new gh(b);
    }

    return null;
  }

  function hh(a) {
    return a.a.La && a.a.ea ? {
      temporaryProof: a.a.La,
      phoneNumber: a.a.ea
    } : {
      sessionInfo: a.a.cb,
      code: a.a.bb
    };
  }

  function lh(a) {
    try {
      this.a = a || _app["default"].auth();
    } catch (b) {
      throw new t("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
    }

    N(this, {
      providerId: "phone",
      isOAuthProvider: !1
    });
  }

  lh.prototype.eb = function (a, b) {
    var c = this.a.a;
    return E(b.verify()).then(function (d) {
      if ("string" !== typeof d) throw new t("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");

      switch (b.type) {
        case "recaptcha":
          var e = m(a) ? a.session : null,
              f = m(a) ? a.phoneNumber : a,
              g;
          e && e.type == zg ? g = e.Ha().then(function (h) {
            return mh(c, {
              idToken: h,
              phoneEnrollmentInfo: {
                phoneNumber: f,
                recaptchaToken: d
              }
            });
          }) : e && e.type == Ag ? g = e.Ha().then(function (h) {
            return nh(c, {
              mfaPendingCredential: h,
              mfaEnrollmentId: a.multiFactorHint && a.multiFactorHint.uid || a.multiFactorUid,
              phoneSignInInfo: {
                recaptchaToken: d
              }
            });
          }) : g = oh(c, {
            phoneNumber: f,
            recaptchaToken: d
          });
          return g.then(function (h) {
            "function" === typeof b.reset && b.reset();
            return h;
          }, function (h) {
            "function" === typeof b.reset && b.reset();
            throw h;
          });

        default:
          throw new t("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
      }
    });
  };

  function ph(a, b) {
    if (!a) throw new t("missing-verification-id");
    if (!b) throw new t("missing-verification-code");
    return new gh({
      cb: a,
      bb: b
    });
  }

  N(lh, {
    PROVIDER_ID: "phone"
  });
  N(lh, {
    PHONE_SIGN_IN_METHOD: "phone"
  });

  function qh(a) {
    if (a.temporaryProof && a.phoneNumber) return new gh({
      La: a.temporaryProof,
      ea: a.phoneNumber
    });
    var b = a && a.providerId;
    if (!b || "password" === b) return null;
    var c = a && a.oauthAccessToken,
        d = a && a.oauthTokenSecret,
        e = a && a.nonce,
        f = a && a.oauthIdToken,
        g = a && a.pendingToken;

    try {
      switch (b) {
        case "google.com":
          return Vg(f, c);

        case "facebook.com":
          return Rg(c);

        case "github.com":
          return Tg(c);

        case "twitter.com":
          return Xg(c, d);

        default:
          return c || d || f || g ? g ? 0 == b.indexOf("saml.") ? new Eg(b, g) : new Kg(b, {
            pendingToken: g,
            idToken: a.oauthIdToken,
            accessToken: a.oauthAccessToken
          }, b) : new Pg(b).credential({
            idToken: f,
            accessToken: c,
            rawNonce: e
          }) : null;
      }
    } catch (h) {
      return null;
    }
  }

  function rh(a) {
    if (!a.isOAuthProvider) throw new t("invalid-oauth-provider");
  }

  ;

  function sh(a, b, c, d, e, f, g) {
    this.c = a;
    this.b = b || null;
    this.g = c || null;
    this.f = d || null;
    this.h = f || null;
    this.i = g || null;
    this.a = e || null;

    if (this.g || this.a) {
      if (this.g && this.a) throw new t("invalid-auth-event");
      if (this.g && !this.f) throw new t("invalid-auth-event");
    } else throw new t("invalid-auth-event");
  }

  sh.prototype.getUid = function () {
    var a = [];
    a.push(this.c);
    this.b && a.push(this.b);
    this.f && a.push(this.f);
    this.i && a.push(this.i);
    return a.join("-");
  };

  sh.prototype.S = function () {
    return this.i;
  };

  sh.prototype.w = function () {
    return {
      type: this.c,
      eventId: this.b,
      urlResponse: this.g,
      sessionId: this.f,
      postBody: this.h,
      tenantId: this.i,
      error: this.a && this.a.w()
    };
  };

  function th(a) {
    a = a || {};
    return a.type ? new sh(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && Aa(a.error), a.postBody, a.tenantId) : null;
  }

  ;
  /*
  Copyright 2018 Google Inc.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function uh() {
    this.b = null;
    this.a = [];
  }

  var vh = null;

  function wh(a) {
    var b = vh;
    b.a.push(a);
    b.b || (b.b = function (c) {
      for (var d = 0; d < b.a.length; d++) {
        b.a[d](c);
      }
    }, a = L("universalLinks.subscribe", l), "function" === typeof a && a(null, b.b));
  }

  ;

  function xh(a) {
    var b = "unauthorized-domain",
        c = void 0,
        d = be(a);
    a = d.a;
    d = d.f;
    "chrome-extension" == d ? c = Qb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = Qb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
    t.call(this, b, c);
  }

  r(xh, t);

  function yh(a, b, c) {
    t.call(this, a, c);
    a = b || {};
    a.Ib && M(this, "email", a.Ib);
    a.ea && M(this, "phoneNumber", a.ea);
    a.credential && M(this, "credential", a.credential);
    a.Yb && M(this, "tenantId", a.Yb);
  }

  r(yh, t);

  yh.prototype.w = function () {
    var a = {
      code: this.code,
      message: this.message
    };
    this.email && (a.email = this.email);
    this.phoneNumber && (a.phoneNumber = this.phoneNumber);
    this.tenantId && (a.tenantId = this.tenantId);
    var b = this.credential && this.credential.w();
    b && z(a, b);
    return a;
  };

  yh.prototype.toJSON = function () {
    return this.w();
  };

  function zh(a) {
    if (a.code) {
      var b = a.code || "";
      0 == b.indexOf(ya) && (b = b.substring(ya.length));
      var c = {
        credential: qh(a),
        Yb: a.tenantId
      };
      if (a.email) c.Ib = a.email;else if (a.phoneNumber) c.ea = a.phoneNumber;else if (!c.credential) return new t(b, a.message || void 0);
      return new yh(b, c, a.message);
    }

    return null;
  }

  ;

  function Ah() {}

  Ah.prototype.c = null;

  function Bh(a) {
    return a.c || (a.c = a.b());
  }

  ;
  var Ch;

  function Dh() {}

  r(Dh, Ah);

  Dh.prototype.a = function () {
    var a = Eh(this);
    return a ? new ActiveXObject(a) : new XMLHttpRequest();
  };

  Dh.prototype.b = function () {
    var a = {};
    Eh(this) && (a[0] = !0, a[1] = !0);
    return a;
  };

  function Eh(a) {
    if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
      for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
        var d = b[c];

        try {
          return new ActiveXObject(d), a.f = d;
        } catch (e) {}
      }

      throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
    }

    return a.f;
  }

  Ch = new Dh();

  function Fh() {}

  r(Fh, Ah);

  Fh.prototype.a = function () {
    var a = new XMLHttpRequest();
    if ("withCredentials" in a) return a;
    if ("undefined" != typeof XDomainRequest) return new Gh();
    throw Error("Unsupported browser");
  };

  Fh.prototype.b = function () {
    return {};
  };

  function Gh() {
    this.a = new XDomainRequest();
    this.readyState = 0;
    this.onreadystatechange = null;
    this.responseType = this.responseText = this.response = "";
    this.status = -1;
    this.statusText = "";
    this.a.onload = q(this.pc, this);
    this.a.onerror = q(this.Rb, this);
    this.a.onprogress = q(this.qc, this);
    this.a.ontimeout = q(this.uc, this);
  }

  k = Gh.prototype;

  k.open = function (a, b, c) {
    if (null != c && !c) throw Error("Only async requests are supported.");
    this.a.open(a, b);
  };

  k.send = function (a) {
    if (a) {
      if ("string" == typeof a) this.a.send(a);else throw Error("Only string data is supported");
    } else this.a.send();
  };

  k.abort = function () {
    this.a.abort();
  };

  k.setRequestHeader = function () {};

  k.getResponseHeader = function (a) {
    return "content-type" == a.toLowerCase() ? this.a.contentType : "";
  };

  k.pc = function () {
    this.status = 200;
    this.response = this.responseText = this.a.responseText;
    Hh(this, 4);
  };

  k.Rb = function () {
    this.status = 500;
    this.response = this.responseText = "";
    Hh(this, 4);
  };

  k.uc = function () {
    this.Rb();
  };

  k.qc = function () {
    this.status = 200;
    Hh(this, 1);
  };

  function Hh(a, b) {
    a.readyState = b;
    if (a.onreadystatechange) a.onreadystatechange();
  }

  k.getAllResponseHeaders = function () {
    return "content-type: " + this.a.contentType;
  };

  function Ih(a, b, c) {
    this.reset(a, b, c, void 0, void 0);
  }

  Ih.prototype.a = null;
  var Jh = 0;

  Ih.prototype.reset = function (a, b, c, d, e) {
    "number" == typeof e || Jh++;
    d || va();
    delete this.a;
  };

  function Kh(a) {
    this.f = a;
    this.b = this.c = this.a = null;
  }

  function Lh(a, b) {
    this.name = a;
    this.value = b;
  }

  Lh.prototype.toString = function () {
    return this.name;
  };

  var Mh = new Lh("SEVERE", 1E3),
      Nh = new Lh("WARNING", 900),
      Oh = new Lh("CONFIG", 700),
      Ph = new Lh("FINE", 500);

  function Qh(a) {
    if (a.c) return a.c;
    if (a.a) return Qh(a.a);
    Ga("Root logger has no level set.");
    return null;
  }

  Kh.prototype.log = function (a, b, c) {
    if (a.value >= Qh(this).value) for (oa(b) && (b = b()), a = new Ih(a, String(b), this.f), c && (a.a = c), c = this; c;) {
      c = c.a;
    }
  };

  var Rh = {},
      Sh = null;

  function Th(a) {
    Sh || (Sh = new Kh(""), Rh[""] = Sh, Sh.c = Oh);
    var b;

    if (!(b = Rh[a])) {
      b = new Kh(a);
      var c = a.lastIndexOf("."),
          d = a.substr(c + 1);
      c = Th(a.substr(0, c));
      c.b || (c.b = {});
      c.b[d] = b;
      b.a = c;
      Rh[a] = b;
    }

    return b;
  }

  ;

  function Uh(a, b) {
    a && a.log(Ph, b, void 0);
  }

  ;

  function Vh(a) {
    this.f = a;
  }

  r(Vh, Ah);

  Vh.prototype.a = function () {
    return new Wh(this.f);
  };

  Vh.prototype.b = function (a) {
    return function () {
      return a;
    };
  }({});

  function Wh(a) {
    I.call(this);
    this.u = a;
    this.i = void 0;
    this.readyState = Xh;
    this.status = 0;
    this.responseType = this.responseText = this.response = this.statusText = "";
    this.onreadystatechange = null;
    this.l = new Headers();
    this.b = null;
    this.s = "GET";
    this.f = "";
    this.a = !1;
    this.h = Th("goog.net.FetchXmlHttp");
    this.m = this.c = this.g = null;
  }

  r(Wh, I);
  var Xh = 0;
  k = Wh.prototype;

  k.open = function (a, b) {
    if (this.readyState != Xh) throw this.abort(), Error("Error reopening a connection");
    this.s = a;
    this.f = b;
    this.readyState = 1;
    Yh(this);
  };

  k.send = function (a) {
    if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
    this.a = !0;
    var b = {
      headers: this.l,
      method: this.s,
      credentials: this.i,
      cache: void 0
    };
    a && (b.body = a);
    this.u.fetch(new Request(this.f, b)).then(this.tc.bind(this), this.Ta.bind(this));
  };

  k.abort = function () {
    this.response = this.responseText = "";
    this.l = new Headers();
    this.status = 0;
    this.c && this.c.cancel("Request was aborted.");
    1 <= this.readyState && this.a && 4 != this.readyState && (this.a = !1, Zh(this));
    this.readyState = Xh;
  };

  k.tc = function (a) {
    this.a && (this.g = a, this.b || (this.status = this.g.status, this.statusText = this.g.statusText, this.b = a.headers, this.readyState = 2, Yh(this)), this.a && (this.readyState = 3, Yh(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.rc.bind(this), this.Ta.bind(this)) : "undefined" !== typeof l.ReadableStream && "body" in a ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.m = new TextDecoder(), $h(this)) : a.text().then(this.sc.bind(this), this.Ta.bind(this)))));
  };

  function $h(a) {
    a.c.read().then(a.oc.bind(a))["catch"](a.Ta.bind(a));
  }

  k.oc = function (a) {
    if (this.a) {
      var b = this.m.decode(a.value ? a.value : new Uint8Array(0), {
        stream: !a.done
      });
      b && (this.response = this.responseText += b);
      a.done ? Zh(this) : Yh(this);
      3 == this.readyState && $h(this);
    }
  };

  k.sc = function (a) {
    this.a && (this.response = this.responseText = a, Zh(this));
  };

  k.rc = function (a) {
    this.a && (this.response = a, Zh(this));
  };

  k.Ta = function (a) {
    var b = this.h;
    b && b.log(Nh, "Failed to fetch url " + this.f, a instanceof Error ? a : Error(a));
    this.a && Zh(this);
  };

  function Zh(a) {
    a.readyState = 4;
    a.g = null;
    a.c = null;
    a.m = null;
    Yh(a);
  }

  k.setRequestHeader = function (a, b) {
    this.l.append(a, b);
  };

  k.getResponseHeader = function (a) {
    return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.h) && a.log(Nh, "Attempting to get response header but no headers have been received for url: " + this.f, void 0), "");
  };

  k.getAllResponseHeaders = function () {
    if (!this.b) {
      var a = this.h;
      a && a.log(Nh, "Attempting to get all response headers but no headers have been received for url: " + this.f, void 0);
      return "";
    }

    a = [];

    for (var b = this.b.entries(), c = b.next(); !c.done;) {
      c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
    }

    return a.join("\r\n");
  };

  function Yh(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
  }

  Object.defineProperty(Wh.prototype, "withCredentials", {
    get: function get() {
      return "include" === this.i;
    },
    set: function set(a) {
      this.i = a ? "include" : "same-origin";
    }
  });

  function ai(a) {
    I.call(this);
    this.headers = new Id();
    this.O = a || null;
    this.c = !1;
    this.A = this.a = null;
    this.i = this.P = this.l = "";
    this.f = this.N = this.h = this.G = !1;
    this.g = 0;
    this.s = null;
    this.m = bi;
    this.u = this.R = !1;
  }

  r(ai, I);
  var bi = "";
  ai.prototype.b = Th("goog.net.XhrIo");
  var ci = /^https?$/i,
      di = ["POST", "PUT"];

  function ei(a, b, c, d, e) {
    if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
    c = c ? c.toUpperCase() : "GET";
    a.l = b;
    a.i = "";
    a.P = c;
    a.G = !1;
    a.c = !0;
    a.a = a.O ? a.O.a() : Ch.a();
    a.A = a.O ? Bh(a.O) : Bh(Ch);
    a.a.onreadystatechange = q(a.Ub, a);

    try {
      Uh(a.b, fi(a, "Opening Xhr")), a.N = !0, a.a.open(c, String(b), !0), a.N = !1;
    } catch (g) {
      Uh(a.b, fi(a, "Error opening Xhr: " + g.message));
      gi(a, g);
      return;
    }

    b = d || "";
    var f = new Id(a.headers);
    e && Hd(e, function (g, h) {
      f.set(h, g);
    });
    e = Ta(f.Y());
    d = l.FormData && b instanceof l.FormData;
    !Va(di, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    f.forEach(function (g, h) {
      this.a.setRequestHeader(h, g);
    }, a);
    a.m && (a.a.responseType = a.m);
    "withCredentials" in a.a && a.a.withCredentials !== a.R && (a.a.withCredentials = a.R);

    try {
      hi(a), 0 < a.g && (a.u = ii(a.a), Uh(a.b, fi(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.u)), a.u ? (a.a.timeout = a.g, a.a.ontimeout = q(a.Ma, a)) : a.s = Dd(a.Ma, a.g, a)), Uh(a.b, fi(a, "Sending request")), a.h = !0, a.a.send(b), a.h = !1;
    } catch (g) {
      Uh(a.b, fi(a, "Send error: " + g.message)), gi(a, g);
    }
  }

  function ii(a) {
    return Wb && fc(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout;
  }

  function Ua(a) {
    return "content-type" == a.toLowerCase();
  }

  k = ai.prototype;

  k.Ma = function () {
    "undefined" != typeof ha && this.a && (this.i = "Timed out after " + this.g + "ms, aborting", Uh(this.b, fi(this, this.i)), this.dispatchEvent("timeout"), this.abort(8));
  };

  function gi(a, b) {
    a.c = !1;
    a.a && (a.f = !0, a.a.abort(), a.f = !1);
    a.i = b;
    ji(a);
    ki(a);
  }

  function ji(a) {
    a.G || (a.G = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
  }

  k.abort = function () {
    this.a && this.c && (Uh(this.b, fi(this, "Aborting")), this.c = !1, this.f = !0, this.a.abort(), this.f = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), ki(this));
  };

  k.Da = function () {
    this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), ki(this, !0));
    ai.$a.Da.call(this);
  };

  k.Ub = function () {
    this.xa || (this.N || this.h || this.f ? li(this) : this.Ic());
  };

  k.Ic = function () {
    li(this);
  };

  function li(a) {
    if (a.c && "undefined" != typeof ha) if (a.A[1] && 4 == mi(a) && 2 == ni(a)) Uh(a.b, fi(a, "Local request error detected and ignored"));else if (a.h && 4 == mi(a)) Dd(a.Ub, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == mi(a)) {
      Uh(a.b, fi(a, "Request complete"));
      a.c = !1;

      try {
        var b = ni(a);

        a: switch (b) {
          case 200:
          case 201:
          case 202:
          case 204:
          case 206:
          case 304:
          case 1223:
            var c = !0;
            break a;

          default:
            c = !1;
        }

        var d;

        if (!(d = c)) {
          var e;

          if (e = 0 === b) {
            var f = String(a.l).match(Ld)[1] || null;

            if (!f && l.self && l.self.location) {
              var g = l.self.location.protocol;
              f = g.substr(0, g.length - 1);
            }

            e = !ci.test(f ? f.toLowerCase() : "");
          }

          d = e;
        }

        if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {
          try {
            var h = 2 < mi(a) ? a.a.statusText : "";
          } catch (n) {
            Uh(a.b, "Can not get status: " + n.message), h = "";
          }

          a.i = h + " [" + ni(a) + "]";
          ji(a);
        }
      } finally {
        ki(a);
      }
    }
  }

  function ki(a, b) {
    if (a.a) {
      hi(a);
      var c = a.a,
          d = a.A[0] ? la : null;
      a.a = null;
      a.A = null;
      b || a.dispatchEvent("ready");

      try {
        c.onreadystatechange = d;
      } catch (e) {
        (a = a.b) && a.log(Mh, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
      }
    }
  }

  function hi(a) {
    a.a && a.u && (a.a.ontimeout = null);
    a.s && (l.clearTimeout(a.s), a.s = null);
  }

  function mi(a) {
    return a.a ? a.a.readyState : 0;
  }

  function ni(a) {
    try {
      return 2 < mi(a) ? a.a.status : -1;
    } catch (b) {
      return -1;
    }
  }

  function oi(a) {
    try {
      return a.a ? a.a.responseText : "";
    } catch (b) {
      return Uh(a.b, "Can not get responseText: " + b.message), "";
    }
  }

  k.getResponse = function () {
    try {
      if (!this.a) return null;
      if ("response" in this.a) return this.a.response;

      switch (this.m) {
        case bi:
        case "text":
          return this.a.responseText;

        case "arraybuffer":
          if ("mozResponseArrayBuffer" in this.a) return this.a.mozResponseArrayBuffer;
      }

      var a = this.b;
      a && a.log(Mh, "Response type " + this.m + " is not supported on this browser", void 0);
      return null;
    } catch (b) {
      return Uh(this.b, "Can not get response: " + b.message), null;
    }
  };

  function fi(a, b) {
    return b + " [" + a.P + " " + a.l + " " + ni(a) + "]";
  }

  ;
  /*
  Portions of this code are from MochiKit, received by
  The Closure Authors under the MIT license. All other code is Copyright
  2005-2009 The Closure Authors. All Rights Reserved.
  */

  function pi(a) {
    var b = qi;
    this.g = [];
    this.u = b;
    this.s = a || null;
    this.f = this.a = !1;
    this.c = void 0;
    this.m = this.A = this.h = !1;
    this.i = 0;
    this.b = null;
    this.l = 0;
  }

  pi.prototype.cancel = function (a) {
    if (this.a) this.c instanceof pi && this.c.cancel();else {
      if (this.b) {
        var b = this.b;
        delete this.b;
        a ? b.cancel(a) : (b.l--, 0 >= b.l && b.cancel());
      }

      this.u ? this.u.call(this.s, this) : this.m = !0;
      this.a || (a = new ri(this), si(this), ti(this, !1, a));
    }
  };

  pi.prototype.v = function (a, b) {
    this.h = !1;
    ti(this, a, b);
  };

  function ti(a, b, c) {
    a.a = !0;
    a.c = c;
    a.f = !b;
    ui(a);
  }

  function si(a) {
    if (a.a) {
      if (!a.m) throw new vi(a);
      a.m = !1;
    }
  }

  function wi(a, b) {
    xi(a, null, b, void 0);
  }

  function xi(a, b, c, d) {
    a.g.push([b, c, d]);
    a.a && ui(a);
  }

  pi.prototype.then = function (a, b, c) {
    var d,
        e,
        f = new D(function (g, h) {
      d = g;
      e = h;
    });
    xi(this, d, function (g) {
      g instanceof ri ? f.cancel() : e(g);
    });
    return f.then(a, b, c);
  };

  pi.prototype.$goog_Thenable = !0;

  function yi(a) {
    return Sa(a.g, function (b) {
      return oa(b[1]);
    });
  }

  function ui(a) {
    if (a.i && a.a && yi(a)) {
      var b = a.i,
          c = zi[b];
      c && (l.clearTimeout(c.a), delete zi[b]);
      a.i = 0;
    }

    a.b && (a.b.l--, delete a.b);
    b = a.c;

    for (var d = c = !1; a.g.length && !a.h;) {
      var e = a.g.shift(),
          f = e[0],
          g = e[1];
      e = e[2];
      if (f = a.f ? g : f) try {
        var h = f.call(e || a.s, b);
        void 0 !== h && (a.f = a.f && (h == b || h instanceof Error), a.c = b = h);
        if (Ea(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.h = !0;
      } catch (n) {
        b = n, a.f = !0, yi(a) || (c = !0);
      }
    }

    a.c = b;
    d && (h = q(a.v, a, !0), d = q(a.v, a, !1), b instanceof pi ? (xi(b, h, d), b.A = !0) : b.then(h, d));
    c && (b = new Ai(b), zi[b.a] = b, a.i = b.a);
  }

  function vi() {
    u.call(this);
  }

  r(vi, u);
  vi.prototype.message = "Deferred has already fired";
  vi.prototype.name = "AlreadyCalledError";

  function ri() {
    u.call(this);
  }

  r(ri, u);
  ri.prototype.message = "Deferred was canceled";
  ri.prototype.name = "CanceledError";

  function Ai(a) {
    this.a = l.setTimeout(q(this.c, this), 0);
    this.b = a;
  }

  Ai.prototype.c = function () {
    delete zi[this.a];
    throw this.b;
  };

  var zi = {};

  function Bi(a) {
    var b = {},
        c = b.document || document,
        d = yb(a).toString(),
        e = oc(document, "SCRIPT"),
        f = {
      Vb: e,
      Ma: void 0
    },
        g = new pi(f),
        h = null,
        n = null != b.timeout ? b.timeout : 5E3;
    0 < n && (h = window.setTimeout(function () {
      Ci(e, !0);
      var p = new Di(Ei, "Timeout reached for loading script " + d);
      si(g);
      ti(g, !1, p);
    }, n), f.Ma = h);

    e.onload = e.onreadystatechange = function () {
      e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Ci(e, b.wd || !1, h), si(g), ti(g, !0, null));
    };

    e.onerror = function () {
      Ci(e, !0, h);
      var p = new Di(Fi, "Error while loading script " + d);
      si(g);
      ti(g, !1, p);
    };

    f = b.attributes || {};
    z(f, {
      type: "text/javascript",
      charset: "UTF-8"
    });
    lc(e, f);
    Ob(e, a);
    Gi(c).appendChild(e);
    return g;
  }

  function Gi(a) {
    var b;
    return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
  }

  function qi() {
    if (this && this.Vb) {
      var a = this.Vb;
      a && "SCRIPT" == a.tagName && Ci(a, !0, this.Ma);
    }
  }

  function Ci(a, b, c) {
    null != c && l.clearTimeout(c);
    a.onload = la;
    a.onerror = la;
    a.onreadystatechange = la;
    b && window.setTimeout(function () {
      a && a.parentNode && a.parentNode.removeChild(a);
    }, 0);
  }

  var Fi = 0,
      Ei = 1;

  function Di(a, b) {
    var c = "Jsloader error (code #" + a + ")";
    b && (c += ": " + b);
    u.call(this, c);
    this.code = a;
  }

  r(Di, u);

  function Hi(a) {
    this.f = a;
  }

  r(Hi, Ah);

  Hi.prototype.a = function () {
    return new this.f();
  };

  Hi.prototype.b = function () {
    return {};
  };

  function Ii(a, b, c) {
    this.c = a;
    a = b || {};
    this.l = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
    this.v = a.secureTokenTimeout || Ji;
    this.g = nb(a.secureTokenHeaders || Ki);
    this.i = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
    this.h = a.identityPlatformEndpoint || "https://identitytoolkit.googleapis.com/v2/";
    this.m = a.firebaseTimeout || Li;
    this.a = nb(a.firebaseHeaders || Mi);
    c && (this.a["X-Client-Version"] = c, this.g["X-Client-Version"] = c);
    c = "Node" == Ke();
    c = l.XMLHttpRequest || c && _app["default"].INTERNAL.node && _app["default"].INTERNAL.node.XMLHttpRequest;
    if (!c && !Je()) throw new t("internal-error", "The XMLHttpRequest compatibility library was not found.");
    this.f = void 0;
    Je() ? this.f = new Vh(self) : Le() ? this.f = new Hi(c) : this.f = new Fh();
    this.b = null;
  }

  var Ni,
      Dg = "idToken",
      Ji = new Ze(3E4, 6E4),
      Ki = {
    "Content-Type": "application/x-www-form-urlencoded"
  },
      Li = new Ze(3E4, 6E4),
      Mi = {
    "Content-Type": "application/json"
  };

  function Oi(a, b) {
    b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
  }

  function Pi(a, b) {
    b && (a.l = Qi("https://securetoken.googleapis.com/v1/token", b), a.i = Qi("https://www.googleapis.com/identitytoolkit/v3/relyingparty/", b), a.h = Qi("https://identitytoolkit.googleapis.com/v2/", b));
  }

  function Qi(a, b) {
    a = be(a);
    b = be(b.url);
    a.c = a.a + a.c;
    Od(a, b.f);
    a.a = b.a;
    Pd(a, b.g);
    return a.toString();
  }

  function Ri(a, b) {
    b ? (a.a["X-Client-Version"] = b, a.g["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.g["X-Client-Version"]);
  }

  Ii.prototype.S = function () {
    return this.b;
  };

  function Si(a, b, c, d, e, f, g) {
    ue() || Je() ? a = q(a.u, a) : (Ni || (Ni = new D(function (h, n) {
      Ti(h, n);
    })), a = q(a.s, a));
    a(b, c, d, e, f, g);
  }

  Ii.prototype.u = function (a, b, c, d, e, f) {
    if (Je() && ("undefined" === typeof l.fetch || "undefined" === typeof l.Headers || "undefined" === typeof l.Request)) throw new t("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
    var g = new ai(this.f);

    if (f) {
      g.g = Math.max(0, f);
      var h = setTimeout(function () {
        g.dispatchEvent("timeout");
      }, f);
    }

    qd(g, "complete", function () {
      h && clearTimeout(h);
      var n = null;

      try {
        n = JSON.parse(oi(this)) || null;
      } catch (p) {
        n = null;
      }

      b && b(n);
    });
    wd(g, "ready", function () {
      h && clearTimeout(h);
      Xc(this);
    });
    wd(g, "timeout", function () {
      h && clearTimeout(h);
      Xc(this);
      b && b(null);
    });
    ei(g, a, c, d, e);
  };

  var Ui = new qb(rb, "https://apis.google.com/js/client.js?onload=%{onload}"),
      Vi = "__fcb" + Math.floor(1E6 * Math.random()).toString();

  function Ti(a, b) {
    if (((window.gapi || {}).client || {}).request) a();else {
      l[Vi] = function () {
        ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
      };

      var c = zb(Ui, {
        onload: Vi
      });
      wi(Bi(c), function () {
        b(Error("CORS_UNSUPPORTED"));
      });
    }
  }

  Ii.prototype.s = function (a, b, c, d, e) {
    var f = this;
    Ni.then(function () {
      window.gapi.client.setApiKey(f.c);
      var g = window.gapi.auth.getToken();
      window.gapi.auth.setToken(null);
      window.gapi.client.request({
        path: a,
        method: c,
        body: d,
        headers: e,
        authType: "none",
        callback: function callback(h) {
          window.gapi.auth.setToken(g);
          b && b(h);
        }
      });
    }).o(function (g) {
      b && b({
        error: {
          message: g && g.message || "CORS_UNSUPPORTED"
        }
      });
    });
  };

  function Wi(a, b) {
    return new D(function (c, d) {
      "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Si(a, a.l + "?key=" + encodeURIComponent(a.c), function (e) {
        e ? e.error ? d(Xi(e)) : e.access_token && e.refresh_token ? c(e) : d(new t("internal-error")) : d(new t("network-request-failed"));
      }, "POST", fe(b).toString(), a.g, a.v.get()) : d(new t("internal-error"));
    });
  }

  function Yi(a, b, c, d, e, f, g) {
    var h = be(b + c);
    J(h, "key", a.c);
    g && J(h, "cb", va().toString());
    var n = "GET" == d;
    if (n) for (var p in e) {
      e.hasOwnProperty(p) && J(h, p, e[p]);
    }
    return new D(function (v, B) {
      Si(a, h.toString(), function (A) {
        A ? A.error ? B(Xi(A, f || {})) : v(A) : B(new t("network-request-failed"));
      }, d, n ? void 0 : ke(Ve(e)), a.a, a.m.get());
    });
  }

  function Zi(a) {
    a = a.email;
    if ("string" !== typeof a || !De.test(a)) throw new t("invalid-email");
  }

  function $i(a) {
    "email" in a && Zi(a);
  }

  function aj(a, b) {
    return O(a, bj, {
      identifier: b,
      continueUri: Se() ? re() : "http://localhost"
    }).then(function (c) {
      return c.signinMethods || [];
    });
  }

  function cj(a) {
    return O(a, dj, {}).then(function (b) {
      return b.authorizedDomains || [];
    });
  }

  function P(a) {
    if (!a[Dg]) {
      if (a.mfaPendingCredential) throw new t("multi-factor-auth-required", null, nb(a));
      throw new t("internal-error");
    }
  }

  function ej(a) {
    if (a.phoneNumber || a.temporaryProof) {
      if (!a.phoneNumber || !a.temporaryProof) throw new t("internal-error");
    } else {
      if (!a.sessionInfo) throw new t("missing-verification-id");
      if (!a.code) throw new t("missing-verification-code");
    }
  }

  Ii.prototype.yb = function () {
    return O(this, fj, {});
  };

  Ii.prototype.Ab = function (a, b) {
    return O(this, gj, {
      idToken: a,
      email: b
    });
  };

  Ii.prototype.Bb = function (a, b) {
    return O(this, ch, {
      idToken: a,
      password: b
    });
  };

  var hj = {
    displayName: "DISPLAY_NAME",
    photoUrl: "PHOTO_URL"
  };
  k = Ii.prototype;

  k.Cb = function (a, b) {
    var c = {
      idToken: a
    },
        d = [];
    lb(hj, function (e, f) {
      var g = b[f];
      null === g ? d.push(e) : f in b && (c[f] = g);
    });
    d.length && (c.deleteAttribute = d);
    return O(this, gj, c);
  };

  k.ub = function (a, b) {
    a = {
      requestType: "PASSWORD_RESET",
      email: a
    };
    z(a, b);
    return O(this, ij, a);
  };

  k.vb = function (a, b) {
    a = {
      requestType: "EMAIL_SIGNIN",
      email: a
    };
    z(a, b);
    return O(this, jj, a);
  };

  k.tb = function (a, b) {
    a = {
      requestType: "VERIFY_EMAIL",
      idToken: a
    };
    z(a, b);
    return O(this, kj, a);
  };

  k.Db = function (a, b, c) {
    a = {
      requestType: "VERIFY_AND_CHANGE_EMAIL",
      idToken: a,
      newEmail: b
    };
    z(a, c);
    return O(this, lj, a);
  };

  function oh(a, b) {
    return O(a, mj, b);
  }

  k.eb = function (a) {
    return O(this, nj, a);
  };

  function mh(a, b) {
    return O(a, oj, b).then(function (c) {
      return c.phoneSessionInfo.sessionInfo;
    });
  }

  function pj(a) {
    if (!a.phoneVerificationInfo) throw new t("internal-error");
    if (!a.phoneVerificationInfo.sessionInfo) throw new t("missing-verification-id");
    if (!a.phoneVerificationInfo.code) throw new t("missing-verification-code");
  }

  function nh(a, b) {
    return O(a, qj, b).then(function (c) {
      return c.phoneResponseInfo.sessionInfo;
    });
  }

  function rj(a, b, c) {
    return O(a, sj, {
      idToken: b,
      deleteProvider: c
    });
  }

  function tj(a) {
    if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken) throw new t("internal-error");
  }

  function uj(a, b) {
    b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new Td(a.postBody), je(a, "nonce") && (b.nonce = a.get("nonce"))));
    return b;
  }

  function vj(a) {
    var b = null;
    a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = zh(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = zh(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = zh(a)) : a.errorMessage && (b = wj(a.errorMessage));
    if (b) throw b;
    P(a);
  }

  function Fg(a, b) {
    b.returnIdpCredential = !0;
    return O(a, xj, b);
  }

  function Hg(a, b) {
    b.returnIdpCredential = !0;
    return O(a, yj, b);
  }

  function Ig(a, b) {
    b.returnIdpCredential = !0;
    b.autoCreate = !1;
    return O(a, zj, b);
  }

  function Aj(a) {
    if (!a.oobCode) throw new t("invalid-action-code");
  }

  k.mb = function (a, b) {
    return O(this, Bj, {
      oobCode: a,
      newPassword: b
    });
  };

  k.Qa = function (a) {
    return O(this, Cj, {
      oobCode: a
    });
  };

  k.ib = function (a) {
    return O(this, Dj, {
      oobCode: a
    });
  };

  var Dj = {
    endpoint: "setAccountInfo",
    B: Aj,
    Z: "email",
    C: !0
  },
      Cj = {
    endpoint: "resetPassword",
    B: Aj,
    F: function F(a) {
      var b = a.requestType;
      if (!b || !a.email && "EMAIL_SIGNIN" != b && "VERIFY_AND_CHANGE_EMAIL" != b) throw new t("internal-error");
    },
    C: !0
  },
      Ej = {
    endpoint: "signupNewUser",
    B: function B(a) {
      Zi(a);
      if (!a.password) throw new t("weak-password");
    },
    F: P,
    U: !0,
    C: !0
  },
      bj = {
    endpoint: "createAuthUri",
    C: !0
  },
      Fj = {
    endpoint: "deleteAccount",
    M: ["idToken"]
  },
      sj = {
    endpoint: "setAccountInfo",
    M: ["idToken", "deleteProvider"],
    B: function B(a) {
      if (!Array.isArray(a.deleteProvider)) throw new t("internal-error");
    }
  },
      $g = {
    endpoint: "emailLinkSignin",
    M: ["email", "oobCode"],
    B: Zi,
    F: P,
    U: !0,
    C: !0
  },
      bh = {
    endpoint: "emailLinkSignin",
    M: ["idToken", "email", "oobCode"],
    B: Zi,
    F: P,
    U: !0
  },
      Gj = {
    endpoint: "accounts/mfaEnrollment:finalize",
    M: ["idToken", "phoneVerificationInfo"],
    B: pj,
    F: P,
    C: !0,
    Na: !0
  },
      Hj = {
    endpoint: "accounts/mfaSignIn:finalize",
    M: ["mfaPendingCredential", "phoneVerificationInfo"],
    B: pj,
    F: P,
    C: !0,
    Na: !0
  },
      Ij = {
    endpoint: "getAccountInfo"
  },
      jj = {
    endpoint: "getOobConfirmationCode",
    M: ["requestType"],
    B: function B(a) {
      if ("EMAIL_SIGNIN" != a.requestType) throw new t("internal-error");
      Zi(a);
    },
    Z: "email",
    C: !0
  },
      kj = {
    endpoint: "getOobConfirmationCode",
    M: ["idToken", "requestType"],
    B: function B(a) {
      if ("VERIFY_EMAIL" != a.requestType) throw new t("internal-error");
    },
    Z: "email",
    C: !0
  },
      lj = {
    endpoint: "getOobConfirmationCode",
    M: ["idToken", "newEmail", "requestType"],
    B: function B(a) {
      if ("VERIFY_AND_CHANGE_EMAIL" != a.requestType) throw new t("internal-error");
    },
    Z: "email",
    C: !0
  },
      ij = {
    endpoint: "getOobConfirmationCode",
    M: ["requestType"],
    B: function B(a) {
      if ("PASSWORD_RESET" != a.requestType) throw new t("internal-error");
      Zi(a);
    },
    Z: "email",
    C: !0
  },
      dj = {
    kb: !0,
    endpoint: "getProjectConfig",
    Tb: "GET"
  },
      Jj = {
    kb: !0,
    endpoint: "getRecaptchaParam",
    Tb: "GET",
    F: function F(a) {
      if (!a.recaptchaSiteKey) throw new t("internal-error");
    }
  },
      Bj = {
    endpoint: "resetPassword",
    B: Aj,
    Z: "email",
    C: !0
  },
      mj = {
    endpoint: "sendVerificationCode",
    M: ["phoneNumber", "recaptchaToken"],
    Z: "sessionInfo",
    C: !0
  },
      gj = {
    endpoint: "setAccountInfo",
    M: ["idToken"],
    B: $i,
    U: !0
  },
      ch = {
    endpoint: "setAccountInfo",
    M: ["idToken"],
    B: function B(a) {
      $i(a);
      if (!a.password) throw new t("weak-password");
    },
    F: P,
    U: !0
  },
      fj = {
    endpoint: "signupNewUser",
    F: P,
    U: !0,
    C: !0
  },
      oj = {
    endpoint: "accounts/mfaEnrollment:start",
    M: ["idToken", "phoneEnrollmentInfo"],
    B: function B(a) {
      if (!a.phoneEnrollmentInfo) throw new t("internal-error");
      if (!a.phoneEnrollmentInfo.phoneNumber) throw new t("missing-phone-number");
      if (!a.phoneEnrollmentInfo.recaptchaToken) throw new t("missing-app-credential");
    },
    F: function F(a) {
      if (!a.phoneSessionInfo || !a.phoneSessionInfo.sessionInfo) throw new t("internal-error");
    },
    C: !0,
    Na: !0
  },
      qj = {
    endpoint: "accounts/mfaSignIn:start",
    M: ["mfaPendingCredential", "mfaEnrollmentId", "phoneSignInInfo"],
    B: function B(a) {
      if (!a.phoneSignInInfo || !a.phoneSignInInfo.recaptchaToken) throw new t("missing-app-credential");
    },
    F: function F(a) {
      if (!a.phoneResponseInfo || !a.phoneResponseInfo.sessionInfo) throw new t("internal-error");
    },
    C: !0,
    Na: !0
  },
      xj = {
    endpoint: "verifyAssertion",
    B: tj,
    Xa: uj,
    F: vj,
    U: !0,
    C: !0
  },
      zj = {
    endpoint: "verifyAssertion",
    B: tj,
    Xa: uj,
    F: function F(a) {
      if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new t("user-not-found");
      if (a.errorMessage) throw wj(a.errorMessage);
      P(a);
    },
    U: !0,
    C: !0
  },
      yj = {
    endpoint: "verifyAssertion",
    B: function B(a) {
      tj(a);
      if (!a.idToken) throw new t("internal-error");
    },
    Xa: uj,
    F: vj,
    U: !0
  },
      Kj = {
    endpoint: "verifyCustomToken",
    B: function B(a) {
      if (!a.token) throw new t("invalid-custom-token");
    },
    F: P,
    U: !0,
    C: !0
  },
      ah = {
    endpoint: "verifyPassword",
    B: function B(a) {
      Zi(a);
      if (!a.password) throw new t("wrong-password");
    },
    F: P,
    U: !0,
    C: !0
  },
      nj = {
    endpoint: "verifyPhoneNumber",
    B: ej,
    F: P,
    C: !0
  },
      ih = {
    endpoint: "verifyPhoneNumber",
    B: function B(a) {
      if (!a.idToken) throw new t("internal-error");
      ej(a);
    },
    F: function F(a) {
      if (a.temporaryProof) throw a.code = "credential-already-in-use", zh(a);
      P(a);
    }
  },
      jh = {
    Gb: {
      USER_NOT_FOUND: "user-not-found"
    },
    endpoint: "verifyPhoneNumber",
    B: ej,
    F: P,
    C: !0
  },
      Lj = {
    endpoint: "accounts/mfaEnrollment:withdraw",
    M: ["idToken", "mfaEnrollmentId"],
    F: function F(a) {
      if (!!a[Dg] ^ !!a.refreshToken) throw new t("internal-error");
    },
    C: !0,
    Na: !0
  };

  function O(a, b, c) {
    if (!mf(c, b.M)) return F(new t("internal-error"));
    var d = !!b.Na,
        e = b.Tb || "POST",
        f;
    return E(c).then(b.B).then(function () {
      b.U && (c.returnSecureToken = !0);
      b.C && a.b && "undefined" === typeof c.tenantId && (c.tenantId = a.b);
      return d ? Yi(a, a.h, b.endpoint, e, c, b.Gb, b.kb || !1) : Yi(a, a.i, b.endpoint, e, c, b.Gb, b.kb || !1);
    }).then(function (g) {
      f = g;
      return b.Xa ? b.Xa(c, f) : f;
    }).then(b.F).then(function () {
      if (!b.Z) return f;
      if (!(b.Z in f)) throw new t("internal-error");
      return f[b.Z];
    });
  }

  function wj(a) {
    return Xi({
      error: {
        errors: [{
          message: a
        }],
        code: 400,
        message: a
      }
    });
  }

  function Xi(a, b) {
    var c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";
    var d = {
      keyInvalid: "invalid-api-key",
      ipRefererBlocked: "app-not-authorized"
    };
    if (c = d[c] ? new t(d[c]) : null) return c;
    c = a.error && a.error.message || "";
    d = {
      INVALID_CUSTOM_TOKEN: "invalid-custom-token",
      CREDENTIAL_MISMATCH: "custom-token-mismatch",
      MISSING_CUSTOM_TOKEN: "internal-error",
      INVALID_IDENTIFIER: "invalid-email",
      MISSING_CONTINUE_URI: "internal-error",
      INVALID_EMAIL: "invalid-email",
      INVALID_PASSWORD: "wrong-password",
      USER_DISABLED: "user-disabled",
      MISSING_PASSWORD: "internal-error",
      EMAIL_EXISTS: "email-already-in-use",
      PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
      INVALID_IDP_RESPONSE: "invalid-credential",
      INVALID_PENDING_TOKEN: "invalid-credential",
      FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
      MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",
      INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
      INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
      INVALID_SENDER: "invalid-sender",
      EMAIL_NOT_FOUND: "user-not-found",
      RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
      EXPIRED_OOB_CODE: "expired-action-code",
      INVALID_OOB_CODE: "invalid-action-code",
      MISSING_OOB_CODE: "internal-error",
      INVALID_PROVIDER_ID: "invalid-provider-id",
      CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
      INVALID_ID_TOKEN: "invalid-user-token",
      TOKEN_EXPIRED: "user-token-expired",
      USER_NOT_FOUND: "user-token-expired",
      CORS_UNSUPPORTED: "cors-unsupported",
      DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
      INVALID_APP_ID: "invalid-app-id",
      TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
      WEAK_PASSWORD: "weak-password",
      OPERATION_NOT_ALLOWED: "operation-not-allowed",
      USER_CANCELLED: "user-cancelled",
      CAPTCHA_CHECK_FAILED: "captcha-check-failed",
      INVALID_APP_CREDENTIAL: "invalid-app-credential",
      INVALID_CODE: "invalid-verification-code",
      INVALID_PHONE_NUMBER: "invalid-phone-number",
      INVALID_SESSION_INFO: "invalid-verification-id",
      INVALID_TEMPORARY_PROOF: "invalid-credential",
      MISSING_APP_CREDENTIAL: "missing-app-credential",
      MISSING_CODE: "missing-verification-code",
      MISSING_PHONE_NUMBER: "missing-phone-number",
      MISSING_SESSION_INFO: "missing-verification-id",
      QUOTA_EXCEEDED: "quota-exceeded",
      SESSION_EXPIRED: "code-expired",
      REJECTED_CREDENTIAL: "rejected-credential",
      INVALID_CONTINUE_URI: "invalid-continue-uri",
      MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
      MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
      UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
      INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",
      INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
      INVALID_CERT_HASH: "invalid-cert-hash",
      UNSUPPORTED_TENANT_OPERATION: "unsupported-tenant-operation",
      INVALID_TENANT_ID: "invalid-tenant-id",
      TENANT_ID_MISMATCH: "tenant-id-mismatch",
      ADMIN_ONLY_OPERATION: "admin-restricted-operation",
      INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",
      MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",
      MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",
      MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",
      EMAIL_CHANGE_NEEDS_VERIFICATION: "email-change-needs-verification",
      SECOND_FACTOR_EXISTS: "second-factor-already-in-use",
      SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",
      UNSUPPORTED_FIRST_FACTOR: "unsupported-first-factor",
      UNVERIFIED_EMAIL: "unverified-email"
    };
    z(d, b || {});
    b = (b = c.match(/^[^\s]+\s*:\s*([\s\S]*)$/)) && 1 < b.length ? b[1] : void 0;

    for (var e in d) {
      if (0 === c.indexOf(e)) return new t(d[e], b);
    }

    !b && a && (b = Ue(a));
    return new t("internal-error", b);
  }

  ;

  function Mj(a) {
    this.b = a;
    this.a = null;
    this.qb = Nj(this);
  }

  function Nj(a) {
    return Oj().then(function () {
      return new D(function (b, c) {
        L("gapi.iframes.getContext")().open({
          where: document.body,
          url: a.b,
          messageHandlersFilter: L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),
          attributes: {
            style: {
              position: "absolute",
              top: "-100px",
              width: "1px",
              height: "1px"
            }
          },
          dontclear: !0
        }, function (d) {
          function e() {
            clearTimeout(f);
            b();
          }

          a.a = d;
          a.a.restyle({
            setHideOnLeave: !1
          });
          var f = setTimeout(function () {
            c(Error("Network Error"));
          }, Pj.get());
          d.ping(e).then(e, function () {
            c(Error("Network Error"));
          });
        });
      });
    });
  }

  function Qj(a, b) {
    return a.qb.then(function () {
      return new D(function (c) {
        a.a.send(b.type, b, c, L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
      });
    });
  }

  function Rj(a, b) {
    a.qb.then(function () {
      a.a.register("authEvent", b, L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
    });
  }

  var Sj = new qb(rb, "https://apis.google.com/js/api.js?onload=%{onload}"),
      Tj = new Ze(3E4, 6E4),
      Pj = new Ze(5E3, 15E3),
      Uj = null;

  function Oj() {
    return Uj ? Uj : Uj = new D(function (a, b) {
      function c() {
        Ye();
        L("gapi.load")("gapi.iframes", {
          callback: a,
          ontimeout: function ontimeout() {
            Ye();
            b(Error("Network Error"));
          },
          timeout: Tj.get()
        });
      }

      if (L("gapi.iframes.Iframe")) a();else if (L("gapi.load")) c();else {
        var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();

        l[d] = function () {
          L("gapi.load") ? c() : b(Error("Network Error"));
        };

        d = zb(Sj, {
          onload: d
        });
        E(Bi(d)).o(function () {
          b(Error("Network Error"));
        });
      }
    }).o(function (a) {
      Uj = null;
      throw a;
    });
  }

  ;

  function Vj(a, b, c, d) {
    this.l = a;
    this.i = b;
    this.h = c;
    this.g = d;
    this.f = null;
    this.g ? (a = be(this.g.url), a = ce(a.f, a.a, a.g, "/emulator/auth/iframe")) : a = ce("https", this.l, null, "/__/auth/iframe");
    this.a = a;
    J(this.a, "apiKey", this.i);
    J(this.a, "appName", this.h);
    this.b = null;
    this.c = [];
  }

  Vj.prototype.toString = function () {
    this.f ? J(this.a, "v", this.f) : ie(this.a.b, "v");
    this.b ? J(this.a, "eid", this.b) : ie(this.a.b, "eid");
    this.c.length ? J(this.a, "fw", this.c.join(",")) : ie(this.a.b, "fw");
    return this.a.toString();
  };

  function Wj(a, b, c, d, e, f) {
    this.u = a;
    this.s = b;
    this.c = c;
    this.v = d;
    this.m = f;
    this.h = this.g = this.l = null;
    this.a = e;
    this.i = this.f = null;
  }

  Wj.prototype.xb = function (a) {
    this.i = a;
    return this;
  };

  Wj.prototype.toString = function () {
    if (this.m) {
      var a = be(this.m.url);
      a = ce(a.f, a.a, a.g, "/emulator/auth/handler");
    } else a = ce("https", this.u, null, "/__/auth/handler");

    J(a, "apiKey", this.s);
    J(a, "appName", this.c);
    J(a, "authType", this.v);

    if (this.a.isOAuthProvider) {
      var b = this.a;

      try {
        var c = _app["default"].app(this.c).auth().ka();
      } catch (h) {
        c = null;
      }

      b.nb = c;
      J(a, "providerId", this.a.providerId);
      c = this.a;
      b = Ve(c.Hb);

      for (var d in b) {
        b[d] = b[d].toString();
      }

      d = c.Pc;
      b = nb(b);

      for (var e = 0; e < d.length; e++) {
        var f = d[e];
        f in b && delete b[f];
      }

      c.ob && c.nb && !b[c.ob] && (b[c.ob] = c.nb);
      mb(b) || J(a, "customParameters", Ue(b));
    }

    "function" === typeof this.a.Pb && (c = this.a.Pb(), c.length && J(a, "scopes", c.join(",")));
    this.l ? J(a, "redirectUrl", this.l) : ie(a.b, "redirectUrl");
    this.g ? J(a, "eventId", this.g) : ie(a.b, "eventId");
    this.h ? J(a, "v", this.h) : ie(a.b, "v");
    if (this.b) for (var g in this.b) {
      this.b.hasOwnProperty(g) && !ae(a, g) && J(a, g, this.b[g]);
    }
    this.i ? J(a, "tid", this.i) : ie(a.b, "tid");
    this.f ? J(a, "eid", this.f) : ie(a.b, "eid");
    g = Xj(this.c);
    g.length && J(a, "fw", g.join(","));
    return a.toString();
  };

  function Xj(a) {
    try {
      return _app["default"].app(a).auth().Ga();
    } catch (b) {
      return [];
    }
  }

  function Yj(a, b, c, d, e, f) {
    this.s = a;
    this.g = b;
    this.b = c;
    this.f = f;
    this.c = d || null;
    this.h = e || null;
    this.l = this.u = this.A = null;
    this.i = [];
    this.v = this.a = null;
  }

  function Zj(a) {
    var b = re();
    return cj(a).then(function (c) {
      a: {
        var d = be(b),
            e = d.f;
        d = d.a;

        for (var f = 0; f < c.length; f++) {
          var g = c[f];
          var h = d;
          var n = e;
          0 == g.indexOf("chrome-extension://") ? h = be(g).a == h && "chrome-extension" == n : "http" != n && "https" != n ? h = !1 : Ce.test(g) ? h = h == g : (g = g.split(".").join("\\."), h = new RegExp("^(.+\\." + g + "|" + g + ")$", "i").test(h));

          if (h) {
            c = !0;
            break a;
          }
        }

        c = !1;
      }

      if (!c) throw new xh(re());
    });
  }

  function ak(a) {
    if (a.v) return a.v;
    a.v = Ee().then(function () {
      if (!a.u) {
        var b = a.c,
            c = a.h,
            d = Xj(a.b),
            e = new Vj(a.s, a.g, a.b, a.f);
        e.f = b;
        e.b = c;
        e.c = Za(d || []);
        a.u = e.toString();
      }

      a.m = new Mj(a.u);
      bk(a);
    });
    return a.v;
  }

  k = Yj.prototype;

  k.Nb = function (a, b, c) {
    var d = new t("popup-closed-by-user"),
        e = new t("web-storage-unsupported"),
        f = this,
        g = !1;
    return this.la().then(function () {
      ck(f).then(function (h) {
        h || (a && ye(a), b(e), g = !0);
      });
    }).o(function () {}).then(function () {
      if (!g) return Be(a);
    }).then(function () {
      if (!g) return Ed(c).then(function () {
        b(d);
      });
    });
  };

  k.Wb = function () {
    var a = K();
    return !Te(a) && !Xe(a);
  };

  k.Sb = function () {
    return !1;
  };

  k.Lb = function (a, b, c, d, e, f, g, h) {
    if (!a) return F(new t("popup-blocked"));
    if (g && !Te()) return this.la().o(function (p) {
      ye(a);
      e(p);
    }), d(), E();
    this.a || (this.a = Zj(dk(this)));
    var n = this;
    return this.a.then(function () {
      var p = n.la().o(function (v) {
        ye(a);
        e(v);
        throw v;
      });
      d();
      return p;
    }).then(function () {
      rh(c);

      if (!g) {
        var p = ek(n.s, n.g, n.b, b, c, null, f, n.c, void 0, n.h, h, n.f);
        se(p, a);
      }
    }).o(function (p) {
      "auth/network-request-failed" == p.code && (n.a = null);
      throw p;
    });
  };

  function dk(a) {
    a.l || (a.A = a.c ? Oe(a.c, Xj(a.b)) : null, a.l = new Ii(a.g, Ca(a.h), a.A), a.f && Pi(a.l, a.f));
    return a.l;
  }

  k.Mb = function (a, b, c, d) {
    this.a || (this.a = Zj(dk(this)));
    var e = this;
    return this.a.then(function () {
      rh(b);
      var f = ek(e.s, e.g, e.b, a, b, re(), c, e.c, void 0, e.h, d, e.f);
      se(f);
    }).o(function (f) {
      "auth/network-request-failed" == f.code && (e.a = null);
      throw f;
    });
  };

  k.la = function () {
    var a = this;
    return ak(this).then(function () {
      return a.m.qb;
    }).o(function () {
      a.a = null;
      throw new t("network-request-failed");
    });
  };

  k.Zb = function () {
    return !0;
  };

  function ek(a, b, c, d, e, f, g, h, n, p, v, B) {
    a = new Wj(a, b, c, d, e, B);
    a.l = f;
    a.g = g;
    a.h = h;
    a.b = nb(n || null);
    a.f = p;
    return a.xb(v).toString();
  }

  function bk(a) {
    if (!a.m) throw Error("IfcHandler must be initialized!");
    Rj(a.m, function (b) {
      var c = {};

      if (b && b.authEvent) {
        var d = !1;
        b = th(b.authEvent);

        for (c = 0; c < a.i.length; c++) {
          d = a.i[c](b) || d;
        }

        c = {};
        c.status = d ? "ACK" : "ERROR";
        return E(c);
      }

      c.status = "ERROR";
      return E(c);
    });
  }

  function ck(a) {
    var b = {
      type: "webStorageSupport"
    };
    return ak(a).then(function () {
      return Qj(a.m, b);
    }).then(function (c) {
      if (c && c.length && "undefined" !== typeof c[0].webStorageSupport) return c[0].webStorageSupport;
      throw Error();
    });
  }

  k.Ea = function (a) {
    this.i.push(a);
  };

  k.Ra = function (a) {
    Xa(this.i, function (b) {
      return b == a;
    });
  };

  function fk(a) {
    this.a = a || _app["default"].INTERNAL.reactNative && _app["default"].INTERNAL.reactNative.AsyncStorage;
    if (!this.a) throw new t("internal-error", "The React Native compatibility library was not found.");
    this.type = "asyncStorage";
  }

  k = fk.prototype;

  k.get = function (a) {
    return E(this.a.getItem(a)).then(function (b) {
      return b && We(b);
    });
  };

  k.set = function (a, b) {
    return E(this.a.setItem(a, Ue(b)));
  };

  k.T = function (a) {
    return E(this.a.removeItem(a));
  };

  k.ca = function () {};

  k.ia = function () {};

  function gk(a) {
    this.b = a;
    this.a = {};
    this.f = q(this.c, this);
  }

  var hk = [];

  function ik() {
    var a = Je() ? self : null;
    w(hk, function (c) {
      c.b == a && (b = c);
    });

    if (!b) {
      var b = new gk(a);
      hk.push(b);
    }

    return b;
  }

  gk.prototype.c = function (a) {
    var b = a.data.eventType,
        c = a.data.eventId,
        d = this.a[b];

    if (d && 0 < d.length) {
      a.ports[0].postMessage({
        status: "ack",
        eventId: c,
        eventType: b,
        response: null
      });
      var e = [];
      w(d, function (f) {
        e.push(E().then(function () {
          return f(a.origin, a.data.data);
        }));
      });
      Jc(e).then(function (f) {
        var g = [];
        w(f, function (h) {
          g.push({
            fulfilled: h.Ob,
            value: h.value,
            reason: h.reason ? h.reason.message : void 0
          });
        });
        w(g, function (h) {
          for (var n in h) {
            "undefined" === typeof h[n] && delete h[n];
          }
        });
        a.ports[0].postMessage({
          status: "done",
          eventId: c,
          eventType: b,
          response: g
        });
      });
    }
  };

  function jk(a, b, c) {
    mb(a.a) && a.b.addEventListener("message", a.f);
    "undefined" === typeof a.a[b] && (a.a[b] = []);
    a.a[b].push(c);
  }

  ;

  function kk(a) {
    this.a = a;
  }

  kk.prototype.postMessage = function (a, b) {
    this.a.postMessage(a, b);
  };

  function lk(a) {
    this.c = a;
    this.b = !1;
    this.a = [];
  }

  function mk(a, b, c, d) {
    var e,
        f = c || {},
        g,
        h,
        n,
        p = null;
    if (a.b) return F(Error("connection_unavailable"));
    var v = d ? 800 : 50,
        B = "undefined" !== typeof MessageChannel ? new MessageChannel() : null;
    return new D(function (A, Q) {
      B ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), B.port1.start(), h = setTimeout(function () {
        Q(Error("unsupported_event"));
      }, v), g = function g(xa) {
        xa.data.eventId === e && ("ack" === xa.data.status ? (clearTimeout(h), n = setTimeout(function () {
          Q(Error("timeout"));
        }, 3E3)) : "done" === xa.data.status ? (clearTimeout(n), "undefined" !== typeof xa.data.response ? A(xa.data.response) : Q(Error("unknown_error"))) : (clearTimeout(h), clearTimeout(n), Q(Error("invalid_response"))));
      }, p = {
        messageChannel: B,
        onMessage: g
      }, a.a.push(p), B.port1.addEventListener("message", g), a.c.postMessage({
        eventType: b,
        eventId: e,
        data: f
      }, [B.port2])) : Q(Error("connection_unavailable"));
    }).then(function (A) {
      nk(a, p);
      return A;
    }).o(function (A) {
      nk(a, p);
      throw A;
    });
  }

  function nk(a, b) {
    if (b) {
      var c = b.messageChannel,
          d = b.onMessage;
      c && (c.port1.removeEventListener("message", d), c.port1.close());
      Xa(a.a, function (e) {
        return e == b;
      });
    }
  }

  lk.prototype.close = function () {
    for (; 0 < this.a.length;) {
      nk(this, this.a[0]);
    }

    this.b = !0;
  };

  function ok() {
    if (!pk()) throw new t("web-storage-unsupported");
    this.c = {};
    this.a = [];
    this.b = 0;
    this.v = l.indexedDB;
    this.type = "indexedDB";
    this.g = this.m = this.f = this.l = null;
    this.s = !1;
    this.i = null;
    var a = this;
    Je() && self ? (this.m = ik(), jk(this.m, "keyChanged", function (b, c) {
      return qk(a).then(function (d) {
        0 < d.length && w(a.a, function (e) {
          e(d);
        });
        return {
          keyProcessed: Va(d, c.key)
        };
      });
    }), jk(this.m, "ping", function () {
      return E(["keyChanged"]);
    })) : ef().then(function (b) {
      if (a.i = b) a.g = new lk(new kk(b)), mk(a.g, "ping", null, !0).then(function (c) {
        c[0].fulfilled && Va(c[0].value, "keyChanged") && (a.s = !0);
      }).o(function () {});
    });
  }

  var rk;

  function sk(a) {
    return new D(function (b, c) {
      var d = a.v.deleteDatabase("firebaseLocalStorageDb");

      d.onsuccess = function () {
        b();
      };

      d.onerror = function (e) {
        c(Error(e.target.error));
      };
    });
  }

  function tk(a) {
    return new D(function (b, c) {
      var d = a.v.open("firebaseLocalStorageDb", 1);

      d.onerror = function (e) {
        try {
          e.preventDefault();
        } catch (f) {}

        c(Error(e.target.error));
      };

      d.onupgradeneeded = function (e) {
        e = e.target.result;

        try {
          e.createObjectStore("firebaseLocalStorage", {
            keyPath: "fbase_key"
          });
        } catch (f) {
          c(f);
        }
      };

      d.onsuccess = function (e) {
        e = e.target.result;
        e.objectStoreNames.contains("firebaseLocalStorage") ? b(e) : sk(a).then(function () {
          return tk(a);
        }).then(function (f) {
          b(f);
        }).o(function (f) {
          c(f);
        });
      };
    });
  }

  function uk(a) {
    a.h || (a.h = tk(a));
    return a.h;
  }

  function vk(a, b) {
    function c(e, f) {
      uk(a).then(b).then(e).o(function (g) {
        if (3 < ++d) f(g);else return uk(a).then(function (h) {
          h.close();
          a.h = void 0;
          return c(e, f);
        }).o(function (h) {
          f(h);
        });
      });
    }

    var d = 0;
    return new D(c);
  }

  function pk() {
    try {
      return !!l.indexedDB;
    } catch (a) {
      return !1;
    }
  }

  function wk(a) {
    return a.objectStore("firebaseLocalStorage");
  }

  function xk(a, b) {
    return a.transaction(["firebaseLocalStorage"], b ? "readwrite" : "readonly");
  }

  function yk(a) {
    return new D(function (b, c) {
      a.onsuccess = function (d) {
        d && d.target ? b(d.target.result) : b();
      };

      a.onerror = function (d) {
        c(d.target.error);
      };
    });
  }

  k = ok.prototype;

  k.set = function (a, b) {
    var c = this,
        d = !1;
    return vk(this, function (e) {
      e = wk(xk(e, !0));
      return yk(e.get(a));
    }).then(function (e) {
      return vk(c, function (f) {
        f = wk(xk(f, !0));
        if (e) return e.value = b, yk(f.put(e));
        c.b++;
        d = !0;
        var g = {};
        g.fbase_key = a;
        g.value = b;
        return yk(f.add(g));
      });
    }).then(function () {
      c.c[a] = b;
      return zk(c, a);
    }).na(function () {
      d && c.b--;
    });
  };

  function zk(a, b) {
    return a.g && a.i && df() === a.i ? mk(a.g, "keyChanged", {
      key: b
    }, a.s).then(function () {}).o(function () {}) : E();
  }

  k.get = function (a) {
    return vk(this, function (b) {
      return yk(wk(xk(b, !1)).get(a));
    }).then(function (b) {
      return b && b.value;
    });
  };

  k.T = function (a) {
    var b = this,
        c = !1;
    return vk(this, function (d) {
      c = !0;
      b.b++;
      return yk(wk(xk(d, !0))["delete"](a));
    }).then(function () {
      delete b.c[a];
      return zk(b, a);
    }).na(function () {
      c && b.b--;
    });
  };

  function qk(a) {
    return uk(a).then(function (b) {
      var c = wk(xk(b, !1));
      return c.getAll ? yk(c.getAll()) : new D(function (d, e) {
        var f = [],
            g = c.openCursor();

        g.onsuccess = function (h) {
          (h = h.target.result) ? (f.push(h.value), h["continue"]()) : d(f);
        };

        g.onerror = function (h) {
          e(h.target.error);
        };
      });
    }).then(function (b) {
      var c = {},
          d = [];

      if (0 == a.b) {
        for (d = 0; d < b.length; d++) {
          c[b[d].fbase_key] = b[d].value;
        }

        d = te(a.c, c);
        a.c = c;
      }

      return d;
    });
  }

  k.ca = function (a) {
    0 == this.a.length && Ak(this);
    this.a.push(a);
  };

  k.ia = function (a) {
    Xa(this.a, function (b) {
      return b == a;
    });
    0 == this.a.length && Bk(this);
  };

  function Ak(a) {
    function b() {
      a.f = setTimeout(function () {
        a.l = qk(a).then(function (c) {
          0 < c.length && w(a.a, function (d) {
            d(c);
          });
        }).then(function () {
          b();
        }).o(function (c) {
          "STOP_EVENT" != c.message && b();
        });
      }, 800);
    }

    Bk(a);
    b();
  }

  function Bk(a) {
    a.l && a.l.cancel("STOP_EVENT");
    a.f && (clearTimeout(a.f), a.f = null);
  }

  ;

  function Ck(a) {
    var b = this,
        c = null;
    this.a = [];
    this.type = "indexedDB";
    this.c = a;
    this.b = E().then(function () {
      if (pk()) {
        var d = Qe(),
            e = "__sak" + d;
        rk || (rk = new ok());
        c = rk;
        return c.set(e, d).then(function () {
          return c.get(e);
        }).then(function (f) {
          if (f !== d) throw Error("indexedDB not supported!");
          return c.T(e);
        }).then(function () {
          return c;
        }).o(function () {
          return b.c;
        });
      }

      return b.c;
    }).then(function (d) {
      b.type = d.type;
      d.ca(function (e) {
        w(b.a, function (f) {
          f(e);
        });
      });
      return d;
    });
  }

  k = Ck.prototype;

  k.get = function (a) {
    return this.b.then(function (b) {
      return b.get(a);
    });
  };

  k.set = function (a, b) {
    return this.b.then(function (c) {
      return c.set(a, b);
    });
  };

  k.T = function (a) {
    return this.b.then(function (b) {
      return b.T(a);
    });
  };

  k.ca = function (a) {
    this.a.push(a);
  };

  k.ia = function (a) {
    Xa(this.a, function (b) {
      return b == a;
    });
  };

  function Dk() {
    this.a = {};
    this.type = "inMemory";
  }

  k = Dk.prototype;

  k.get = function (a) {
    return E(this.a[a]);
  };

  k.set = function (a, b) {
    this.a[a] = b;
    return E();
  };

  k.T = function (a) {
    delete this.a[a];
    return E();
  };

  k.ca = function () {};

  k.ia = function () {};

  function Ek() {
    if (!Fk()) {
      if ("Node" == Ke()) throw new t("internal-error", "The LocalStorage compatibility library was not found.");
      throw new t("web-storage-unsupported");
    }

    this.a = Gk() || _app["default"].INTERNAL.node.localStorage;
    this.type = "localStorage";
  }

  function Gk() {
    try {
      var a = l.localStorage,
          b = Qe();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }

  function Fk() {
    var a = "Node" == Ke();
    a = Gk() || a && _app["default"].INTERNAL.node && _app["default"].INTERNAL.node.localStorage;
    if (!a) return !1;

    try {
      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
    } catch (b) {
      return !1;
    }
  }

  k = Ek.prototype;

  k.get = function (a) {
    var b = this;
    return E().then(function () {
      var c = b.a.getItem(a);
      return We(c);
    });
  };

  k.set = function (a, b) {
    var c = this;
    return E().then(function () {
      var d = Ue(b);
      null === d ? c.T(a) : c.a.setItem(a, d);
    });
  };

  k.T = function (a) {
    var b = this;
    return E().then(function () {
      b.a.removeItem(a);
    });
  };

  k.ca = function (a) {
    l.window && nd(l.window, "storage", a);
  };

  k.ia = function (a) {
    l.window && H(l.window, "storage", a);
  };

  function Hk() {
    this.type = "nullStorage";
  }

  k = Hk.prototype;

  k.get = function () {
    return E(null);
  };

  k.set = function () {
    return E();
  };

  k.T = function () {
    return E();
  };

  k.ca = function () {};

  k.ia = function () {};

  function Ik() {
    if (!Jk()) {
      if ("Node" == Ke()) throw new t("internal-error", "The SessionStorage compatibility library was not found.");
      throw new t("web-storage-unsupported");
    }

    this.a = Kk() || _app["default"].INTERNAL.node.sessionStorage;
    this.type = "sessionStorage";
  }

  function Kk() {
    try {
      var a = l.sessionStorage,
          b = Qe();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }

  function Jk() {
    var a = "Node" == Ke();
    a = Kk() || a && _app["default"].INTERNAL.node && _app["default"].INTERNAL.node.sessionStorage;
    if (!a) return !1;

    try {
      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
    } catch (b) {
      return !1;
    }
  }

  k = Ik.prototype;

  k.get = function (a) {
    var b = this;
    return E().then(function () {
      var c = b.a.getItem(a);
      return We(c);
    });
  };

  k.set = function (a, b) {
    var c = this;
    return E().then(function () {
      var d = Ue(b);
      null === d ? c.T(a) : c.a.setItem(a, d);
    });
  };

  k.T = function (a) {
    var b = this;
    return E().then(function () {
      b.a.removeItem(a);
    });
  };

  k.ca = function () {};

  k.ia = function () {};

  function Lk() {
    var a = {};
    a.Browser = Mk;
    a.Node = Nk;
    a.ReactNative = Ok;
    a.Worker = Pk;
    this.a = a[Ke()];
  }

  var Qk,
      Mk = {
    D: Ek,
    ab: Ik
  },
      Nk = {
    D: Ek,
    ab: Ik
  },
      Ok = {
    D: fk,
    ab: Hk
  },
      Pk = {
    D: Ek,
    ab: Hk
  };
  var Rk = {
    qd: "local",
    NONE: "none",
    sd: "session"
  };

  function Sk(a) {
    var b = new t("invalid-persistence-type"),
        c = new t("unsupported-persistence-type");

    a: {
      for (d in Rk) {
        if (Rk[d] == a) {
          var d = !0;
          break a;
        }
      }

      d = !1;
    }

    if (!d || "string" !== typeof a) throw b;

    switch (Ke()) {
      case "ReactNative":
        if ("session" === a) throw c;
        break;

      case "Node":
        if ("none" !== a) throw c;
        break;

      case "Worker":
        if ("session" === a || !pk() && "none" !== a) throw c;
        break;

      default:
        if (!Pe() && "none" !== a) throw c;
    }
  }

  function Tk() {
    var a = !Xe(K()) && Ie() ? !0 : !1,
        b = Te(),
        c = Pe();
    this.v = a;
    this.i = b;
    this.l = c;
    this.a = {};
    Qk || (Qk = new Lk());
    a = Qk;

    try {
      this.g = !qe() && cf() || !l.indexedDB ? new a.a.D() : new Ck(Je() ? new Dk() : new a.a.D());
    } catch (d) {
      this.g = new Dk(), this.i = !0;
    }

    try {
      this.h = new a.a.ab();
    } catch (d) {
      this.h = new Dk();
    }

    this.m = new Dk();
    this.f = q(this.Xb, this);
    this.b = {};
  }

  var Uk;

  function Vk() {
    Uk || (Uk = new Tk());
    return Uk;
  }

  function Wk(a, b) {
    switch (b) {
      case "session":
        return a.h;

      case "none":
        return a.m;

      default:
        return a.g;
    }
  }

  function Xk(a, b) {
    return "firebase:" + a.name + (b ? ":" + b : "");
  }

  function Yk(a, b, c) {
    var d = Xk(b, c),
        e = Wk(a, b.D);
    return a.get(b, c).then(function (f) {
      var g = null;

      try {
        g = We(l.localStorage.getItem(d));
      } catch (h) {}

      if (g && !f) return l.localStorage.removeItem(d), a.set(b, g, c);
      g && f && "localStorage" != e.type && l.localStorage.removeItem(d);
    });
  }

  k = Tk.prototype;

  k.get = function (a, b) {
    return Wk(this, a.D).get(Xk(a, b));
  };

  function Zk(a, b, c) {
    c = Xk(b, c);
    "local" == b.D && (a.b[c] = null);
    return Wk(a, b.D).T(c);
  }

  k.set = function (a, b, c) {
    var d = Xk(a, c),
        e = this,
        f = Wk(this, a.D);
    return f.set(d, b).then(function () {
      return f.get(d);
    }).then(function (g) {
      "local" == a.D && (e.b[d] = g);
    });
  };

  k.addListener = function (a, b, c) {
    a = Xk(a, b);
    this.l && (this.b[a] = l.localStorage.getItem(a));
    mb(this.a) && (Wk(this, "local").ca(this.f), this.i || (qe() || !cf()) && l.indexedDB || !this.l || $k(this));
    this.a[a] || (this.a[a] = []);
    this.a[a].push(c);
  };

  k.removeListener = function (a, b, c) {
    a = Xk(a, b);
    this.a[a] && (Xa(this.a[a], function (d) {
      return d == c;
    }), 0 == this.a[a].length && delete this.a[a]);
    mb(this.a) && (Wk(this, "local").ia(this.f), al(this));
  };

  function $k(a) {
    al(a);
    a.c = setInterval(function () {
      for (var b in a.a) {
        var c = l.localStorage.getItem(b),
            d = a.b[b];
        c != d && (a.b[b] = c, c = new bd({
          type: "storage",
          key: b,
          target: window,
          oldValue: d,
          newValue: c,
          a: !0
        }), a.Xb(c));
      }
    }, 1E3);
  }

  function al(a) {
    a.c && (clearInterval(a.c), a.c = null);
  }

  k.Xb = function (a) {
    if (a && a.g) {
      var b = a.a.key;
      if (null == b) for (var c in this.a) {
        var d = this.b[c];
        "undefined" === typeof d && (d = null);
        var e = l.localStorage.getItem(c);
        e !== d && (this.b[c] = e, this.lb(c));
      } else if (0 == b.indexOf("firebase:") && this.a[b]) {
        "undefined" !== typeof a.a.a ? Wk(this, "local").ia(this.f) : al(this);
        if (this.v) if (c = l.localStorage.getItem(b), d = a.a.newValue, d !== c) null !== d ? l.localStorage.setItem(b, d) : l.localStorage.removeItem(b);else if (this.b[b] === d && "undefined" === typeof a.a.a) return;
        var f = this;

        c = function c() {
          if ("undefined" !== typeof a.a.a || f.b[b] !== l.localStorage.getItem(b)) f.b[b] = l.localStorage.getItem(b), f.lb(b);
        };

        Wb && ic && 10 == ic && l.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
      }
    } else w(a, q(this.lb, this));
  };

  k.lb = function (a) {
    this.a[a] && w(this.a[a], function (b) {
      b();
    });
  };

  function bl(a) {
    this.a = a;
    this.b = Vk();
  }

  var cl = {
    name: "authEvent",
    D: "local"
  };

  function dl(a) {
    return a.b.get(cl, a.a).then(function (b) {
      return th(b);
    });
  }

  ;

  function el() {
    this.a = Vk();
  }

  ;

  function fl() {
    this.b = -1;
  }

  ;

  function gl(a, b) {
    this.b = hl;
    this.f = l.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
    this.g = this.c = 0;
    this.a = [];
    this.h = a;
    this.i = b;
    this.l = l.Int32Array ? new Int32Array(64) : Array(64);
    void 0 === il && (l.Int32Array ? il = new Int32Array(jl) : il = jl);
    this.reset();
  }

  var il;
  r(gl, fl);

  for (var hl = 64, kl = hl - 1, ll = [], ml = 0; ml < kl; ml++) {
    ll[ml] = 0;
  }

  var nl = Ya(128, ll);

  gl.prototype.reset = function () {
    this.g = this.c = 0;
    this.a = l.Int32Array ? new Int32Array(this.i) : Za(this.i);
  };

  function ol(a) {
    for (var b = a.f, c = a.l, d = 0, e = 0; e < b.length;) {
      c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;
    }

    for (b = 16; 64 > b; b++) {
      e = c[b - 15] | 0;
      d = c[b - 2] | 0;
      var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0,
          g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
      c[b] = f + g | 0;
    }

    d = a.a[0] | 0;
    e = a.a[1] | 0;
    var h = a.a[2] | 0,
        n = a.a[3] | 0,
        p = a.a[4] | 0,
        v = a.a[5] | 0,
        B = a.a[6] | 0;
    f = a.a[7] | 0;

    for (b = 0; 64 > b; b++) {
      var A = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & h ^ e & h) | 0;
      g = p & v ^ ~p & B;
      f = f + ((p >>> 6 | p << 26) ^ (p >>> 11 | p << 21) ^ (p >>> 25 | p << 7)) | 0;
      g = g + (il[b] | 0) | 0;
      g = f + (g + (c[b] | 0) | 0) | 0;
      f = B;
      B = v;
      v = p;
      p = n + g | 0;
      n = h;
      h = e;
      e = d;
      d = g + A | 0;
    }

    a.a[0] = a.a[0] + d | 0;
    a.a[1] = a.a[1] + e | 0;
    a.a[2] = a.a[2] + h | 0;
    a.a[3] = a.a[3] + n | 0;
    a.a[4] = a.a[4] + p | 0;
    a.a[5] = a.a[5] + v | 0;
    a.a[6] = a.a[6] + B | 0;
    a.a[7] = a.a[7] + f | 0;
  }

  function pl(a, b, c) {
    void 0 === c && (c = b.length);
    var d = 0,
        e = a.c;
    if ("string" === typeof b) for (; d < c;) {
      a.f[e++] = b.charCodeAt(d++), e == a.b && (ol(a), e = 0);
    } else if (na(b)) for (; d < c;) {
      var f = b[d++];
      if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");
      a.f[e++] = f;
      e == a.b && (ol(a), e = 0);
    } else throw Error("message must be string or array");
    a.c = e;
    a.g += c;
  }

  var jl = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];

  function ql() {
    gl.call(this, 8, rl);
  }

  r(ql, gl);
  var rl = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];

  function sl(a, b, c, d, e, f) {
    this.m = a;
    this.h = b;
    this.l = c;
    this.v = d || null;
    this.u = e || null;
    this.s = f;
    this.i = b + ":" + c;
    this.A = new el();
    this.g = new bl(this.i);
    this.f = null;
    this.b = [];
    this.a = this.c = null;
  }

  function tl(a) {
    return new t("invalid-cordova-configuration", a);
  }

  k = sl.prototype;

  k.la = function () {
    return this.Ia ? this.Ia : this.Ia = Fe().then(function () {
      if ("function" !== typeof L("universalLinks.subscribe", l)) throw tl("cordova-universal-links-plugin-fix is not installed");
      if ("undefined" === typeof L("BuildInfo.packageName", l)) throw tl("cordova-plugin-buildinfo is not installed");
      if ("function" !== typeof L("cordova.plugins.browsertab.openUrl", l)) throw tl("cordova-plugin-browsertab is not installed");
      if ("function" !== typeof L("cordova.InAppBrowser.open", l)) throw tl("cordova-plugin-inappbrowser is not installed");
    }, function () {
      throw new t("cordova-not-ready");
    });
  };

  function ul() {
    for (var a = 20, b = []; 0 < a;) {
      b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
    }

    return b.join("");
  }

  function vl(a) {
    var b = new ql();
    pl(b, a);
    a = [];
    var c = 8 * b.g;
    56 > b.c ? pl(b, nl, 56 - b.c) : pl(b, nl, b.b - (b.c - 56));

    for (var d = 63; 56 <= d; d--) {
      b.f[d] = c & 255, c /= 256;
    }

    ol(b);

    for (d = c = 0; d < b.h; d++) {
      for (var e = 24; 0 <= e; e -= 8) {
        a[c++] = b.a[d] >> e & 255;
      }
    }

    return cg(a);
  }

  k.Nb = function (a, b) {
    b(new t("operation-not-supported-in-this-environment"));
    return E();
  };

  k.Lb = function () {
    return F(new t("operation-not-supported-in-this-environment"));
  };

  k.Zb = function () {
    return !1;
  };

  k.Wb = function () {
    return !0;
  };

  k.Sb = function () {
    return !0;
  };

  k.Mb = function (a, b, c, d) {
    if (this.c) return F(new t("redirect-operation-pending"));
    var e = this,
        f = l.document,
        g = null,
        h = null,
        n = null,
        p = null;
    return this.c = E().then(function () {
      rh(b);
      return wl(e);
    }).then(function () {
      return xl(e, a, b, c, d);
    }).then(function () {
      return new D(function (v, B) {
        h = function h() {
          var A = L("cordova.plugins.browsertab.close", l);
          v();
          "function" === typeof A && A();
          e.a && "function" === typeof e.a.close && (e.a.close(), e.a = null);
          return !1;
        };

        e.Ea(h);

        n = function n() {
          g || (g = Ed(2E3).then(function () {
            B(new t("redirect-cancelled-by-user"));
          }));
        };

        p = function p() {
          $e() && n();
        };

        f.addEventListener("resume", n, !1);
        K().toLowerCase().match(/android/) || f.addEventListener("visibilitychange", p, !1);
      }).o(function (v) {
        return yl(e).then(function () {
          throw v;
        });
      });
    }).na(function () {
      n && f.removeEventListener("resume", n, !1);
      p && f.removeEventListener("visibilitychange", p, !1);
      g && g.cancel();
      h && e.Ra(h);
      e.c = null;
    });
  };

  function xl(a, b, c, d, e) {
    var f = ul(),
        g = new sh(b, d, null, f, new t("no-auth-event"), null, e),
        h = L("BuildInfo.packageName", l);
    if ("string" !== typeof h) throw new t("invalid-cordova-configuration");
    var n = L("BuildInfo.displayName", l),
        p = {};
    if (K().toLowerCase().match(/iphone|ipad|ipod/)) p.ibi = h;else if (K().toLowerCase().match(/android/)) p.apn = h;else return F(new t("operation-not-supported-in-this-environment"));
    n && (p.appDisplayName = n);
    f = vl(f);
    p.sessionId = f;
    var v = ek(a.m, a.h, a.l, b, c, null, d, a.v, p, a.u, e, a.s);
    return a.la().then(function () {
      var B = a.i;
      return a.A.a.set(cl, g.w(), B);
    }).then(function () {
      var B = L("cordova.plugins.browsertab.isAvailable", l);
      if ("function" !== typeof B) throw new t("invalid-cordova-configuration");
      var A = null;
      B(function (Q) {
        if (Q) {
          A = L("cordova.plugins.browsertab.openUrl", l);
          if ("function" !== typeof A) throw new t("invalid-cordova-configuration");
          A(v);
        } else {
          A = L("cordova.InAppBrowser.open", l);
          if ("function" !== typeof A) throw new t("invalid-cordova-configuration");
          Q = K();
          a.a = A(v, Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i) || Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i) ? "_blank" : "_system", "location=yes");
        }
      });
    });
  }

  function zl(a, b) {
    for (var c = 0; c < a.b.length; c++) {
      try {
        a.b[c](b);
      } catch (d) {}
    }
  }

  function wl(a) {
    a.f || (a.f = a.la().then(function () {
      return new D(function (b) {
        function c(d) {
          b(d);
          a.Ra(c);
          return !1;
        }

        a.Ea(c);
        Al(a);
      });
    }));
    return a.f;
  }

  function yl(a) {
    var b = null;
    return dl(a.g).then(function (c) {
      b = c;
      c = a.g;
      return Zk(c.b, cl, c.a);
    }).then(function () {
      return b;
    });
  }

  function Al(a) {
    function b(g) {
      d = !0;
      e && e.cancel();
      yl(a).then(function (h) {
        var n = c;

        if (h && g && g.url) {
          var p = null;
          n = xg(g.url);
          -1 != n.indexOf("/__/auth/callback") && (p = be(n), p = We(ae(p, "firebaseError") || null), p = (p = "object" === _typeof(p) ? Aa(p) : null) ? new sh(h.c, h.b, null, null, p, null, h.S()) : new sh(h.c, h.b, n, h.f, null, null, h.S()));
          n = p || c;
        }

        zl(a, n);
      });
    }

    var c = new sh("unknown", null, null, null, new t("no-auth-event")),
        d = !1,
        e = Ed(500).then(function () {
      return yl(a).then(function () {
        d || zl(a, c);
      });
    }),
        f = l.handleOpenURL;

    l.handleOpenURL = function (g) {
      0 == g.toLowerCase().indexOf(L("BuildInfo.packageName", l).toLowerCase() + "://") && b({
        url: g
      });
      if ("function" === typeof f) try {
        f(g);
      } catch (h) {
        console.error(h);
      }
    };

    vh || (vh = new uh());
    wh(b);
  }

  k.Ea = function (a) {
    this.b.push(a);
    wl(this).o(function (b) {
      "auth/invalid-cordova-configuration" === b.code && (b = new sh("unknown", null, null, null, new t("no-auth-event")), a(b));
    });
  };

  k.Ra = function (a) {
    Xa(this.b, function (b) {
      return b == a;
    });
  };

  function Bl(a) {
    this.a = a;
    this.b = Vk();
  }

  var Cl = {
    name: "pendingRedirect",
    D: "session"
  };

  function Dl(a) {
    return a.b.set(Cl, "pending", a.a);
  }

  function El(a) {
    return Zk(a.b, Cl, a.a);
  }

  function Fl(a) {
    return a.b.get(Cl, a.a).then(function (b) {
      return "pending" == b;
    });
  }

  ;

  function Gl(a, b, c, d) {
    this.h = {};
    this.u = 0;
    this.O = a;
    this.m = b;
    this.v = c;
    this.G = d;
    this.i = [];
    this.f = !1;
    this.l = q(this.s, this);
    this.b = new Hl();
    this.A = new Il();
    this.g = new Bl(Jl(this.m, this.v));
    this.c = {};
    this.c.unknown = this.b;
    this.c.signInViaRedirect = this.b;
    this.c.linkViaRedirect = this.b;
    this.c.reauthViaRedirect = this.b;
    this.c.signInViaPopup = this.A;
    this.c.linkViaPopup = this.A;
    this.c.reauthViaPopup = this.A;
    this.a = Kl(this.O, this.m, this.v, Da, this.G);
  }

  function Kl(a, b, c, d, e) {
    var f = _app["default"].SDK_VERSION || null;
    return Ge() ? new sl(a, b, c, f, d, e) : new Yj(a, b, c, f, d, e);
  }

  Gl.prototype.reset = function () {
    this.f = !1;
    this.a.Ra(this.l);
    this.a = Kl(this.O, this.m, this.v, null, this.G);
    this.h = {};
  };

  function Ll(a) {
    a.f || (a.f = !0, a.a.Ea(a.l));
    var b = a.a;
    return a.a.la().o(function (c) {
      a.a == b && a.reset();
      throw c;
    });
  }

  function Ml(a) {
    a.a.Wb() && Ll(a).o(function (b) {
      var c = new sh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));
      Nl(b) && a.s(c);
    });
    a.a.Sb() || Ol(a.b);
  }

  function Pl(a, b) {
    Va(a.i, b) || a.i.push(b);
    a.f || Fl(a.g).then(function (c) {
      c ? El(a.g).then(function () {
        Ll(a).o(function (d) {
          var e = new sh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));
          Nl(d) && a.s(e);
        });
      }) : Ml(a);
    }).o(function () {
      Ml(a);
    });
  }

  function Ql(a, b) {
    Xa(a.i, function (c) {
      return c == b;
    });
  }

  Gl.prototype.s = function (a) {
    if (!a) throw new t("invalid-auth-event");
    6E5 <= va() - this.u && (this.h = {}, this.u = 0);
    if (a && a.getUid() && this.h.hasOwnProperty(a.getUid())) return !1;

    for (var b = !1, c = 0; c < this.i.length; c++) {
      var d = this.i[c];

      if (d.Eb(a.c, a.b)) {
        if (b = this.c[a.c]) b.i(a, d), a && (a.f || a.b) && (this.h[a.getUid()] = !0, this.u = va());
        b = !0;
        break;
      }
    }

    Ol(this.b);
    return b;
  };

  var Rl = new Ze(2E3, 1E4),
      Sl = new Ze(3E4, 6E4);

  Gl.prototype.qa = function () {
    return this.b.qa();
  };

  function Tl(a, b, c, d, e, f, g) {
    return a.a.Lb(b, c, d, function () {
      a.f || (a.f = !0, a.a.Ea(a.l));
    }, function () {
      a.reset();
    }, e, f, g);
  }

  function Nl(a) {
    return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
  }

  function Ul(a, b, c, d, e) {
    var f;
    return Dl(a.g).then(function () {
      return a.a.Mb(b, c, d, e).o(function (g) {
        if (Nl(g)) throw new t("operation-not-supported-in-this-environment");
        f = g;
        return El(a.g).then(function () {
          throw f;
        });
      }).then(function () {
        return a.a.Zb() ? new D(function () {}) : El(a.g).then(function () {
          return a.qa();
        }).then(function () {}).o(function () {});
      });
    });
  }

  function Vl(a, b, c, d, e) {
    return a.a.Nb(d, function (f) {
      b.ma(c, null, f, e);
    }, Rl.get());
  }

  var Wl = {};

  function Jl(a, b, c) {
    a = a + ":" + b;
    c && (a = a + ":" + c.url);
    return a;
  }

  function Xl(a, b, c, d) {
    var e = Jl(b, c, d);
    Wl[e] || (Wl[e] = new Gl(a, b, c, d));
    return Wl[e];
  }

  function Hl() {
    this.b = null;
    this.f = [];
    this.c = [];
    this.a = null;
    this.h = this.g = !1;
  }

  Hl.prototype.reset = function () {
    this.b = null;
    this.a && (this.a.cancel(), this.a = null);
  };

  Hl.prototype.i = function (a, b) {
    if (a) {
      this.reset();
      this.g = !0;
      var c = a.c,
          d = a.b,
          e = a.a && "auth/web-storage-unsupported" == a.a.code,
          f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
      this.h = !(!e && !f);
      "unknown" != c || e || f ? a.a ? (Yl(this, !0, null, a.a), E()) : b.Fa(c, d) ? Zl(this, a, b) : F(new t("invalid-auth-event")) : (Yl(this, !1, null, null), E());
    } else F(new t("invalid-auth-event"));
  };

  function Ol(a) {
    a.g || (a.g = !0, Yl(a, !1, null, null));
  }

  function $l(a) {
    a.g && !a.h && Yl(a, !1, null, null);
  }

  function Zl(a, b, c) {
    c = c.Fa(b.c, b.b);
    var d = b.g,
        e = b.f,
        f = b.h,
        g = b.S(),
        h = !!b.c.match(/Redirect$/);
    c(d, e, g, f).then(function (n) {
      Yl(a, h, n, null);
    }).o(function (n) {
      Yl(a, h, null, n);
    });
  }

  function am(a, b) {
    a.b = function () {
      return F(b);
    };

    if (a.c.length) for (var c = 0; c < a.c.length; c++) {
      a.c[c](b);
    }
  }

  function bm(a, b) {
    a.b = function () {
      return E(b);
    };

    if (a.f.length) for (var c = 0; c < a.f.length; c++) {
      a.f[c](b);
    }
  }

  function Yl(a, b, c, d) {
    b ? d ? am(a, d) : bm(a, c) : bm(a, {
      user: null
    });
    a.f = [];
    a.c = [];
  }

  Hl.prototype.qa = function () {
    var a = this;
    return new D(function (b, c) {
      a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), cm(a));
    });
  };

  function cm(a) {
    var b = new t("timeout");
    a.a && a.a.cancel();
    a.a = Ed(Sl.get()).then(function () {
      a.b || (a.g = !0, Yl(a, !0, null, b));
    });
  }

  function Il() {}

  Il.prototype.i = function (a, b) {
    if (a) {
      var c = a.c,
          d = a.b;
      a.a ? (b.ma(a.c, null, a.a, a.b), E()) : b.Fa(c, d) ? dm(a, b) : F(new t("invalid-auth-event"));
    } else F(new t("invalid-auth-event"));
  };

  function dm(a, b) {
    var c = a.b,
        d = a.c;
    b.Fa(d, c)(a.g, a.f, a.S(), a.h).then(function (e) {
      b.ma(d, e, null, c);
    }).o(function (e) {
      b.ma(d, null, e, c);
    });
  }

  ;

  function em() {
    this.hb = !1;
    Object.defineProperty(this, "appVerificationDisabled", {
      get: function get() {
        return this.hb;
      },
      set: function set(a) {
        this.hb = a;
      },
      enumerable: !1
    });
  }

  ;

  function fm(a, b) {
    this.a = b;
    M(this, "verificationId", a);
  }

  fm.prototype.confirm = function (a) {
    a = ph(this.verificationId, a);
    return this.a(a);
  };

  function gm(a, b, c, d) {
    return new lh(a).eb(b, c).then(function (e) {
      return new fm(e, d);
    });
  }

  ;

  function hm(a) {
    var b = ig(a);
    if (!(b && b.exp && b.auth_time && b.iat)) throw new t("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");
    N(this, {
      token: a,
      expirationTime: bf(1E3 * b.exp),
      authTime: bf(1E3 * b.auth_time),
      issuedAtTime: bf(1E3 * b.iat),
      signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null,
      signInSecondFactor: b.firebase && b.firebase.sign_in_second_factor ? b.firebase.sign_in_second_factor : null,
      claims: b
    });
  }

  ;

  function im(a, b, c) {
    var d = b && b[jm];
    if (!d) throw new t("argument-error", "Internal assert: Invalid MultiFactorResolver");
    this.a = a;
    this.f = nb(b);
    this.g = c;
    this.c = new yg(null, d);
    this.b = [];
    var e = this;
    w(b[km] || [], function (f) {
      (f = tf(f)) && e.b.push(f);
    });
    M(this, "auth", this.a);
    M(this, "session", this.c);
    M(this, "hints", this.b);
  }

  var km = "mfaInfo",
      jm = "mfaPendingCredential";

  im.prototype.Qc = function (a) {
    var b = this;
    return a.rb(this.a.a, this.c).then(function (c) {
      var d = nb(b.f);
      delete d[km];
      delete d[jm];
      z(d, c);
      return b.g(d);
    });
  };

  function lm(a, b, c, d) {
    t.call(this, "multi-factor-auth-required", d, b);
    this.b = new im(a, b, c);
    M(this, "resolver", this.b);
  }

  r(lm, t);

  function mm(a, b, c) {
    if (a && m(a.serverResponse) && "auth/multi-factor-auth-required" === a.code) try {
      return new lm(b, a.serverResponse, c, a.message);
    } catch (d) {}
    return null;
  }

  ;

  function nm() {}

  nm.prototype.rb = function (a, b, c) {
    return b.type == zg ? om(this, a, b, c) : pm(this, a, b);
  };

  function om(a, b, c, d) {
    return c.Ha().then(function (e) {
      e = {
        idToken: e
      };
      "undefined" !== typeof d && (e.displayName = d);
      z(e, {
        phoneVerificationInfo: hh(a.a)
      });
      return O(b, Gj, e);
    });
  }

  function pm(a, b, c) {
    return c.Ha().then(function (d) {
      d = {
        mfaPendingCredential: d
      };
      z(d, {
        phoneVerificationInfo: hh(a.a)
      });
      return O(b, Hj, d);
    });
  }

  function qm(a) {
    M(this, "factorId", a.fa);
    this.a = a;
  }

  r(qm, nm);

  function rm(a) {
    qm.call(this, a);
    if (this.a.fa != lh.PROVIDER_ID) throw new t("argument-error", "firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");
  }

  r(rm, qm);

  function sm(a, b) {
    G.call(this, a);

    for (var c in b) {
      this[c] = b[c];
    }
  }

  r(sm, G);

  function tm(a, b) {
    this.a = a;
    this.b = [];
    this.c = q(this.xc, this);
    nd(this.a, "userReloaded", this.c);
    var c = [];
    b && b.multiFactor && b.multiFactor.enrolledFactors && w(b.multiFactor.enrolledFactors, function (d) {
      var e = null,
          f = {};

      if (d) {
        d.uid && (f[qf] = d.uid);
        d.displayName && (f[rf] = d.displayName);
        d.enrollmentTime && (f[sf] = new Date(d.enrollmentTime).toISOString());
        d.phoneNumber && (f[pf] = d.phoneNumber);

        try {
          e = new uf(f);
        } catch (g) {}

        d = e;
      } else d = null;

      d && c.push(d);
    });
    um(this, c);
  }

  function vm(a) {
    var b = [];
    w(a.mfaInfo || [], function (c) {
      (c = tf(c)) && b.push(c);
    });
    return b;
  }

  k = tm.prototype;

  k.xc = function (a) {
    um(this, vm(a.gd));
  };

  function um(a, b) {
    a.b = b;
    M(a, "enrolledFactors", b);
  }

  k.Qb = function () {
    return this.a.I().then(function (a) {
      return new yg(a, null);
    });
  };

  k.ec = function (a, b) {
    var c = this,
        d = this.a.a;
    return this.Qb().then(function (e) {
      return a.rb(d, e, b);
    }).then(function (e) {
      wm(c.a, e);
      return c.a.reload();
    });
  };

  k.ad = function (a) {
    var b = this,
        c = "string" === typeof a ? a : a.uid,
        d = this.a.a;
    return this.a.I().then(function (e) {
      return O(d, Lj, {
        idToken: e,
        mfaEnrollmentId: c
      });
    }).then(function (e) {
      var f = Qa(b.b, function (g) {
        return g.uid != c;
      });
      um(b, f);
      wm(b.a, e);
      return b.a.reload().o(function (g) {
        if ("auth/user-token-expired" != g.code) throw g;
      });
    });
  };

  k.w = function () {
    return {
      multiFactor: {
        enrolledFactors: Ra(this.b, function (a) {
          return a.w();
        })
      }
    };
  };

  function xm(a, b, c) {
    this.i = a;
    this.h = b;
    this.g = c;
    this.c = 3E4;
    this.f = 96E4;
    this.b = null;
    this.a = this.c;
    if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");
  }

  xm.prototype.start = function () {
    this.a = this.c;
    ym(this, !0);
  };

  function zm(a, b) {
    if (b) return a.a = a.c, a.g();
    b = a.a;
    a.a *= 2;
    a.a > a.f && (a.a = a.f);
    return b;
  }

  function ym(a, b) {
    a.stop();
    a.b = Ed(zm(a, b)).then(function () {
      return af();
    }).then(function () {
      return a.i();
    }).then(function () {
      ym(a, !0);
    }).o(function (c) {
      a.h(c) && ym(a, !1);
    });
  }

  xm.prototype.stop = function () {
    this.b && (this.b.cancel(), this.b = null);
  };

  function Am(a) {
    this.f = a;
    this.b = this.a = null;
    this.c = Date.now();
  }

  Am.prototype.w = function () {
    return {
      apiKey: this.f.c,
      refreshToken: this.a,
      accessToken: this.b && this.b.toString(),
      expirationTime: this.c
    };
  };

  function Bm(a, b) {
    "undefined" === typeof b && (a.b ? (b = a.b, b = b.a - b.g) : b = 0);
    a.c = Date.now() + 1E3 * b;
  }

  function Cm(a, b) {
    a.b = jg(b[Dg] || "");
    a.a = b.refreshToken;
    b = b.expiresIn;
    Bm(a, "undefined" !== typeof b ? Number(b) : void 0);
  }

  function Dm(a, b) {
    a.b = b.b;
    a.a = b.a;
    a.c = b.c;
  }

  function Em(a, b) {
    return Wi(a.f, b).then(function (c) {
      a.b = jg(c.access_token);
      a.a = c.refresh_token;
      Bm(a, c.expires_in);
      return {
        accessToken: a.b.toString(),
        refreshToken: a.a
      };
    }).o(function (c) {
      "auth/user-token-expired" == c.code && (a.a = null);
      throw c;
    });
  }

  Am.prototype.getToken = function (a) {
    a = !!a;
    return this.b && !this.a ? F(new t("user-token-expired")) : a || !this.b || Date.now() > this.c - 3E4 ? this.a ? Em(this, {
      grant_type: "refresh_token",
      refresh_token: this.a
    }) : E(null) : E({
      accessToken: this.b.toString(),
      refreshToken: this.a
    });
  };

  function Fm(a, b) {
    this.a = a || null;
    this.b = b || null;
    N(this, {
      lastSignInTime: bf(b || null),
      creationTime: bf(a || null)
    });
  }

  function Gm(a) {
    return new Fm(a.a, a.b);
  }

  Fm.prototype.w = function () {
    return {
      lastLoginAt: this.b,
      createdAt: this.a
    };
  };

  function Hm(a, b, c, d, e, f) {
    N(this, {
      uid: a,
      displayName: d || null,
      photoURL: e || null,
      email: c || null,
      phoneNumber: f || null,
      providerId: b
    });
  }

  function Im(a, b, c) {
    this.G = [];
    this.l = a.apiKey;
    this.m = a.appName;
    this.s = a.authDomain || null;
    var d = _app["default"].SDK_VERSION ? Oe(_app["default"].SDK_VERSION) : null;
    this.a = new Ii(this.l, Ca(Da), d);
    a.emulatorConfig && Pi(this.a, a.emulatorConfig);
    this.b = new Am(this.a);
    Jm(this, b[Dg]);
    Cm(this.b, b);
    M(this, "refreshToken", this.b.a);
    Km(this, c || {});
    I.call(this);
    this.P = !1;
    this.s && Re() && (this.h = Xl(this.s, this.l, this.m));
    this.R = [];
    this.f = null;
    this.u = Lm(this);
    this.$ = q(this.gb, this);
    var e = this;
    this.pa = null;

    this.Ba = function (f) {
      e.wa(f.i);
    };

    this.ba = null;

    this.za = function (f) {
      Pi(e.a, f.c);
    };

    this.W = null;
    this.X = [];

    this.Aa = function (f) {
      Mm(e, f.f);
    };

    this.aa = null;
    this.N = new tm(this, c);
    M(this, "multiFactor", this.N);
  }

  r(Im, I);

  Im.prototype.wa = function (a) {
    this.pa = a;
    Oi(this.a, a);
  };

  Im.prototype.ka = function () {
    return this.pa;
  };

  function Nm(a, b) {
    a.ba && H(a.ba, "languageCodeChanged", a.Ba);
    (a.ba = b) && nd(b, "languageCodeChanged", a.Ba);
  }

  function Om(a, b) {
    a.W && H(a.W, "emulatorConfigChanged", a.za);
    (a.W = b) && nd(b, "emulatorConfigChanged", a.za);
  }

  function Mm(a, b) {
    a.X = b;
    Ri(a.a, _app["default"].SDK_VERSION ? Oe(_app["default"].SDK_VERSION, a.X) : null);
  }

  Im.prototype.Ga = function () {
    return Za(this.X);
  };

  function Pm(a, b) {
    a.aa && H(a.aa, "frameworkChanged", a.Aa);
    (a.aa = b) && nd(b, "frameworkChanged", a.Aa);
  }

  Im.prototype.gb = function () {
    this.u.b && (this.u.stop(), this.u.start());
  };

  function Qm(a) {
    try {
      return _app["default"].app(a.m).auth();
    } catch (b) {
      throw new t("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.m + "'!");
    }
  }

  function Lm(a) {
    return new xm(function () {
      return a.I(!0);
    }, function (b) {
      return b && "auth/network-request-failed" == b.code ? !0 : !1;
    }, function () {
      var b = a.b.c - Date.now() - 3E5;
      return 0 < b ? b : 0;
    });
  }

  function Rm(a) {
    a.A || a.u.b || (a.u.start(), H(a, "tokenChanged", a.$), nd(a, "tokenChanged", a.$));
  }

  function Sm(a) {
    H(a, "tokenChanged", a.$);
    a.u.stop();
  }

  function Jm(a, b) {
    a.ya = b;
    M(a, "_lat", b);
  }

  function Tm(a, b) {
    Xa(a.R, function (c) {
      return c == b;
    });
  }

  function Um(a) {
    for (var b = [], c = 0; c < a.R.length; c++) {
      b.push(a.R[c](a));
    }

    return Jc(b).then(function () {
      return a;
    });
  }

  function Vm(a) {
    a.h && !a.P && (a.P = !0, Pl(a.h, a));
  }

  function Km(a, b) {
    N(a, {
      uid: b.uid,
      displayName: b.displayName || null,
      photoURL: b.photoURL || null,
      email: b.email || null,
      emailVerified: b.emailVerified || !1,
      phoneNumber: b.phoneNumber || null,
      isAnonymous: b.isAnonymous || !1,
      tenantId: b.tenantId || null,
      metadata: new Fm(b.createdAt, b.lastLoginAt),
      providerData: []
    });
    a.a.b = a.tenantId;
  }

  M(Im.prototype, "providerId", "firebase");

  function Wm() {}

  function Xm(a) {
    return E().then(function () {
      if (a.A) throw new t("app-deleted");
    });
  }

  function Ym(a) {
    return Ra(a.providerData, function (b) {
      return b.providerId;
    });
  }

  function Zm(a, b) {
    b && ($m(a, b.providerId), a.providerData.push(b));
  }

  function $m(a, b) {
    Xa(a.providerData, function (c) {
      return c.providerId == b;
    });
  }

  function an(a, b, c) {
    ("uid" != b || c) && a.hasOwnProperty(b) && M(a, b, c);
  }

  function bn(a, b) {
    a != b && (N(a, {
      uid: b.uid,
      displayName: b.displayName,
      photoURL: b.photoURL,
      email: b.email,
      emailVerified: b.emailVerified,
      phoneNumber: b.phoneNumber,
      isAnonymous: b.isAnonymous,
      tenantId: b.tenantId,
      providerData: []
    }), b.metadata ? M(a, "metadata", Gm(b.metadata)) : M(a, "metadata", new Fm()), w(b.providerData, function (c) {
      Zm(a, c);
    }), Dm(a.b, b.b), M(a, "refreshToken", a.b.a), um(a.N, b.N.b));
  }

  k = Im.prototype;

  k.reload = function () {
    var a = this;
    return R(this, Xm(this).then(function () {
      return cn(a).then(function () {
        return Um(a);
      }).then(Wm);
    }));
  };

  function cn(a) {
    return a.I().then(function (b) {
      var c = a.isAnonymous;
      return dn(a, b).then(function () {
        c || an(a, "isAnonymous", !1);
        return b;
      });
    });
  }

  k.nc = function (a) {
    return this.I(a).then(function (b) {
      return new hm(b);
    });
  };

  k.I = function (a) {
    var b = this;
    return R(this, Xm(this).then(function () {
      return b.b.getToken(a);
    }).then(function (c) {
      if (!c) throw new t("internal-error");
      c.accessToken != b.ya && (Jm(b, c.accessToken), b.dispatchEvent(new sm("tokenChanged")));
      an(b, "refreshToken", c.refreshToken);
      return c.accessToken;
    }));
  };

  function wm(a, b) {
    b[Dg] && a.ya != b[Dg] && (Cm(a.b, b), a.dispatchEvent(new sm("tokenChanged")), Jm(a, b[Dg]), an(a, "refreshToken", a.b.a));
  }

  function dn(a, b) {
    return O(a.a, Ij, {
      idToken: b
    }).then(q(a.Jc, a));
  }

  k.Jc = function (a) {
    a = a.users;
    if (!a || !a.length) throw new t("internal-error");
    a = a[0];
    Km(this, {
      uid: a.localId,
      displayName: a.displayName,
      photoURL: a.photoUrl,
      email: a.email,
      emailVerified: !!a.emailVerified,
      phoneNumber: a.phoneNumber,
      lastLoginAt: a.lastLoginAt,
      createdAt: a.createdAt,
      tenantId: a.tenantId
    });

    for (var b = en(a), c = 0; c < b.length; c++) {
      Zm(this, b[c]);
    }

    an(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
    this.dispatchEvent(new sm("userReloaded", {
      gd: a
    }));
  };

  function en(a) {
    return (a = a.providerUserInfo) && a.length ? Ra(a, function (b) {
      return new Hm(b.rawId, b.providerId, b.email, b.displayName, b.photoUrl, b.phoneNumber);
    }) : [];
  }

  k.Kc = function (a) {
    gf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");
    return this.sb(a);
  };

  k.sb = function (a) {
    var b = this,
        c = null;
    return R(this, a.c(this.a, this.uid).then(function (d) {
      wm(b, d);
      c = fn(b, d, "reauthenticate");
      b.f = null;
      return b.reload();
    }).then(function () {
      return c;
    }), !0);
  };

  function gn(a, b) {
    return cn(a).then(function () {
      if (Va(Ym(a), b)) return Um(a).then(function () {
        throw new t("provider-already-linked");
      });
    });
  }

  k.Bc = function (a) {
    gf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");
    return this.pb(a);
  };

  k.pb = function (a) {
    var b = this,
        c = null;
    return R(this, gn(this, a.providerId).then(function () {
      return b.I();
    }).then(function (d) {
      return a.b(b.a, d);
    }).then(function (d) {
      c = fn(b, d, "link");
      return hn(b, d);
    }).then(function () {
      return c;
    }));
  };

  k.Cc = function (a, b) {
    var c = this;
    return R(this, gn(this, "phone").then(function () {
      return gm(Qm(c), a, b, q(c.pb, c));
    }));
  };

  k.Lc = function (a, b) {
    var c = this;
    return R(this, E().then(function () {
      return gm(Qm(c), a, b, q(c.sb, c));
    }), !0);
  };

  function fn(a, b, c) {
    var d = qh(b);
    b = og(b);
    return kf({
      user: a,
      credential: d,
      additionalUserInfo: b,
      operationType: c
    });
  }

  function hn(a, b) {
    wm(a, b);
    return a.reload().then(function () {
      return a;
    });
  }

  k.Ab = function (a) {
    var b = this;
    return R(this, this.I().then(function (c) {
      return b.a.Ab(c, a);
    }).then(function (c) {
      wm(b, c);
      return b.reload();
    }));
  };

  k.dd = function (a) {
    var b = this;
    return R(this, this.I().then(function (c) {
      return a.b(b.a, c);
    }).then(function (c) {
      wm(b, c);
      return b.reload();
    }));
  };

  k.Bb = function (a) {
    var b = this;
    return R(this, this.I().then(function (c) {
      return b.a.Bb(c, a);
    }).then(function (c) {
      wm(b, c);
      return b.reload();
    }));
  };

  k.Cb = function (a) {
    if (void 0 === a.displayName && void 0 === a.photoURL) return Xm(this);
    var b = this;
    return R(this, this.I().then(function (c) {
      return b.a.Cb(c, {
        displayName: a.displayName,
        photoUrl: a.photoURL
      });
    }).then(function (c) {
      wm(b, c);
      an(b, "displayName", c.displayName || null);
      an(b, "photoURL", c.photoUrl || null);
      w(b.providerData, function (d) {
        "password" === d.providerId && (M(d, "displayName", b.displayName), M(d, "photoURL", b.photoURL));
      });
      return Um(b);
    }).then(Wm));
  };

  k.bd = function (a) {
    var b = this;
    return R(this, cn(this).then(function (c) {
      return Va(Ym(b), a) ? rj(b.a, c, [a]).then(function (d) {
        var e = {};
        w(d.providerUserInfo || [], function (f) {
          e[f.providerId] = !0;
        });
        w(Ym(b), function (f) {
          e[f] || $m(b, f);
        });
        e[lh.PROVIDER_ID] || M(b, "phoneNumber", null);
        return Um(b);
      }) : Um(b).then(function () {
        throw new t("no-such-provider");
      });
    }));
  };

  k["delete"] = function () {
    var a = this;
    return R(this, this.I().then(function (b) {
      return O(a.a, Fj, {
        idToken: b
      });
    }).then(function () {
      a.dispatchEvent(new sm("userDeleted"));
    })).then(function () {
      for (var b = 0; b < a.G.length; b++) {
        a.G[b].cancel("app-deleted");
      }

      Nm(a, null);
      Om(a, null);
      Pm(a, null);
      a.G = [];
      a.A = !0;
      Sm(a);
      M(a, "refreshToken", null);
      a.h && Ql(a.h, a);
    });
  };

  k.Eb = function (a, b) {
    return "linkViaPopup" == a && (this.i || null) == b && this.g || "reauthViaPopup" == a && (this.i || null) == b && this.g || "linkViaRedirect" == a && (this.ga || null) == b || "reauthViaRedirect" == a && (this.ga || null) == b ? !0 : !1;
  };

  k.ma = function (a, b, c, d) {
    "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.i || null) || (c && this.O ? this.O(c) : b && !c && this.g && this.g(b), this.c && (this.c.cancel(), this.c = null), delete this.g, delete this.O);
  };

  k.Fa = function (a, b) {
    return "linkViaPopup" == a && b == (this.i || null) ? q(this.Jb, this) : "reauthViaPopup" == a && b == (this.i || null) ? q(this.Kb, this) : "linkViaRedirect" == a && (this.ga || null) == b ? q(this.Jb, this) : "reauthViaRedirect" == a && (this.ga || null) == b ? q(this.Kb, this) : null;
  };

  k.Dc = function (a) {
    var b = this;
    return jn(this, "linkViaPopup", a, function () {
      return gn(b, a.providerId).then(function () {
        return Um(b);
      });
    }, !1);
  };

  k.Mc = function (a) {
    return jn(this, "reauthViaPopup", a, function () {
      return E();
    }, !0);
  };

  function jn(a, b, c, d, e) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    if (a.f && !e) return F(a.f);
    var f = ng(c.providerId),
        g = Qe(a.uid + ":::"),
        h = null;
    (!Te() || Ie()) && a.s && c.isOAuthProvider && (h = ek(a.s, a.l, a.m, b, c, null, g, _app["default"].SDK_VERSION || null, null, null, a.tenantId));
    var n = ze(h, f && f.ua, f && f.ta);
    d = d().then(function () {
      kn(a);
      if (!e) return a.I().then(function () {});
    }).then(function () {
      return Tl(a.h, n, b, c, g, !!h, a.tenantId);
    }).then(function () {
      return new D(function (p, v) {
        a.ma(b, null, new t("cancelled-popup-request"), a.i || null);
        a.g = p;
        a.O = v;
        a.i = g;
        a.c = Vl(a.h, a, b, n, g);
      });
    }).then(function (p) {
      n && ye(n);
      return p ? kf(p) : null;
    }).o(function (p) {
      n && ye(n);
      throw p;
    });
    return R(a, d, e);
  }

  k.Ec = function (a) {
    var b = this;
    return ln(this, "linkViaRedirect", a, function () {
      return gn(b, a.providerId);
    }, !1);
  };

  k.Nc = function (a) {
    return ln(this, "reauthViaRedirect", a, function () {
      return E();
    }, !0);
  };

  function ln(a, b, c, d, e) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    if (a.f && !e) return F(a.f);
    var f = null,
        g = Qe(a.uid + ":::");
    d = d().then(function () {
      kn(a);
      if (!e) return a.I().then(function () {});
    }).then(function () {
      a.ga = g;
      return Um(a);
    }).then(function (h) {
      a.ha && (h = a.ha, h = h.b.set(mn, a.w(), h.a));
      return h;
    }).then(function () {
      return Ul(a.h, b, c, g, a.tenantId);
    }).o(function (h) {
      f = h;
      if (a.ha) return nn(a.ha);
      throw f;
    }).then(function () {
      if (f) throw f;
    });
    return R(a, d, e);
  }

  function kn(a) {
    if (!a.h || !a.P) {
      if (a.h && !a.P) throw new t("internal-error");
      throw new t("auth-domain-config-required");
    }
  }

  k.Jb = function (a, b, c, d) {
    var e = this;
    this.c && (this.c.cancel(), this.c = null);
    var f = null;
    c = this.I().then(function (g) {
      return Hg(e.a, {
        requestUri: a,
        postBody: d,
        sessionId: b,
        idToken: g
      });
    }).then(function (g) {
      f = fn(e, g, "link");
      return hn(e, g);
    }).then(function () {
      return f;
    });
    return R(this, c);
  };

  k.Kb = function (a, b, c, d) {
    var e = this;
    this.c && (this.c.cancel(), this.c = null);
    var f = null,
        g = E().then(function () {
      return Cg(Ig(e.a, {
        requestUri: a,
        sessionId: b,
        postBody: d,
        tenantId: c
      }), e.uid);
    }).then(function (h) {
      f = fn(e, h, "reauthenticate");
      wm(e, h);
      e.f = null;
      return e.reload();
    }).then(function () {
      return f;
    });
    return R(this, g, !0);
  };

  k.tb = function (a) {
    var b = this,
        c = null;
    return R(this, this.I().then(function (d) {
      c = d;
      return "undefined" === typeof a || mb(a) ? {} : bg(new Sf(a));
    }).then(function (d) {
      return b.a.tb(c, d);
    }).then(function (d) {
      if (b.email != d) return b.reload();
    }).then(function () {}));
  };

  k.Db = function (a, b) {
    var c = this,
        d = null;
    return R(this, this.I().then(function (e) {
      d = e;
      return "undefined" === typeof b || mb(b) ? {} : bg(new Sf(b));
    }).then(function (e) {
      return c.a.Db(d, a, e);
    }).then(function (e) {
      if (c.email != e) return c.reload();
    }).then(function () {}));
  };

  function R(a, b, c) {
    var d = on(a, b, c);
    a.G.push(d);
    d.na(function () {
      Wa(a.G, d);
    });
    return d.o(function (e) {
      var f = null;
      e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), Qm(a), q(a.ic, a)));
      throw f || e;
    });
  }

  k.ic = function (a) {
    var b = null,
        c = this;
    a = Cg(E(a), c.uid).then(function (d) {
      b = fn(c, d, "reauthenticate");
      wm(c, d);
      c.f = null;
      return c.reload();
    }).then(function () {
      return b;
    });
    return R(this, a, !0);
  };

  function on(a, b, c) {
    return a.f && !c ? (b.cancel(), F(a.f)) : b.o(function (d) {
      !d || "auth/user-disabled" != d.code && "auth/user-token-expired" != d.code || (a.f || a.dispatchEvent(new sm("userInvalidated")), a.f = d);
      throw d;
    });
  }

  k.toJSON = function () {
    return this.w();
  };

  k.w = function () {
    var a = {
      uid: this.uid,
      displayName: this.displayName,
      photoURL: this.photoURL,
      email: this.email,
      emailVerified: this.emailVerified,
      phoneNumber: this.phoneNumber,
      isAnonymous: this.isAnonymous,
      tenantId: this.tenantId,
      providerData: [],
      apiKey: this.l,
      appName: this.m,
      authDomain: this.s,
      stsTokenManager: this.b.w(),
      redirectEventId: this.ga || null
    };
    this.metadata && z(a, this.metadata.w());
    w(this.providerData, function (b) {
      a.providerData.push(lf(b));
    });
    z(a, this.N.w());
    return a;
  };

  function pn(a) {
    if (!a.apiKey) return null;
    var b = {
      apiKey: a.apiKey,
      authDomain: a.authDomain,
      appName: a.appName,
      emulatorConfig: a.emulatorConfig
    },
        c = {};

    if (a.stsTokenManager && a.stsTokenManager.accessToken) {
      c[Dg] = a.stsTokenManager.accessToken;
      c.refreshToken = a.stsTokenManager.refreshToken || null;
      var d = a.stsTokenManager.expirationTime;
      d && (c.expiresIn = (d - Date.now()) / 1E3);
    } else return null;

    var e = new Im(b, c, a);
    a.providerData && w(a.providerData, function (f) {
      f && Zm(e, kf(f));
    });
    a.redirectEventId && (e.ga = a.redirectEventId);
    return e;
  }

  function qn(a, b, c, d) {
    var e = new Im(a, b);
    c && (e.ha = c);
    d && Mm(e, d);
    return e.reload().then(function () {
      return e;
    });
  }

  function rn(a, b, c, d) {
    var e = a.b,
        f = {};
    f[Dg] = e.b && e.b.toString();
    f.refreshToken = e.a;
    b = new Im(b || {
      apiKey: a.l,
      authDomain: a.s,
      appName: a.m
    }, f);
    c && (b.ha = c);
    d && Mm(b, d);
    bn(b, a);
    return b;
  }

  ;

  function sn(a) {
    this.a = a;
    this.b = Vk();
  }

  var mn = {
    name: "redirectUser",
    D: "session"
  };

  function nn(a) {
    return Zk(a.b, mn, a.a);
  }

  function tn(a, b) {
    return a.b.get(mn, a.a).then(function (c) {
      c && b && (c.authDomain = b);
      return pn(c || {});
    });
  }

  ;

  function un(a) {
    this.a = a;
    this.b = Vk();
    this.c = null;
    this.f = vn(this);
    this.b.addListener(wn("local"), this.a, q(this.g, this));
  }

  un.prototype.g = function () {
    var a = this,
        b = wn("local");
    xn(this, function () {
      return E().then(function () {
        return a.c && "local" != a.c.D ? a.b.get(b, a.a) : null;
      }).then(function (c) {
        if (c) return yn(a, "local").then(function () {
          a.c = b;
        });
      });
    });
  };

  function yn(a, b) {
    var c = [],
        d;

    for (d in Rk) {
      Rk[d] !== b && c.push(Zk(a.b, wn(Rk[d]), a.a));
    }

    c.push(Zk(a.b, zn, a.a));
    return Ic(c);
  }

  function vn(a) {
    var b = wn("local"),
        c = wn("session"),
        d = wn("none");
    return Yk(a.b, b, a.a).then(function () {
      return a.b.get(c, a.a);
    }).then(function (e) {
      return e ? c : a.b.get(d, a.a).then(function (f) {
        return f ? d : a.b.get(b, a.a).then(function (g) {
          return g ? b : a.b.get(zn, a.a).then(function (h) {
            return h ? wn(h) : b;
          });
        });
      });
    }).then(function (e) {
      a.c = e;
      return yn(a, e.D);
    }).o(function () {
      a.c || (a.c = b);
    });
  }

  var zn = {
    name: "persistence",
    D: "session"
  };

  function wn(a) {
    return {
      name: "authUser",
      D: a
    };
  }

  un.prototype.wb = function (a) {
    var b = null,
        c = this;
    Sk(a);
    return xn(this, function () {
      return a != c.c.D ? c.b.get(c.c, c.a).then(function (d) {
        b = d;
        return yn(c, a);
      }).then(function () {
        c.c = wn(a);
        if (b) return c.b.set(c.c, b, c.a);
      }) : E();
    });
  };

  function An(a) {
    return xn(a, function () {
      return a.b.set(zn, a.c.D, a.a);
    });
  }

  function Bn(a, b) {
    return xn(a, function () {
      return a.b.set(a.c, b.w(), a.a);
    });
  }

  function Cn(a) {
    return xn(a, function () {
      return Zk(a.b, a.c, a.a);
    });
  }

  function Dn(a, b, c) {
    return xn(a, function () {
      return a.b.get(a.c, a.a).then(function (d) {
        d && b && (d.authDomain = b);
        d && c && (d.emulatorConfig = c);
        return pn(d || {});
      });
    });
  }

  function xn(a, b) {
    a.f = a.f.then(b, b);
    return a.f;
  }

  ;

  function En(a) {
    this.m = !1;
    M(this, "settings", new em());
    M(this, "app", a);
    if (S(this).options && S(this).options.apiKey) a = _app["default"].SDK_VERSION ? Oe(_app["default"].SDK_VERSION) : null, this.a = new Ii(S(this).options && S(this).options.apiKey, Ca(Da), a);else throw new t("invalid-api-key");
    this.R = [];
    this.u = [];
    this.P = [];
    this.ac = _app["default"].INTERNAL.createSubscribe(q(this.yc, this));
    this.X = void 0;
    this.bc = _app["default"].INTERNAL.createSubscribe(q(this.zc, this));
    Fn(this, null);
    this.l = new un(S(this).options.apiKey + ":" + S(this).name);
    this.G = new sn(S(this).options.apiKey + ":" + S(this).name);
    this.$ = T(this, Gn(this));
    this.h = T(this, Hn(this));
    this.ba = !1;
    this.pa = q(this.Yc, this);
    this.Ba = q(this.da, this);
    this.ya = q(this.kc, this);
    this.za = q(this.vc, this);
    this.Aa = q(this.wc, this);
    this.b = null;
    In(this);
    this.INTERNAL = {};
    this.INTERNAL["delete"] = q(this["delete"], this);
    this.INTERNAL.logFramework = q(this.Fc, this);
    this.A = 0;
    I.call(this);
    Jn(this);
    this.N = [];
    this.f = null;
  }

  r(En, I);

  function Kn(a) {
    G.call(this, "languageCodeChanged");
    this.i = a;
  }

  r(Kn, G);

  function Ln(a) {
    G.call(this, "emulatorConfigChanged");
    this.c = a;
  }

  r(Ln, G);

  function Mn(a) {
    G.call(this, "frameworkChanged");
    this.f = a;
  }

  r(Mn, G);
  k = En.prototype;

  k.wb = function (a) {
    a = this.l.wb(a);
    return T(this, a);
  };

  k.wa = function (a) {
    this.aa === a || this.m || (this.aa = a, Oi(this.a, this.aa), this.dispatchEvent(new Kn(this.ka())));
  };

  k.ka = function () {
    return this.aa;
  };

  k.ed = function () {
    var a = l.navigator;
    this.wa(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
  };

  k.fd = function (a, b) {
    if (!this.f) {
      if (!/^https?:\/\//.test(a)) throw new t("argument-error", "Emulator URL must start with a valid scheme (http:// or https://).");
      Nn(b ? !!b.disableWarnings : !1);
      this.f = {
        url: a
      };
      this.settings.hb = !0;
      Pi(this.a, this.f);
      this.dispatchEvent(new Ln(this.f));
    }
  };

  function Nn(a) {
    "undefined" !== typeof console && "function" === typeof console.info && console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
    l.document && !a && Ee().then(function () {
      var b = l.document.createElement("div");
      b.innerText = "Running in emulator mode. Do not use with production credentials.";
      b.style.position = "fixed";
      b.style.width = "100%";
      b.style.backgroundColor = "#ffffff";
      b.style.border = ".1em solid #000000";
      b.style.color = "#ff0000";
      b.style.bottom = "0px";
      b.style.left = "0px";
      b.style.margin = "0px";
      b.style.zIndex = 1E4;
      b.style.textAlign = "center";
      b.classList.add("firebase-emulator-warning");
      l.document.body.appendChild(b);
    });
  }

  k.Fc = function (a) {
    this.N.push(a);
    Ri(this.a, _app["default"].SDK_VERSION ? Oe(_app["default"].SDK_VERSION, this.N) : null);
    this.dispatchEvent(new Mn(this.N));
  };

  k.Ga = function () {
    return Za(this.N);
  };

  k.xb = function (a) {
    this.W === a || this.m || (this.W = a, this.a.b = this.W);
  };

  k.S = function () {
    return this.W;
  };

  function Jn(a) {
    Object.defineProperty(a, "lc", {
      get: function get() {
        return this.ka();
      },
      set: function set(b) {
        this.wa(b);
      },
      enumerable: !1
    });
    a.aa = null;
    Object.defineProperty(a, "ti", {
      get: function get() {
        return this.S();
      },
      set: function set(b) {
        this.xb(b);
      },
      enumerable: !1
    });
    a.W = null;
  }

  k.toJSON = function () {
    return {
      apiKey: S(this).options.apiKey,
      authDomain: S(this).options.authDomain,
      appName: S(this).name,
      currentUser: U(this) && U(this).w()
    };
  };

  function On(a) {
    return a.gb || F(new t("auth-domain-config-required"));
  }

  function In(a) {
    var b = S(a).options.authDomain,
        c = S(a).options.apiKey;
    b && Re() && (a.gb = a.$.then(function () {
      if (!a.m) {
        a.b = Xl(b, c, S(a).name, a.f);
        Pl(a.b, a);
        U(a) && Vm(U(a));

        if (a.s) {
          Vm(a.s);
          var d = a.s;
          d.wa(a.ka());
          Nm(d, a);
          d = a.s;
          Mm(d, a.N);
          Pm(d, a);
          d = a.s;
          Pi(d.a, a.f);
          Om(d, a);
          a.s = null;
        }

        return a.b;
      }
    }));
  }

  k.Eb = function (a, b) {
    switch (a) {
      case "unknown":
      case "signInViaRedirect":
        return !0;

      case "signInViaPopup":
        return this.i == b && !!this.g;

      default:
        return !1;
    }
  };

  k.ma = function (a, b, c, d) {
    "signInViaPopup" == a && this.i == d && (c && this.O ? this.O(c) : b && !c && this.g && this.g(b), this.c && (this.c.cancel(), this.c = null), delete this.g, delete this.O);
  };

  k.Fa = function (a, b) {
    return "signInViaRedirect" == a || "signInViaPopup" == a && this.i == b && this.g ? q(this.hc, this) : null;
  };

  k.hc = function (a, b, c, d) {
    var e = this,
        f = {
      requestUri: a,
      postBody: d,
      sessionId: b,
      tenantId: c
    };
    this.c && (this.c.cancel(), this.c = null);
    return e.$.then(function () {
      return Pn(e, Fg(e.a, f));
    });
  };

  k.Wc = function (a) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    var b = this,
        c = ng(a.providerId),
        d = Qe(),
        e = null;
    (!Te() || Ie()) && S(this).options.authDomain && a.isOAuthProvider && (e = ek(S(this).options.authDomain, S(this).options.apiKey, S(this).name, "signInViaPopup", a, null, d, _app["default"].SDK_VERSION || null, null, null, this.S(), this.f));
    var f = ze(e, c && c.ua, c && c.ta);
    c = On(this).then(function (g) {
      return Tl(g, f, "signInViaPopup", a, d, !!e, b.S());
    }).then(function () {
      return new D(function (g, h) {
        b.ma("signInViaPopup", null, new t("cancelled-popup-request"), b.i);
        b.g = g;
        b.O = h;
        b.i = d;
        b.c = Vl(b.b, b, "signInViaPopup", f, d);
      });
    }).then(function (g) {
      f && ye(f);
      return g ? kf(g) : null;
    }).o(function (g) {
      f && ye(f);
      throw g;
    });
    return T(this, c);
  };

  k.Xc = function (a) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    var b = this,
        c = On(this).then(function () {
      return An(b.l);
    }).then(function () {
      return Ul(b.b, "signInViaRedirect", a, void 0, b.S());
    });
    return T(this, c);
  };

  function Qn(a) {
    if (!Re()) return F(new t("operation-not-supported-in-this-environment"));
    var b = On(a).then(function () {
      return a.b.qa();
    }).then(function (c) {
      return c ? kf(c) : null;
    });
    return T(a, b);
  }

  k.qa = function () {
    var a = this;
    return Qn(this).then(function (b) {
      a.b && $l(a.b.b);
      return b;
    }).o(function (b) {
      a.b && $l(a.b.b);
      throw b;
    });
  };

  k.cd = function (a) {
    if (!a) return F(new t("null-user"));
    if (this.W != a.tenantId) return F(new t("tenant-id-mismatch"));
    var b = this,
        c = {};
    c.apiKey = S(this).options.apiKey;
    c.authDomain = S(this).options.authDomain;
    c.appName = S(this).name;
    var d = rn(a, c, b.G, b.Ga());
    return T(this, this.h.then(function () {
      if (S(b).options.apiKey != a.l) return d.reload();
    }).then(function () {
      if (U(b) && a.uid == U(b).uid) return bn(U(b), a), b.da(a);
      Fn(b, d);
      Vm(d);
      return b.da(d);
    }).then(function () {
      Rn(b);
    }));
  };

  function Sn(a, b) {
    var c = {};
    c.apiKey = S(a).options.apiKey;
    c.authDomain = S(a).options.authDomain;
    c.appName = S(a).name;
    a.f && (c.emulatorConfig = a.f);
    return a.$.then(function () {
      return qn(c, b, a.G, a.Ga());
    }).then(function (d) {
      if (U(a) && d.uid == U(a).uid) return bn(U(a), d), a.da(d);
      Fn(a, d);
      Vm(d);
      return a.da(d);
    }).then(function () {
      Rn(a);
    });
  }

  function Fn(a, b) {
    U(a) && (Tm(U(a), a.Ba), H(U(a), "tokenChanged", a.ya), H(U(a), "userDeleted", a.za), H(U(a), "userInvalidated", a.Aa), Sm(U(a)));
    b && (b.R.push(a.Ba), nd(b, "tokenChanged", a.ya), nd(b, "userDeleted", a.za), nd(b, "userInvalidated", a.Aa), 0 < a.A && Rm(b));
    M(a, "currentUser", b);
    b && (b.wa(a.ka()), Nm(b, a), Mm(b, a.N), Pm(b, a), Pi(b.a, a.f), Om(b, a));
  }

  k.zb = function () {
    var a = this,
        b = this.h.then(function () {
      a.b && $l(a.b.b);
      if (!U(a)) return E();
      Fn(a, null);
      return Cn(a.l).then(function () {
        Rn(a);
      });
    });
    return T(this, b);
  };

  function Tn(a) {
    var b = tn(a.G, S(a).options.authDomain).then(function (c) {
      if (a.s = c) c.ha = a.G;
      return nn(a.G);
    });
    return T(a, b);
  }

  function Gn(a) {
    var b = S(a).options.authDomain,
        c = Tn(a).then(function () {
      return Dn(a.l, b, a.f);
    }).then(function (d) {
      return d ? (d.ha = a.G, a.s && (a.s.ga || null) == (d.ga || null) ? d : d.reload().then(function () {
        return Bn(a.l, d).then(function () {
          return d;
        });
      }).o(function (e) {
        return "auth/network-request-failed" == e.code ? d : Cn(a.l);
      })) : null;
    }).then(function (d) {
      Fn(a, d || null);
    });
    return T(a, c);
  }

  function Hn(a) {
    return a.$.then(function () {
      return Qn(a);
    }).o(function () {}).then(function () {
      if (!a.m) return a.pa();
    }).o(function () {}).then(function () {
      if (!a.m) {
        a.ba = !0;
        var b = a.l;
        b.b.addListener(wn("local"), b.a, a.pa);
      }
    });
  }

  k.Yc = function () {
    var a = this;
    return Dn(this.l, S(this).options.authDomain).then(function (b) {
      if (!a.m) {
        var c;

        if (c = U(a) && b) {
          c = U(a).uid;
          var d = b.uid;
          c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
        }

        if (c) return bn(U(a), b), U(a).I();
        if (U(a) || b) Fn(a, b), b && (Vm(b), b.ha = a.G), a.b && Pl(a.b, a), Rn(a);
      }
    });
  };

  k.da = function (a) {
    return Bn(this.l, a);
  };

  k.kc = function () {
    Rn(this);
    this.da(U(this));
  };

  k.vc = function () {
    this.zb();
  };

  k.wc = function () {
    this.zb();
  };

  function Pn(a, b) {
    var c = null,
        d = null;
    return T(a, b.then(function (e) {
      c = qh(e);
      d = og(e);
      return Sn(a, e);
    }, function (e) {
      var f = null;
      e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), a, q(a.jc, a)));
      throw f || e;
    }).then(function () {
      return kf({
        user: U(a),
        credential: c,
        additionalUserInfo: d,
        operationType: "signIn"
      });
    }));
  }

  k.jc = function (a) {
    var b = this;
    return this.h.then(function () {
      return Pn(b, E(a));
    });
  };

  k.yc = function (a) {
    var b = this;
    this.addAuthTokenListener(function () {
      a.next(U(b));
    });
  };

  k.zc = function (a) {
    var b = this;
    Un(this, function () {
      a.next(U(b));
    });
  };

  k.Hc = function (a, b, c) {
    var d = this;
    this.ba && Promise.resolve().then(function () {
      "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));
    });
    return this.ac(a, b, c);
  };

  k.Gc = function (a, b, c) {
    var d = this;
    this.ba && Promise.resolve().then(function () {
      d.X = d.getUid();
      "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));
    });
    return this.bc(a, b, c);
  };

  k.mc = function (a) {
    var b = this,
        c = this.h.then(function () {
      return U(b) ? U(b).I(a).then(function (d) {
        return {
          accessToken: d
        };
      }) : null;
    });
    return T(this, c);
  };

  k.Sc = function (a) {
    var b = this;
    return this.h.then(function () {
      return Pn(b, O(b.a, Kj, {
        token: a
      }));
    }).then(function (c) {
      var d = c.user;
      an(d, "isAnonymous", !1);
      b.da(d);
      return c;
    });
  };

  k.Tc = function (a, b) {
    var c = this;
    return this.h.then(function () {
      return Pn(c, O(c.a, ah, {
        email: a,
        password: b
      }));
    });
  };

  k.dc = function (a, b) {
    var c = this;
    return this.h.then(function () {
      return Pn(c, O(c.a, Ej, {
        email: a,
        password: b
      }));
    });
  };

  k.Za = function (a) {
    var b = this;
    return this.h.then(function () {
      return Pn(b, a.ja(b.a));
    });
  };

  k.Rc = function (a) {
    gf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");
    return this.Za(a);
  };

  k.yb = function () {
    var a = this;
    return this.h.then(function () {
      var b = U(a);

      if (b && b.isAnonymous) {
        var c = kf({
          providerId: null,
          isNewUser: !1
        });
        return kf({
          user: b,
          credential: null,
          additionalUserInfo: c,
          operationType: "signIn"
        });
      }

      return Pn(a, a.a.yb()).then(function (d) {
        var e = d.user;
        an(e, "isAnonymous", !0);
        a.da(e);
        return d;
      });
    });
  };

  function S(a) {
    return a.app;
  }

  function U(a) {
    return a.currentUser;
  }

  k.getUid = function () {
    return U(this) && U(this).uid || null;
  };

  function Vn(a) {
    return U(a) && U(a)._lat || null;
  }

  function Rn(a) {
    if (a.ba) {
      for (var b = 0; b < a.u.length; b++) {
        if (a.u[b]) a.u[b](Vn(a));
      }

      if (a.X !== a.getUid() && a.P.length) for (a.X = a.getUid(), b = 0; b < a.P.length; b++) {
        if (a.P[b]) a.P[b](Vn(a));
      }
    }
  }

  k.cc = function (a) {
    this.addAuthTokenListener(a);
    this.A++;
    0 < this.A && U(this) && Rm(U(this));
  };

  k.Oc = function (a) {
    var b = this;
    w(this.u, function (c) {
      c == a && b.A--;
    });
    0 > this.A && (this.A = 0);
    0 == this.A && U(this) && Sm(U(this));
    this.removeAuthTokenListener(a);
  };

  k.addAuthTokenListener = function (a) {
    var b = this;
    this.u.push(a);
    T(this, this.h.then(function () {
      b.m || Va(b.u, a) && a(Vn(b));
    }));
  };

  k.removeAuthTokenListener = function (a) {
    Xa(this.u, function (b) {
      return b == a;
    });
  };

  function Un(a, b) {
    a.P.push(b);
    T(a, a.h.then(function () {
      !a.m && Va(a.P, b) && a.X !== a.getUid() && (a.X = a.getUid(), b(Vn(a)));
    }));
  }

  k["delete"] = function () {
    this.m = !0;

    for (var a = 0; a < this.R.length; a++) {
      this.R[a].cancel("app-deleted");
    }

    this.R = [];
    this.l && (a = this.l, a.b.removeListener(wn("local"), a.a, this.pa));
    this.b && (Ql(this.b, this), $l(this.b.b));
    return Promise.resolve();
  };

  function T(a, b) {
    a.R.push(b);
    b.na(function () {
      Wa(a.R, b);
    });
    return b;
  }

  k.gc = function (a) {
    return T(this, aj(this.a, a));
  };

  k.Ac = function (a) {
    return !!fh(a);
  };

  k.vb = function (a, b) {
    var c = this;
    return T(this, E().then(function () {
      var d = new Sf(b);
      if (!d.c) throw new t("argument-error", $f + " must be true when sending sign in link to email");
      return bg(d);
    }).then(function (d) {
      return c.a.vb(a, d);
    }).then(function () {}));
  };

  k.hd = function (a) {
    return this.Qa(a).then(function (b) {
      return b.data.email;
    });
  };

  k.mb = function (a, b) {
    return T(this, this.a.mb(a, b).then(function () {}));
  };

  k.Qa = function (a) {
    return T(this, this.a.Qa(a).then(function (b) {
      return new vf(b);
    }));
  };

  k.ib = function (a) {
    return T(this, this.a.ib(a).then(function () {}));
  };

  k.ub = function (a, b) {
    var c = this;
    return T(this, E().then(function () {
      return "undefined" === typeof b || mb(b) ? {} : bg(new Sf(b));
    }).then(function (d) {
      return c.a.ub(a, d);
    }).then(function () {}));
  };

  k.Vc = function (a, b) {
    return T(this, gm(this, a, b, q(this.Za, this)));
  };

  k.Uc = function (a, b) {
    var c = this;
    return T(this, E().then(function () {
      var d = b || re(),
          e = eh(a, d);
      d = fh(d);
      if (!d) throw new t("argument-error", "Invalid email link!");
      if (d.tenantId !== c.S()) throw new t("tenant-id-mismatch");
      return c.Za(e);
    }));
  };

  function Wn() {}

  Wn.prototype.render = function () {};

  Wn.prototype.reset = function () {};

  Wn.prototype.getResponse = function () {};

  Wn.prototype.execute = function () {};

  function Xn() {
    this.a = {};
    this.b = 1E12;
  }

  var Yn = null;

  Xn.prototype.render = function (a, b) {
    this.a[this.b.toString()] = new Zn(a, b);
    return this.b++;
  };

  Xn.prototype.reset = function (a) {
    var b = $n(this, a);
    a = ao(a);
    b && a && (b["delete"](), delete this.a[a]);
  };

  Xn.prototype.getResponse = function (a) {
    return (a = $n(this, a)) ? a.getResponse() : null;
  };

  Xn.prototype.execute = function (a) {
    (a = $n(this, a)) && a.execute();
  };

  function $n(a, b) {
    return (b = ao(b)) ? a.a[b] || null : null;
  }

  function ao(a) {
    return (a = "undefined" === typeof a ? 1E12 : a) ? a.toString() : null;
  }

  function Zn(a, b) {
    this.g = !1;
    this.c = b;
    this.a = this.b = null;
    this.i = "invisible" !== this.c.size;
    this.f = kc(a);
    var c = this;

    this.h = function () {
      c.execute();
    };

    this.i ? this.execute() : nd(this.f, "click", this.h);
  }

  Zn.prototype.getResponse = function () {
    bo(this);
    return this.b;
  };

  Zn.prototype.execute = function () {
    bo(this);
    var a = this;
    this.a || (this.a = setTimeout(function () {
      a.b = Me();
      var b = a.c.callback,
          c = a.c["expired-callback"];
      if (b) try {
        b(a.b);
      } catch (d) {}
      a.a = setTimeout(function () {
        a.a = null;
        a.b = null;
        if (c) try {
          c();
        } catch (d) {}
        a.i && a.execute();
      }, 6E4);
    }, 500));
  };

  Zn.prototype["delete"] = function () {
    bo(this);
    this.g = !0;
    clearTimeout(this.a);
    this.a = null;
    H(this.f, "click", this.h);
  };

  function bo(a) {
    if (a.g) throw Error("reCAPTCHA mock was already deleted!");
  }

  ;

  function co() {}

  M(co, "FACTOR_ID", "phone");

  function eo() {}

  eo.prototype.g = function () {
    Yn || (Yn = new Xn());
    return E(Yn);
  };

  eo.prototype.c = function () {};

  var fo = null;

  function go() {
    this.b = l.grecaptcha ? Infinity : 0;
    this.f = null;
    this.a = "__rcb" + Math.floor(1E6 * Math.random()).toString();
  }

  var ho = new qb(rb, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),
      io = new Ze(3E4, 6E4);

  go.prototype.g = function (a) {
    var b = this;
    return new D(function (c, d) {
      var e = setTimeout(function () {
        d(new t("network-request-failed"));
      }, io.get());

      if (!l.grecaptcha || a !== b.f && !b.b) {
        l[b.a] = function () {
          if (l.grecaptcha) {
            b.f = a;
            var g = l.grecaptcha.render;

            l.grecaptcha.render = function (h, n) {
              h = g(h, n);
              b.b++;
              return h;
            };

            clearTimeout(e);
            c(l.grecaptcha);
          } else clearTimeout(e), d(new t("internal-error"));

          delete l[b.a];
        };

        var f = zb(ho, {
          onload: b.a,
          hl: a || ""
        });
        E(Bi(f)).o(function () {
          clearTimeout(e);
          d(new t("internal-error", "Unable to load external reCAPTCHA dependencies!"));
        });
      } else clearTimeout(e), c(l.grecaptcha);
    });
  };

  go.prototype.c = function () {
    this.b--;
  };

  var jo = null;

  function ko(a, b, c, d, e, f, g) {
    M(this, "type", "recaptcha");
    this.c = this.f = null;
    this.A = !1;
    this.m = b;
    this.g = null;
    g ? (fo || (fo = new eo()), g = fo) : (jo || (jo = new go()), g = jo);
    this.v = g;
    this.a = c || {
      theme: "light",
      type: "image"
    };
    this.i = [];
    if (this.a[lo]) throw new t("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
    this.h = "invisible" === this.a[mo];
    if (!l.document) throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
    if (!kc(b) || !this.h && kc(b).hasChildNodes()) throw new t("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
    this.s = new Ii(a, f || null, e || null);

    this.u = d || function () {
      return null;
    };

    var h = this;
    this.l = [];
    var n = this.a[no];

    this.a[no] = function (v) {
      oo(h, v);
      if ("function" === typeof n) n(v);else if ("string" === typeof n) {
        var B = L(n, l);
        "function" === typeof B && B(v);
      }
    };

    var p = this.a[po];

    this.a[po] = function () {
      oo(h, null);
      if ("function" === typeof p) p();else if ("string" === typeof p) {
        var v = L(p, l);
        "function" === typeof v && v();
      }
    };
  }

  var no = "callback",
      po = "expired-callback",
      lo = "sitekey",
      mo = "size";

  function oo(a, b) {
    for (var c = 0; c < a.l.length; c++) {
      try {
        a.l[c](b);
      } catch (d) {}
    }
  }

  function qo(a, b) {
    Xa(a.l, function (c) {
      return c == b;
    });
  }

  function ro(a, b) {
    a.i.push(b);
    b.na(function () {
      Wa(a.i, b);
    });
    return b;
  }

  k = ko.prototype;

  k.Ia = function () {
    var a = this;
    return this.f ? this.f : this.f = ro(this, E().then(function () {
      if (Se() && !Je()) return Ee();
      throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
    }).then(function () {
      return a.v.g(a.u());
    }).then(function (b) {
      a.g = b;
      return O(a.s, Jj, {});
    }).then(function (b) {
      a.a[lo] = b.recaptchaSiteKey;
    }).o(function (b) {
      a.f = null;
      throw b;
    }));
  };

  k.render = function () {
    so(this);
    var a = this;
    return ro(this, this.Ia().then(function () {
      if (null === a.c) {
        var b = a.m;

        if (!a.h) {
          var c = kc(b);
          b = nc("DIV");
          c.appendChild(b);
        }

        a.c = a.g.render(b, a.a);
      }

      return a.c;
    }));
  };

  k.verify = function () {
    so(this);
    var a = this;
    return ro(this, this.render().then(function (b) {
      return new D(function (c) {
        var d = a.g.getResponse(b);
        if (d) c(d);else {
          var e = function e(f) {
            f && (qo(a, e), c(f));
          };

          a.l.push(e);
          a.h && a.g.execute(a.c);
        }
      });
    }));
  };

  k.reset = function () {
    so(this);
    null !== this.c && this.g.reset(this.c);
  };

  function so(a) {
    if (a.A) throw new t("internal-error", "RecaptchaVerifier instance has been destroyed.");
  }

  k.clear = function () {
    so(this);
    this.A = !0;
    this.v.c();

    for (var a = 0; a < this.i.length; a++) {
      this.i[a].cancel("RecaptchaVerifier instance has been destroyed.");
    }

    if (!this.h) {
      a = kc(this.m);

      for (var b; b = a.firstChild;) {
        a.removeChild(b);
      }
    }
  };

  function to(a, b, c) {
    var d = !1;

    try {
      this.b = c || _app["default"].app();
    } catch (g) {
      throw new t("argument-error", "No firebase.app.App instance is currently initialized.");
    }

    if (this.b.options && this.b.options.apiKey) c = this.b.options.apiKey;else throw new t("invalid-api-key");
    var e = this,
        f = null;

    try {
      f = this.b.auth().Ga();
    } catch (g) {}

    try {
      d = this.b.auth().settings.appVerificationDisabledForTesting;
    } catch (g) {}

    f = _app["default"].SDK_VERSION ? Oe(_app["default"].SDK_VERSION, f) : null;
    ko.call(this, c, a, b, function () {
      try {
        var g = e.b.auth().ka();
      } catch (h) {
        g = null;
      }

      return g;
    }, f, Ca(Da), d);
  }

  r(to, ko);

  function uo(a, b, c, d) {
    a: {
      c = Array.prototype.slice.call(c);
      var e = 0;

      for (var f = !1, g = 0; g < b.length; g++) {
        if (b[g].optional) f = !0;else {
          if (f) throw new t("internal-error", "Argument validator encountered a required argument after an optional argument.");
          e++;
        }
      }

      f = b.length;
      if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";else {
        for (e = 0; e < c.length; e++) {
          if (f = b[e].optional && void 0 === c[e], !b[e].K(c[e]) && !f) {
            b = b[e];
            if (0 > e || e >= vo.length) throw new t("internal-error", "Argument validator received an unsupported number of arguments.");
            c = vo[e];
            d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.J + ".";
            break a;
          }
        }

        d = null;
      }
    }

    if (d) throw new t("argument-error", a + " failed: " + d);
  }

  var vo = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");

  function V(a, b) {
    return {
      name: a || "",
      J: "a valid string",
      optional: !!b,
      K: function K(c) {
        return "string" === typeof c;
      }
    };
  }

  function wo(a, b) {
    return {
      name: a || "",
      J: "a boolean",
      optional: !!b,
      K: function K(c) {
        return "boolean" === typeof c;
      }
    };
  }

  function W(a, b) {
    return {
      name: a || "",
      J: "a valid object",
      optional: !!b,
      K: m
    };
  }

  function xo(a, b) {
    return {
      name: a || "",
      J: "a function",
      optional: !!b,
      K: function K(c) {
        return "function" === typeof c;
      }
    };
  }

  function yo(a, b) {
    return {
      name: a || "",
      J: "null",
      optional: !!b,
      K: function K(c) {
        return null === c;
      }
    };
  }

  function zo() {
    return {
      name: "",
      J: "an HTML element",
      optional: !1,
      K: function K(a) {
        return !!(a && a instanceof Element);
      }
    };
  }

  function Ao() {
    return {
      name: "auth",
      J: "an instance of Firebase Auth",
      optional: !0,
      K: function K(a) {
        return !!(a && a instanceof En);
      }
    };
  }

  function Bo() {
    return {
      name: "app",
      J: "an instance of Firebase App",
      optional: !0,
      K: function K(a) {
        return !!(a && a instanceof _app["default"].app.App);
      }
    };
  }

  function Co(a) {
    return {
      name: a ? a + "Credential" : "credential",
      J: a ? "a valid " + a + " credential" : "a valid credential",
      optional: !1,
      K: function K(b) {
        if (!b) return !1;
        var c = !a || b.providerId === a;
        return !(!b.ja || !c);
      }
    };
  }

  function Do() {
    return {
      name: "multiFactorAssertion",
      J: "a valid multiFactorAssertion",
      optional: !1,
      K: function K(a) {
        return a ? !!a.rb : !1;
      }
    };
  }

  function Eo() {
    return {
      name: "authProvider",
      J: "a valid Auth provider",
      optional: !1,
      K: function K(a) {
        return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
      }
    };
  }

  function Fo(a, b) {
    return m(a) && "string" === typeof a.type && a.type === b && "function" === typeof a.Ha;
  }

  function Go(a) {
    return m(a) && "string" === typeof a.uid;
  }

  function Ho() {
    return {
      name: "applicationVerifier",
      J: "an implementation of firebase.auth.ApplicationVerifier",
      optional: !1,
      K: function K(a) {
        return !(!a || "string" !== typeof a.type || "function" !== typeof a.verify);
      }
    };
  }

  function X(a, b, c, d) {
    return {
      name: c || "",
      J: a.J + " or " + b.J,
      optional: !!d,
      K: function K(e) {
        return a.K(e) || b.K(e);
      }
    };
  }

  ;

  function Y(a, b) {
    for (var c in b) {
      var d = b[c].name;
      a[d] = Io(d, a[c], b[c].j);
    }
  }

  function Jo(a, b) {
    for (var c in b) {
      var d = b[c].name;
      d !== c && Object.defineProperty(a, d, {
        get: ua(function (e) {
          return this[e];
        }, c),
        set: ua(function (e, f, g, h) {
          uo(e, [g], [h], !0);
          this[f] = h;
        }, d, c, b[c].jb),
        enumerable: !0
      });
    }
  }

  function Z(a, b, c, d) {
    a[b] = Io(b, c, d);
  }

  function Io(a, b, c) {
    function d() {
      var g = Array.prototype.slice.call(arguments);
      uo(e, c, g);
      return b.apply(this, g);
    }

    if (!c) return b;
    var e = Ko(a),
        f;

    for (f in b) {
      d[f] = b[f];
    }

    for (f in b.prototype) {
      d.prototype[f] = b.prototype[f];
    }

    return d;
  }

  function Ko(a) {
    a = a.split(".");
    return a[a.length - 1];
  }

  ;
  Y(En.prototype, {
    ib: {
      name: "applyActionCode",
      j: [V("code")]
    },
    Qa: {
      name: "checkActionCode",
      j: [V("code")]
    },
    mb: {
      name: "confirmPasswordReset",
      j: [V("code"), V("newPassword")]
    },
    dc: {
      name: "createUserWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    gc: {
      name: "fetchSignInMethodsForEmail",
      j: [V("email")]
    },
    qa: {
      name: "getRedirectResult",
      j: []
    },
    Ac: {
      name: "isSignInWithEmailLink",
      j: [V("emailLink")]
    },
    Gc: {
      name: "onAuthStateChanged",
      j: [X(W(), xo(), "nextOrObserver"), xo("opt_error", !0), xo("opt_completed", !0)]
    },
    Hc: {
      name: "onIdTokenChanged",
      j: [X(W(), xo(), "nextOrObserver"), xo("opt_error", !0), xo("opt_completed", !0)]
    },
    ub: {
      name: "sendPasswordResetEmail",
      j: [V("email"), X(W("opt_actionCodeSettings", !0), yo(null, !0), "opt_actionCodeSettings", !0)]
    },
    vb: {
      name: "sendSignInLinkToEmail",
      j: [V("email"), W("actionCodeSettings")]
    },
    wb: {
      name: "setPersistence",
      j: [V("persistence")]
    },
    Rc: {
      name: "signInAndRetrieveDataWithCredential",
      j: [Co()]
    },
    yb: {
      name: "signInAnonymously",
      j: []
    },
    Za: {
      name: "signInWithCredential",
      j: [Co()]
    },
    Sc: {
      name: "signInWithCustomToken",
      j: [V("token")]
    },
    Tc: {
      name: "signInWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Uc: {
      name: "signInWithEmailLink",
      j: [V("email"), V("emailLink", !0)]
    },
    Vc: {
      name: "signInWithPhoneNumber",
      j: [V("phoneNumber"), Ho()]
    },
    Wc: {
      name: "signInWithPopup",
      j: [Eo()]
    },
    Xc: {
      name: "signInWithRedirect",
      j: [Eo()]
    },
    cd: {
      name: "updateCurrentUser",
      j: [X(function (a) {
        return {
          name: "user",
          J: "an instance of Firebase User",
          optional: !!a,
          K: function K(b) {
            return !!(b && b instanceof Im);
          }
        };
      }(), yo(), "user")]
    },
    zb: {
      name: "signOut",
      j: []
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    ed: {
      name: "useDeviceLanguage",
      j: []
    },
    fd: {
      name: "useEmulator",
      j: [V("url"), W("options", !0)]
    },
    hd: {
      name: "verifyPasswordResetCode",
      j: [V("code")]
    }
  });
  Jo(En.prototype, {
    lc: {
      name: "languageCode",
      jb: X(V(), yo(), "languageCode")
    },
    ti: {
      name: "tenantId",
      jb: X(V(), yo(), "tenantId")
    }
  });
  En.Persistence = Rk;
  En.Persistence.LOCAL = "local";
  En.Persistence.SESSION = "session";
  En.Persistence.NONE = "none";
  Y(Im.prototype, {
    "delete": {
      name: "delete",
      j: []
    },
    nc: {
      name: "getIdTokenResult",
      j: [wo("opt_forceRefresh", !0)]
    },
    I: {
      name: "getIdToken",
      j: [wo("opt_forceRefresh", !0)]
    },
    Bc: {
      name: "linkAndRetrieveDataWithCredential",
      j: [Co()]
    },
    pb: {
      name: "linkWithCredential",
      j: [Co()]
    },
    Cc: {
      name: "linkWithPhoneNumber",
      j: [V("phoneNumber"), Ho()]
    },
    Dc: {
      name: "linkWithPopup",
      j: [Eo()]
    },
    Ec: {
      name: "linkWithRedirect",
      j: [Eo()]
    },
    Kc: {
      name: "reauthenticateAndRetrieveDataWithCredential",
      j: [Co()]
    },
    sb: {
      name: "reauthenticateWithCredential",
      j: [Co()]
    },
    Lc: {
      name: "reauthenticateWithPhoneNumber",
      j: [V("phoneNumber"), Ho()]
    },
    Mc: {
      name: "reauthenticateWithPopup",
      j: [Eo()]
    },
    Nc: {
      name: "reauthenticateWithRedirect",
      j: [Eo()]
    },
    reload: {
      name: "reload",
      j: []
    },
    tb: {
      name: "sendEmailVerification",
      j: [X(W("opt_actionCodeSettings", !0), yo(null, !0), "opt_actionCodeSettings", !0)]
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    bd: {
      name: "unlink",
      j: [V("provider")]
    },
    Ab: {
      name: "updateEmail",
      j: [V("email")]
    },
    Bb: {
      name: "updatePassword",
      j: [V("password")]
    },
    dd: {
      name: "updatePhoneNumber",
      j: [Co("phone")]
    },
    Cb: {
      name: "updateProfile",
      j: [W("profile")]
    },
    Db: {
      name: "verifyBeforeUpdateEmail",
      j: [V("email"), X(W("opt_actionCodeSettings", !0), yo(null, !0), "opt_actionCodeSettings", !0)]
    }
  });
  Y(Xn.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(Wn.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(D.prototype, {
    na: {
      name: "finally"
    },
    o: {
      name: "catch"
    },
    then: {
      name: "then"
    }
  });
  Jo(em.prototype, {
    appVerificationDisabled: {
      name: "appVerificationDisabledForTesting",
      jb: wo("appVerificationDisabledForTesting")
    }
  });
  Y(fm.prototype, {
    confirm: {
      name: "confirm",
      j: [V("verificationCode")]
    }
  });
  Z(Bg, "fromJSON", function (a) {
    a = "string" === typeof a ? JSON.parse(a) : a;

    for (var b, c = [Mg, dh, kh, Jg], d = 0; d < c.length; d++) {
      if (b = c[d](a)) return b;
    }

    return null;
  }, [X(V(), W(), "json")]);
  Z(Zg, "credential", function (a, b) {
    return new Yg(a, b);
  }, [V("email"), V("password")]);
  Y(Yg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Qg.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Qg, "credential", Rg, [X(V(), W(), "token")]);
  Z(Zg, "credentialWithLink", eh, [V("email"), V("emailLink")]);
  Y(Sg.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Sg, "credential", Tg, [X(V(), W(), "token")]);
  Y(Ug.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Ug, "credential", Vg, [X(V(), X(W(), yo()), "idToken"), X(V(), yo(), "accessToken", !0)]);
  Y(Wg.prototype, {
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(Wg, "credential", Xg, [X(V(), W(), "token"), V("secret", !0)]);
  Y(Pg.prototype, {
    Ca: {
      name: "addScope",
      j: [V("scope")]
    },
    credential: {
      name: "credential",
      j: [X(V(), X(W(), yo()), "optionsOrIdToken"), X(V(), yo(), "accessToken", !0)]
    },
    Ka: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Y(Kg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Eg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Z(lh, "credential", ph, [V("verificationId"), V("verificationCode")]);
  Y(lh.prototype, {
    eb: {
      name: "verifyPhoneNumber",
      j: [X(V(), function (a, b) {
        return {
          name: a || "phoneInfoOptions",
          J: "valid phone info options",
          optional: !!b,
          K: function K(c) {
            return c ? c.session && c.phoneNumber ? Fo(c.session, zg) && "string" === typeof c.phoneNumber : c.session && c.multiFactorHint ? Fo(c.session, Ag) && Go(c.multiFactorHint) : c.session && c.multiFactorUid ? Fo(c.session, Ag) && "string" === typeof c.multiFactorUid : c.phoneNumber ? "string" === typeof c.phoneNumber : !1 : !1;
          }
        };
      }(), "phoneInfoOptions"), Ho()]
    }
  });
  Y(gh.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(t.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(yh.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(xh.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(lm.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(im.prototype, {
    Qc: {
      name: "resolveSignIn",
      j: [Do()]
    }
  });
  Y(tm.prototype, {
    Qb: {
      name: "getSession",
      j: []
    },
    ec: {
      name: "enroll",
      j: [Do(), V("displayName", !0)]
    },
    ad: {
      name: "unenroll",
      j: [X({
        name: "multiFactorInfo",
        J: "a valid multiFactorInfo",
        optional: !1,
        K: Go
      }, V(), "multiFactorInfoIdentifier")]
    }
  });
  Y(to.prototype, {
    clear: {
      name: "clear",
      j: []
    },
    render: {
      name: "render",
      j: []
    },
    verify: {
      name: "verify",
      j: []
    }
  });
  Z(Jf, "parseLink", Rf, [V("link")]);
  Z(co, "assertion", function (a) {
    return new rm(a);
  }, [Co("phone")]);

  (function () {
    if ("undefined" !== typeof _app["default"] && _app["default"].INTERNAL && _app["default"].INTERNAL.registerComponent) {
      var a = {
        ActionCodeInfo: {
          Operation: {
            EMAIL_SIGNIN: Af,
            PASSWORD_RESET: "PASSWORD_RESET",
            RECOVER_EMAIL: "RECOVER_EMAIL",
            REVERT_SECOND_FACTOR_ADDITION: Cf,
            VERIFY_AND_CHANGE_EMAIL: Bf,
            VERIFY_EMAIL: "VERIFY_EMAIL"
          }
        },
        Auth: En,
        AuthCredential: Bg,
        Error: t
      };
      Z(a, "EmailAuthProvider", Zg, []);
      Z(a, "FacebookAuthProvider", Qg, []);
      Z(a, "GithubAuthProvider", Sg, []);
      Z(a, "GoogleAuthProvider", Ug, []);
      Z(a, "TwitterAuthProvider", Wg, []);
      Z(a, "OAuthProvider", Pg, [V("providerId")]);
      Z(a, "SAMLAuthProvider", Og, [V("providerId")]);
      Z(a, "PhoneAuthProvider", lh, [Ao()]);
      Z(a, "RecaptchaVerifier", to, [X(V(), zo(), "recaptchaContainer"), W("recaptchaParameters", !0), Bo()]);
      Z(a, "ActionCodeURL", Jf, []);
      Z(a, "PhoneMultiFactorGenerator", co, []);

      _app["default"].INTERNAL.registerComponent({
        name: "auth",
        instanceFactory: function instanceFactory(b) {
          b = b.getProvider("app").getImmediate();
          return new En(b);
        },
        multipleInstances: !1,
        serviceProps: a,
        instantiationMode: "LAZY",
        type: "PUBLIC"
      });

      _app["default"].INTERNAL.registerComponent({
        name: "auth-internal",
        instanceFactory: function instanceFactory(b) {
          b = b.getProvider("auth").getImmediate();
          return {
            getUid: q(b.getUid, b),
            getToken: q(b.mc, b),
            addAuthTokenListener: q(b.cc, b),
            removeAuthTokenListener: q(b.Oc, b)
          };
        },
        multipleInstances: !1,
        instantiationMode: "LAZY",
        type: "PRIVATE"
      });

      _app["default"].registerVersion("@firebase/auth", "0.16.1");

      _app["default"].INTERNAL.extendNamespace({
        User: Im
      });
    } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
  })();
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"@firebase/app":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Provider = exports.ComponentContainer = exports.Component = void 0;

var _tslib = require("tslib");

var _util = require("@firebase/util");

/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
var Component =
/** @class */
function () {
  /**
   *
   * @param name The public service name, e.g. app, auth, firestore, database
   * @param instanceFactory Service factory responsible for creating the public interface
   * @param type whether the service provided by the component is public or private
   */
  function Component(name, instanceFactory, type) {
    this.name = name;
    this.instanceFactory = instanceFactory;
    this.type = type;
    this.multipleInstances = false;
    /**
     * Properties to be added to the service namespace
     */

    this.serviceProps = {};
    this.instantiationMode = "LAZY"
    /* LAZY */
    ;
  }

  Component.prototype.setInstantiationMode = function (mode) {
    this.instantiationMode = mode;
    return this;
  };

  Component.prototype.setMultipleInstances = function (multipleInstances) {
    this.multipleInstances = multipleInstances;
    return this;
  };

  Component.prototype.setServiceProps = function (props) {
    this.serviceProps = props;
    return this;
  };

  return Component;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.Component = Component;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */

var Provider =
/** @class */
function () {
  function Provider(name, container) {
    this.name = name;
    this.container = container;
    this.component = null;
    this.instances = new Map();
    this.instancesDeferred = new Map();
  }
  /**
   * @param identifier A provider can provide mulitple instances of a service
   * if this.component.multipleInstances is true.
   */


  Provider.prototype.get = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    } // if multipleInstances is not supported, use the default name


    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);

    if (!this.instancesDeferred.has(normalizedIdentifier)) {
      var deferred = new _util.Deferred();
      this.instancesDeferred.set(normalizedIdentifier, deferred); // If the service instance is available, resolve the promise with it immediately

      try {
        var instance = this.getOrInitializeService(normalizedIdentifier);

        if (instance) {
          deferred.resolve(instance);
        }
      } catch (e) {// when the instance factory throws an exception during get(), it should not cause
        // a fatal error. We just return the unresolved promise in this case.
      }
    }

    return this.instancesDeferred.get(normalizedIdentifier).promise;
  };

  Provider.prototype.getImmediate = function (options) {
    var _a = (0, _tslib.__assign)({
      identifier: DEFAULT_ENTRY_NAME,
      optional: false
    }, options),
        identifier = _a.identifier,
        optional = _a.optional; // if multipleInstances is not supported, use the default name


    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);

    try {
      var instance = this.getOrInitializeService(normalizedIdentifier);

      if (!instance) {
        if (optional) {
          return null;
        }

        throw Error("Service " + this.name + " is not available");
      }

      return instance;
    } catch (e) {
      if (optional) {
        return null;
      } else {
        throw e;
      }
    }
  };

  Provider.prototype.getComponent = function () {
    return this.component;
  };

  Provider.prototype.setComponent = function (component) {
    var e_1, _a;

    if (component.name !== this.name) {
      throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
    }

    if (this.component) {
      throw Error("Component for " + this.name + " has already been provided");
    }

    this.component = component; // if the service is eager, initialize the default instance

    if (isComponentEager(component)) {
      try {
        this.getOrInitializeService(DEFAULT_ENTRY_NAME);
      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
      }
    }

    try {
      // Create service instances for the pending promises and resolve them
      // NOTE: if this.multipleInstances is false, only the default instance will be created
      // and all promises with resolve with it regardless of the identifier.
      for (var _b = (0, _tslib.__values)(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var _d = (0, _tslib.__read)(_c.value, 2),
            instanceIdentifier = _d[0],
            instanceDeferred = _d[1];

        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);

        try {
          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
          var instance = this.getOrInitializeService(normalizedIdentifier);
          instanceDeferred.resolve(instance);
        } catch (e) {// when the instance factory throws an exception, it should not cause
          // a fatal error. We just leave the promise unresolved.
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  Provider.prototype.clearInstance = function (identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }

    this.instancesDeferred["delete"](identifier);
    this.instances["delete"](identifier);
  }; // app.delete() will call this method on every provider to delete the services
  // TODO: should we mark the provider as deleted?


  Provider.prototype["delete"] = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var services;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            services = Array.from(this.instances.values());
            return [4
            /*yield*/
            , Promise.all((0, _tslib.__spread)(services.filter(function (service) {
              return 'INTERNAL' in service;
            }) // legacy services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map(function (service) {
              return service.INTERNAL["delete"]();
            }), services.filter(function (service) {
              return '_delete' in service;
            }) // modularized services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map(function (service) {
              return service._delete();
            })))];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  Provider.prototype.isComponentSet = function () {
    return this.component != null;
  };

  Provider.prototype.getOrInitializeService = function (identifier) {
    var instance = this.instances.get(identifier);

    if (!instance && this.component) {
      instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
      this.instances.set(identifier, instance);
    }

    return instance || null;
  };

  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
    if (this.component) {
      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
    } else {
      return identifier; // assume multiple instances are supported before the component is provided.
    }
  };

  return Provider;
}(); // undefined should be passed to the service factory for the default instance


exports.Provider = Provider;

function normalizeIdentifierForFactory(identifier) {
  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}

function isComponentEager(component) {
  return component.instantiationMode === "EAGER"
  /* EAGER */
  ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */


var ComponentContainer =
/** @class */
function () {
  function ComponentContainer(name) {
    this.name = name;
    this.providers = new Map();
  }
  /**
   *
   * @param component Component being added
   * @param overwrite When a component with the same name has already been registered,
   * if overwrite is true: overwrite the existing component with the new component and create a new
   * provider with the new component. It can be useful in tests where you want to use different mocks
   * for different tests.
   * if overwrite is false: throw an exception
   */


  ComponentContainer.prototype.addComponent = function (component) {
    var provider = this.getProvider(component.name);

    if (provider.isComponentSet()) {
      throw new Error("Component " + component.name + " has already been registered with " + this.name);
    }

    provider.setComponent(component);
  };

  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
    var provider = this.getProvider(component.name);

    if (provider.isComponentSet()) {
      // delete the existing provider from the container, so we can register the new component
      this.providers["delete"](component.name);
    }

    this.addComponent(component);
  };
  /**
   * getProvider provides a type safe interface where it can only be called with a field name
   * present in NameServiceMapping interface.
   *
   * Firebase SDKs providing services should extend NameServiceMapping interface to register
   * themselves.
   */


  ComponentContainer.prototype.getProvider = function (name) {
    if (this.providers.has(name)) {
      return this.providers.get(name);
    } // create a Provider for a service that hasn't registered with Firebase


    var provider = new Provider(name, this);
    this.providers.set(name, provider);
    return provider;
  };

  ComponentContainer.prototype.getProviders = function () {
    return Array.from(this.providers.values());
  };

  return ComponentContainer;
}();

exports.ComponentContainer = ComponentContainer;

},{"@firebase/util":9,"tslib":17}],6:[function(require,module,exports){
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var firebase = require('@firebase/app');

var component = require('@firebase/component');

var tslib = require('tslib');

var util = require('@firebase/util');

var idb = require('idb');

function _interopDefaultLegacy(e) {
  return e && _typeof(e) === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);

var name = "@firebase/installations";
var version = "0.4.19";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var PENDING_TIMEOUT_MS = 10000;
var PACKAGE_VERSION = "w:" + version;
var INTERNAL_AUTH_VERSION = 'FIS_v2';
var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour

var SERVICE = 'installations';
var SERVICE_NAME = 'Installations';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _a;

var ERROR_DESCRIPTION_MAP = (_a = {}, _a["missing-app-config-values"
/* MISSING_APP_CONFIG_VALUES */
] = 'Missing App configuration value: "{$valueName}"', _a["not-registered"
/* NOT_REGISTERED */
] = 'Firebase Installation is not registered.', _a["installation-not-found"
/* INSTALLATION_NOT_FOUND */
] = 'Firebase Installation not found.', _a["request-failed"
/* REQUEST_FAILED */
] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"', _a["app-offline"
/* APP_OFFLINE */
] = 'Could not process request. Application offline.', _a["delete-pending-registration"
/* DELETE_PENDING_REGISTRATION */
] = "Can't delete installation while there is a pending registration request.", _a);
var ERROR_FACTORY = new util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
/** Returns true if error is a FirebaseError that is based on an error from the server. */

function isServerError(error) {
  return error instanceof util.FirebaseError && error.code.includes("request-failed"
  /* REQUEST_FAILED */
  );
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getInstallationsEndpoint(_a) {
  var projectId = _a.projectId;
  return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
}

function extractAuthTokenInfoFromResponse(response) {
  return {
    token: response.token,
    requestStatus: 2
    /* COMPLETED */
    ,
    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
    creationTime: Date.now()
  };
}

function getErrorFromResponse(requestName, response) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var responseJson, errorData;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , response.json()];

        case 1:
          responseJson = _a.sent();
          errorData = responseJson.error;
          return [2
          /*return*/
          , ERROR_FACTORY.create("request-failed"
          /* REQUEST_FAILED */
          , {
            requestName: requestName,
            serverCode: errorData.code,
            serverMessage: errorData.message,
            serverStatus: errorData.status
          })];
      }
    });
  });
}

function getHeaders(_a) {
  var apiKey = _a.apiKey;
  return new Headers({
    'Content-Type': 'application/json',
    Accept: 'application/json',
    'x-goog-api-key': apiKey
  });
}

function getHeadersWithAuth(appConfig, _a) {
  var refreshToken = _a.refreshToken;
  var headers = getHeaders(appConfig);
  headers.append('Authorization', getAuthorizationHeader(refreshToken));
  return headers;
}
/**
 * Calls the passed in fetch wrapper and returns the response.
 * If the returned response has a status of 5xx, re-runs the function once and
 * returns the response.
 */


function retryIfServerError(fn) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var result;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , fn()];

        case 1:
          result = _a.sent();

          if (result.status >= 500 && result.status < 600) {
            // Internal Server Error. Retry request.
            return [2
            /*return*/
            , fn()];
          }

          return [2
          /*return*/
          , result];
      }
    });
  });
}

function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
  // This works because the server will never respond with fractions of a second.
  return Number(responseExpiresIn.replace('s', '000'));
}

function getAuthorizationHeader(refreshToken) {
  return INTERNAL_AUTH_VERSION + " " + refreshToken;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function createInstallationRequest(appConfig, _a) {
  var fid = _a.fid;
  return tslib.__awaiter(this, void 0, void 0, function () {
    var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          endpoint = getInstallationsEndpoint(appConfig);
          headers = getHeaders(appConfig);
          body = {
            fid: fid,
            authVersion: INTERNAL_AUTH_VERSION,
            appId: appConfig.appId,
            sdkVersion: PACKAGE_VERSION
          };
          request = {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(body)
          };
          return [4
          /*yield*/
          , retryIfServerError(function () {
            return fetch(endpoint, request);
          })];

        case 1:
          response = _b.sent();
          if (!response.ok) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , response.json()];

        case 2:
          responseValue = _b.sent();
          registeredInstallationEntry = {
            fid: responseValue.fid || fid,
            registrationStatus: 2
            /* COMPLETED */
            ,
            refreshToken: responseValue.refreshToken,
            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
          };
          return [2
          /*return*/
          , registeredInstallationEntry];

        case 3:
          return [4
          /*yield*/
          , getErrorFromResponse('Create Installation', response)];

        case 4:
          throw _b.sent();
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Returns a promise that resolves after given time passes. */


function sleep(ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function bufferToBase64UrlSafe(array) {
  var b64 = btoa(String.fromCharCode.apply(String, tslib.__spread(array)));
  return b64.replace(/\+/g, '-').replace(/\//g, '_');
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
var INVALID_FID = '';
/**
 * Generates a new FID using random values from Web Crypto API.
 * Returns an empty string if FID generation fails for any reason.
 */

function generateFid() {
  try {
    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
    // bytes. our implementation generates a 17 byte array instead.
    var fidByteArray = new Uint8Array(17);
    var crypto_1 = self.crypto || self.msCrypto;
    crypto_1.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.

    fidByteArray[0] = 112 + fidByteArray[0] % 16;
    var fid = encode(fidByteArray);
    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
  } catch (_a) {
    // FID generation errored
    return INVALID_FID;
  }
}
/** Converts a FID Uint8Array to a base64 string representation. */


function encode(fidByteArray) {
  var b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the
  // end of our 17 byte array, and the '=' padding.

  return b64String.substr(0, 22);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Returns a string key that can be used to identify the app. */


function getKey(appConfig) {
  return appConfig.appName + "!" + appConfig.appId;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var fidChangeCallbacks = new Map();
/**
 * Calls the onIdChange callbacks with the new FID value, and broadcasts the
 * change to other tabs.
 */

function fidChanged(appConfig, fid) {
  var key = getKey(appConfig);
  callFidChangeCallbacks(key, fid);
  broadcastFidChange(key, fid);
}

function addCallback(appConfig, callback) {
  // Open the broadcast channel if it's not already open,
  // to be able to listen to change events from other tabs.
  getBroadcastChannel();
  var key = getKey(appConfig);
  var callbackSet = fidChangeCallbacks.get(key);

  if (!callbackSet) {
    callbackSet = new Set();
    fidChangeCallbacks.set(key, callbackSet);
  }

  callbackSet.add(callback);
}

function removeCallback(appConfig, callback) {
  var key = getKey(appConfig);
  var callbackSet = fidChangeCallbacks.get(key);

  if (!callbackSet) {
    return;
  }

  callbackSet["delete"](callback);

  if (callbackSet.size === 0) {
    fidChangeCallbacks["delete"](key);
  } // Close broadcast channel if there are no more callbacks.


  closeBroadcastChannel();
}

function callFidChangeCallbacks(key, fid) {
  var e_1, _a;

  var callbacks = fidChangeCallbacks.get(key);

  if (!callbacks) {
    return;
  }

  try {
    for (var callbacks_1 = tslib.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
      var callback = callbacks_1_1.value;
      callback(fid);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1["return"])) _a.call(callbacks_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
}

function broadcastFidChange(key, fid) {
  var channel = getBroadcastChannel();

  if (channel) {
    channel.postMessage({
      key: key,
      fid: fid
    });
  }

  closeBroadcastChannel();
}

var broadcastChannel = null;
/** Opens and returns a BroadcastChannel if it is supported by the browser. */

function getBroadcastChannel() {
  if (!broadcastChannel && 'BroadcastChannel' in self) {
    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');

    broadcastChannel.onmessage = function (e) {
      callFidChangeCallbacks(e.data.key, e.data.fid);
    };
  }

  return broadcastChannel;
}

function closeBroadcastChannel() {
  if (fidChangeCallbacks.size === 0 && broadcastChannel) {
    broadcastChannel.close();
    broadcastChannel = null;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DATABASE_NAME = 'firebase-installations-database';
var DATABASE_VERSION = 1;
var OBJECT_STORE_NAME = 'firebase-installations-store';
var dbPromise = null;

function getDbPromise() {
  if (!dbPromise) {
    dbPromise = idb.openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
      // We don't use 'break' in this switch statement, the fall-through
      // behavior is what we want, because if there are multiple versions between
      // the old version and the current version, we want ALL the migrations
      // that correspond to those versions to run, not only the last one.
      // eslint-disable-next-line default-case
      switch (upgradeDB.oldVersion) {
        case 0:
          upgradeDB.createObjectStore(OBJECT_STORE_NAME);
      }
    });
  }

  return dbPromise;
}
/** Assigns or overwrites the record for the given key with the given value. */


function set(appConfig, value) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var key, db, tx, objectStore, oldValue;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          key = getKey(appConfig);
          return [4
          /*yield*/
          , getDbPromise()];

        case 1:
          db = _a.sent();
          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
          objectStore = tx.objectStore(OBJECT_STORE_NAME);
          return [4
          /*yield*/
          , objectStore.get(key)];

        case 2:
          oldValue = _a.sent();
          return [4
          /*yield*/
          , objectStore.put(value, key)];

        case 3:
          _a.sent();

          return [4
          /*yield*/
          , tx.complete];

        case 4:
          _a.sent();

          if (!oldValue || oldValue.fid !== value.fid) {
            fidChanged(appConfig, value.fid);
          }

          return [2
          /*return*/
          , value];
      }
    });
  });
}
/** Removes record(s) from the objectStore that match the given key. */


function remove(appConfig) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var key, db, tx;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          key = getKey(appConfig);
          return [4
          /*yield*/
          , getDbPromise()];

        case 1:
          db = _a.sent();
          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
          return [4
          /*yield*/
          , tx.objectStore(OBJECT_STORE_NAME)["delete"](key)];

        case 2:
          _a.sent();

          return [4
          /*yield*/
          , tx.complete];

        case 3:
          _a.sent();

          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Atomically updates a record with the result of updateFn, which gets
 * called with the current value. If newValue is undefined, the record is
 * deleted instead.
 * @return Updated value
 */


function update(appConfig, updateFn) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var key, db, tx, store, oldValue, newValue;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          key = getKey(appConfig);
          return [4
          /*yield*/
          , getDbPromise()];

        case 1:
          db = _a.sent();
          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
          store = tx.objectStore(OBJECT_STORE_NAME);
          return [4
          /*yield*/
          , store.get(key)];

        case 2:
          oldValue = _a.sent();
          newValue = updateFn(oldValue);
          if (!(newValue === undefined)) return [3
          /*break*/
          , 4];
          return [4
          /*yield*/
          , store["delete"](key)];

        case 3:
          _a.sent();

          return [3
          /*break*/
          , 6];

        case 4:
          return [4
          /*yield*/
          , store.put(newValue, key)];

        case 5:
          _a.sent();

          _a.label = 6;

        case 6:
          return [4
          /*yield*/
          , tx.complete];

        case 7:
          _a.sent();

          if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
            fidChanged(appConfig, newValue.fid);
          }

          return [2
          /*return*/
          , newValue];
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Updates and returns the InstallationEntry from the database.
 * Also triggers a registration request if it is necessary and possible.
 */


function getInstallationEntry(appConfig) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var registrationPromise, installationEntry;

    var _a;

    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          return [4
          /*yield*/
          , update(appConfig, function (oldEntry) {
            var installationEntry = updateOrCreateInstallationEntry(oldEntry);
            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
            registrationPromise = entryWithPromise.registrationPromise;
            return entryWithPromise.installationEntry;
          })];

        case 1:
          installationEntry = _b.sent();
          if (!(installationEntry.fid === INVALID_FID)) return [3
          /*break*/
          , 3];
          _a = {};
          return [4
          /*yield*/
          , registrationPromise];

        case 2:
          // FID generation failed. Waiting for the FID from the server.
          return [2
          /*return*/
          , (_a.installationEntry = _b.sent(), _a)];

        case 3:
          return [2
          /*return*/
          , {
            installationEntry: installationEntry,
            registrationPromise: registrationPromise
          }];
      }
    });
  });
}
/**
 * Creates a new Installation Entry if one does not exist.
 * Also clears timed out pending requests.
 */


function updateOrCreateInstallationEntry(oldEntry) {
  var entry = oldEntry || {
    fid: generateFid(),
    registrationStatus: 0
    /* NOT_STARTED */

  };
  return clearTimedOutRequest(entry);
}
/**
 * If the Firebase Installation is not registered yet, this will trigger the
 * registration and return an InProgressInstallationEntry.
 *
 * If registrationPromise does not exist, the installationEntry is guaranteed
 * to be registered.
 */


function triggerRegistrationIfNecessary(appConfig, installationEntry) {
  if (installationEntry.registrationStatus === 0
  /* NOT_STARTED */
  ) {
      if (!navigator.onLine) {
        // Registration required but app is offline.
        var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline"
        /* APP_OFFLINE */
        ));
        return {
          installationEntry: installationEntry,
          registrationPromise: registrationPromiseWithError
        };
      } // Try registering. Change status to IN_PROGRESS.


      var inProgressEntry = {
        fid: installationEntry.fid,
        registrationStatus: 1
        /* IN_PROGRESS */
        ,
        registrationTime: Date.now()
      };
      var registrationPromise = registerInstallation(appConfig, inProgressEntry);
      return {
        installationEntry: inProgressEntry,
        registrationPromise: registrationPromise
      };
    } else if (installationEntry.registrationStatus === 1
  /* IN_PROGRESS */
  ) {
      return {
        installationEntry: installationEntry,
        registrationPromise: waitUntilFidRegistration(appConfig)
      };
    } else {
    return {
      installationEntry: installationEntry
    };
  }
}
/** This will be executed only once for each new Firebase Installation. */


function registerInstallation(appConfig, installationEntry) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var registeredInstallationEntry, e_1;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2,, 7]);

          return [4
          /*yield*/
          , createInstallationRequest(appConfig, installationEntry)];

        case 1:
          registeredInstallationEntry = _a.sent();
          return [2
          /*return*/
          , set(appConfig, registeredInstallationEntry)];

        case 2:
          e_1 = _a.sent();
          if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3
          /*break*/
          , 4]; // Server returned a "FID can not be used" error.
          // Generate a new ID next time.

          return [4
          /*yield*/
          , remove(appConfig)];

        case 3:
          // Server returned a "FID can not be used" error.
          // Generate a new ID next time.
          _a.sent();

          return [3
          /*break*/
          , 6];

        case 4:
          // Registration failed. Set FID as not registered.
          return [4
          /*yield*/
          , set(appConfig, {
            fid: installationEntry.fid,
            registrationStatus: 0
            /* NOT_STARTED */

          })];

        case 5:
          // Registration failed. Set FID as not registered.
          _a.sent();

          _a.label = 6;

        case 6:
          throw e_1;

        case 7:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/** Call if FID registration is pending in another request. */


function waitUntilFidRegistration(appConfig) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var entry, _a, installationEntry, registrationPromise;

    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          return [4
          /*yield*/
          , updateInstallationRequest(appConfig)];

        case 1:
          entry = _b.sent();
          _b.label = 2;

        case 2:
          if (!(entry.registrationStatus === 1
          /* IN_PROGRESS */
          )) return [3
            /*break*/
            , 5]; // createInstallation request still in progress.

          return [4
          /*yield*/
          , sleep(100)];

        case 3:
          // createInstallation request still in progress.
          _b.sent();

          return [4
          /*yield*/
          , updateInstallationRequest(appConfig)];

        case 4:
          entry = _b.sent();
          return [3
          /*break*/
          , 2];

        case 5:
          if (!(entry.registrationStatus === 0
          /* NOT_STARTED */
          )) return [3
            /*break*/
            , 7];
          return [4
          /*yield*/
          , getInstallationEntry(appConfig)];

        case 6:
          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;

          if (registrationPromise) {
            return [2
            /*return*/
            , registrationPromise];
          } else {
            // if there is no registrationPromise, entry is registered.
            return [2
            /*return*/
            , installationEntry];
          }

        case 7:
          return [2
          /*return*/
          , entry];
      }
    });
  });
}
/**
 * Called only if there is a CreateInstallation request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * CreateInstallation request.
 *
 * Returns the updated InstallationEntry.
 */


function updateInstallationRequest(appConfig) {
  return update(appConfig, function (oldEntry) {
    if (!oldEntry) {
      throw ERROR_FACTORY.create("installation-not-found"
      /* INSTALLATION_NOT_FOUND */
      );
    }

    return clearTimedOutRequest(oldEntry);
  });
}

function clearTimedOutRequest(entry) {
  if (hasInstallationRequestTimedOut(entry)) {
    return {
      fid: entry.fid,
      registrationStatus: 0
      /* NOT_STARTED */

    };
  }

  return entry;
}

function hasInstallationRequestTimedOut(installationEntry) {
  return installationEntry.registrationStatus === 1
  /* IN_PROGRESS */
  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function generateAuthTokenRequest(_a, installationEntry) {
  var appConfig = _a.appConfig,
      platformLoggerProvider = _a.platformLoggerProvider;
  return tslib.__awaiter(this, void 0, void 0, function () {
    var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
          headers = getHeadersWithAuth(appConfig, installationEntry);
          platformLogger = platformLoggerProvider.getImmediate({
            optional: true
          });

          if (platformLogger) {
            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
          }

          body = {
            installation: {
              sdkVersion: PACKAGE_VERSION
            }
          };
          request = {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(body)
          };
          return [4
          /*yield*/
          , retryIfServerError(function () {
            return fetch(endpoint, request);
          })];

        case 1:
          response = _b.sent();
          if (!response.ok) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , response.json()];

        case 2:
          responseValue = _b.sent();
          completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
          return [2
          /*return*/
          , completedAuthToken];

        case 3:
          return [4
          /*yield*/
          , getErrorFromResponse('Generate Auth Token', response)];

        case 4:
          throw _b.sent();
      }
    });
  });
}

function getGenerateAuthTokenEndpoint(appConfig, _a) {
  var fid = _a.fid;
  return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a valid authentication token for the installation. Generates a new
 * token if one doesn't exist, is expired or about to expire.
 *
 * Should only be called if the Firebase Installation is registered.
 */


function refreshAuthToken(dependencies, forceRefresh) {
  if (forceRefresh === void 0) {
    forceRefresh = false;
  }

  return tslib.__awaiter(this, void 0, void 0, function () {
    var tokenPromise, entry, authToken, _a;

    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          return [4
          /*yield*/
          , update(dependencies.appConfig, function (oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
              throw ERROR_FACTORY.create("not-registered"
              /* NOT_REGISTERED */
              );
            }

            var oldAuthToken = oldEntry.authToken;

            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
              // There is a valid token in the DB.
              return oldEntry;
            } else if (oldAuthToken.requestStatus === 1
            /* IN_PROGRESS */
            ) {
                // There already is a token request in progress.
                tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
                return oldEntry;
              } else {
              // No token or token expired.
              if (!navigator.onLine) {
                throw ERROR_FACTORY.create("app-offline"
                /* APP_OFFLINE */
                );
              }

              var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
              tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
              return inProgressEntry;
            }
          })];

        case 1:
          entry = _b.sent();
          if (!tokenPromise) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , tokenPromise];

        case 2:
          _a = _b.sent();
          return [3
          /*break*/
          , 4];

        case 3:
          _a = entry.authToken;
          _b.label = 4;

        case 4:
          authToken = _a;
          return [2
          /*return*/
          , authToken];
      }
    });
  });
}
/**
 * Call only if FID is registered and Auth Token request is in progress.
 *
 * Waits until the current pending request finishes. If the request times out,
 * tries once in this thread as well.
 */


function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var entry, authToken;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , updateAuthTokenRequest(dependencies.appConfig)];

        case 1:
          entry = _a.sent();
          _a.label = 2;

        case 2:
          if (!(entry.authToken.requestStatus === 1
          /* IN_PROGRESS */
          )) return [3
            /*break*/
            , 5]; // generateAuthToken still in progress.

          return [4
          /*yield*/
          , sleep(100)];

        case 3:
          // generateAuthToken still in progress.
          _a.sent();

          return [4
          /*yield*/
          , updateAuthTokenRequest(dependencies.appConfig)];

        case 4:
          entry = _a.sent();
          return [3
          /*break*/
          , 2];

        case 5:
          authToken = entry.authToken;

          if (authToken.requestStatus === 0
          /* NOT_STARTED */
          ) {
              // The request timed out or failed in a different call. Try again.
              return [2
              /*return*/
              , refreshAuthToken(dependencies, forceRefresh)];
            } else {
            return [2
            /*return*/
            , authToken];
          }

      }
    });
  });
}
/**
 * Called only if there is a GenerateAuthToken request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * GenerateAuthToken request.
 *
 * Returns the updated InstallationEntry.
 */


function updateAuthTokenRequest(appConfig) {
  return update(appConfig, function (oldEntry) {
    if (!isEntryRegistered(oldEntry)) {
      throw ERROR_FACTORY.create("not-registered"
      /* NOT_REGISTERED */
      );
    }

    var oldAuthToken = oldEntry.authToken;

    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
      return tslib.__assign(tslib.__assign({}, oldEntry), {
        authToken: {
          requestStatus: 0
          /* NOT_STARTED */

        }
      });
    }

    return oldEntry;
  });
}

function fetchAuthTokenFromServer(dependencies, installationEntry) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 3,, 8]);

          return [4
          /*yield*/
          , generateAuthTokenRequest(dependencies, installationEntry)];

        case 1:
          authToken = _a.sent();
          updatedInstallationEntry = tslib.__assign(tslib.__assign({}, installationEntry), {
            authToken: authToken
          });
          return [4
          /*yield*/
          , set(dependencies.appConfig, updatedInstallationEntry)];

        case 2:
          _a.sent();

          return [2
          /*return*/
          , authToken];

        case 3:
          e_1 = _a.sent();
          if (!(isServerError(e_1) && (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3
          /*break*/
          , 5]; // Server returned a "FID not found" or a "Invalid authentication" error.
          // Generate a new ID next time.

          return [4
          /*yield*/
          , remove(dependencies.appConfig)];

        case 4:
          // Server returned a "FID not found" or a "Invalid authentication" error.
          // Generate a new ID next time.
          _a.sent();

          return [3
          /*break*/
          , 7];

        case 5:
          updatedInstallationEntry = tslib.__assign(tslib.__assign({}, installationEntry), {
            authToken: {
              requestStatus: 0
              /* NOT_STARTED */

            }
          });
          return [4
          /*yield*/
          , set(dependencies.appConfig, updatedInstallationEntry)];

        case 6:
          _a.sent();

          _a.label = 7;

        case 7:
          throw e_1;

        case 8:
          return [2
          /*return*/
          ];
      }
    });
  });
}

function isEntryRegistered(installationEntry) {
  return installationEntry !== undefined && installationEntry.registrationStatus === 2
  /* COMPLETED */
  ;
}

function isAuthTokenValid(authToken) {
  return authToken.requestStatus === 2
  /* COMPLETED */
  && !isAuthTokenExpired(authToken);
}

function isAuthTokenExpired(authToken) {
  var now = Date.now();
  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
}
/** Returns an updated InstallationEntry with an InProgressAuthToken. */


function makeAuthTokenRequestInProgressEntry(oldEntry) {
  var inProgressAuthToken = {
    requestStatus: 1
    /* IN_PROGRESS */
    ,
    requestTime: Date.now()
  };
  return tslib.__assign(tslib.__assign({}, oldEntry), {
    authToken: inProgressAuthToken
  });
}

function hasAuthTokenRequestTimedOut(authToken) {
  return authToken.requestStatus === 1
  /* IN_PROGRESS */
  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _getId(dependencies) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var _a, installationEntry, registrationPromise;

    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          return [4
          /*yield*/
          , getInstallationEntry(dependencies.appConfig)];

        case 1:
          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;

          if (registrationPromise) {
            registrationPromise["catch"](console.error);
          } else {
            // If the installation is already registered, update the authentication
            // token if needed.
            refreshAuthToken(dependencies)["catch"](console.error);
          }

          return [2
          /*return*/
          , installationEntry.fid];
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _getToken(dependencies, forceRefresh) {
  if (forceRefresh === void 0) {
    forceRefresh = false;
  }

  return tslib.__awaiter(this, void 0, void 0, function () {
    var authToken;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , completeInstallationRegistration(dependencies.appConfig)];

        case 1:
          _a.sent();

          return [4
          /*yield*/
          , refreshAuthToken(dependencies, forceRefresh)];

        case 2:
          authToken = _a.sent();
          return [2
          /*return*/
          , authToken.token];
      }
    });
  });
}

function completeInstallationRegistration(appConfig) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var registrationPromise;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , getInstallationEntry(appConfig)];

        case 1:
          registrationPromise = _a.sent().registrationPromise;
          if (!registrationPromise) return [3
          /*break*/
          , 3]; // A createInstallation request is in progress. Wait until it finishes.

          return [4
          /*yield*/
          , registrationPromise];

        case 2:
          // A createInstallation request is in progress. Wait until it finishes.
          _a.sent();

          _a.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function deleteInstallationRequest(appConfig, installationEntry) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var endpoint, headers, request, response;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          endpoint = getDeleteEndpoint(appConfig, installationEntry);
          headers = getHeadersWithAuth(appConfig, installationEntry);
          request = {
            method: 'DELETE',
            headers: headers
          };
          return [4
          /*yield*/
          , retryIfServerError(function () {
            return fetch(endpoint, request);
          })];

        case 1:
          response = _a.sent();
          if (!!response.ok) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , getErrorFromResponse('Delete Installation', response)];

        case 2:
          throw _a.sent();

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}

function getDeleteEndpoint(appConfig, _a) {
  var fid = _a.fid;
  return getInstallationsEndpoint(appConfig) + "/" + fid;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function deleteInstallation(dependencies) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var appConfig, entry;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          appConfig = dependencies.appConfig;
          return [4
          /*yield*/
          , update(appConfig, function (oldEntry) {
            if (oldEntry && oldEntry.registrationStatus === 0
            /* NOT_STARTED */
            ) {
                // Delete the unregistered entry without sending a deleteInstallation request.
                return undefined;
              }

            return oldEntry;
          })];

        case 1:
          entry = _a.sent();
          if (!entry) return [3
          /*break*/
          , 6];
          if (!(entry.registrationStatus === 1
          /* IN_PROGRESS */
          )) return [3
            /*break*/
            , 2]; // Can't delete while trying to register.

          throw ERROR_FACTORY.create("delete-pending-registration"
          /* DELETE_PENDING_REGISTRATION */
          );

        case 2:
          if (!(entry.registrationStatus === 2
          /* COMPLETED */
          )) return [3
            /*break*/
            , 6];
          if (!!navigator.onLine) return [3
          /*break*/
          , 3];
          throw ERROR_FACTORY.create("app-offline"
          /* APP_OFFLINE */
          );

        case 3:
          return [4
          /*yield*/
          , deleteInstallationRequest(appConfig, entry)];

        case 4:
          _a.sent();

          return [4
          /*yield*/
          , remove(appConfig)];

        case 5:
          _a.sent();

          _a.label = 6;

        case 6:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sets a new callback that will get called when Installation ID changes.
 * Returns an unsubscribe function that will remove the callback when called.
 */


function _onIdChange(_a, callback) {
  var appConfig = _a.appConfig;
  addCallback(appConfig, callback);
  return function () {
    removeCallback(appConfig, callback);
  };
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function extractAppConfig(app) {
  var e_1, _a;

  if (!app || !app.options) {
    throw getMissingValueError('App Configuration');
  }

  if (!app.name) {
    throw getMissingValueError('App Name');
  } // Required app config keys


  var configKeys = ['projectId', 'apiKey', 'appId'];

  try {
    for (var configKeys_1 = tslib.__values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
      var keyName = configKeys_1_1.value;

      if (!app.options[keyName]) {
        throw getMissingValueError(keyName);
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1["return"])) _a.call(configKeys_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  return {
    appName: app.name,
    projectId: app.options.projectId,
    apiKey: app.options.apiKey,
    appId: app.options.appId
  };
}

function getMissingValueError(valueName) {
  return ERROR_FACTORY.create("missing-app-config-values"
  /* MISSING_APP_CONFIG_VALUES */
  , {
    valueName: valueName
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function registerInstallations(instance) {
  var installationsName = 'installations';
  instance.INTERNAL.registerComponent(new component.Component(installationsName, function (container) {
    var app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.

    var appConfig = extractAppConfig(app);
    var platformLoggerProvider = container.getProvider('platform-logger');
    var dependencies = {
      appConfig: appConfig,
      platformLoggerProvider: platformLoggerProvider
    };
    var installations = {
      app: app,
      getId: function getId() {
        return _getId(dependencies);
      },
      getToken: function getToken(forceRefresh) {
        return _getToken(dependencies, forceRefresh);
      },
      "delete": function _delete() {
        return deleteInstallation(dependencies);
      },
      onIdChange: function onIdChange(callback) {
        return _onIdChange(dependencies, callback);
      }
    };
    return installations;
  }, "PUBLIC"
  /* PUBLIC */
  ));
  instance.registerVersion(name, version);
}

registerInstallations(firebase__default['default']);
exports.registerInstallations = registerInstallations;

},{"@firebase/app":3,"@firebase/component":5,"@firebase/util":9,"idb":16,"tslib":17}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var _a;
/**
 * A container for all of the Logger instances
 */


var instances = [];

(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
  LogLevel[LogLevel["INFO"] = 2] = "INFO";
  LogLevel[LogLevel["WARN"] = 3] = "WARN";
  LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(exports.LogLevel || (exports.LogLevel = {}));

var levelStringToEnum = {
  'debug': exports.LogLevel.DEBUG,
  'verbose': exports.LogLevel.VERBOSE,
  'info': exports.LogLevel.INFO,
  'warn': exports.LogLevel.WARN,
  'error': exports.LogLevel.ERROR,
  'silent': exports.LogLevel.SILENT
};
/**
 * The default log level
 */

var defaultLogLevel = exports.LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */

var ConsoleMethod = (_a = {}, _a[exports.LogLevel.DEBUG] = 'log', _a[exports.LogLevel.VERBOSE] = 'log', _a[exports.LogLevel.INFO] = 'info', _a[exports.LogLevel.WARN] = 'warn', _a[exports.LogLevel.ERROR] = 'error', _a);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */

var defaultLogHandler = function defaultLogHandler(instance, logType) {
  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  if (logType < instance.logLevel) {
    return;
  }

  var now = new Date().toISOString();
  var method = ConsoleMethod[logType];

  if (method) {
    console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
  } else {
    throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
  }
};

var Logger =
/** @class */
function () {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  function Logger(name) {
    this.name = name;
    /**
     * The log level of the given Logger instance.
     */

    this._logLevel = defaultLogLevel;
    /**
     * The main (internal) log handler for the Logger instance.
     * Can be set to a new function in internal package code but not by user.
     */

    this._logHandler = defaultLogHandler;
    /**
     * The optional, additional, user-defined log handler for the Logger instance.
     */

    this._userLogHandler = null;
    /**
     * Capture the current instance for later use
     */

    instances.push(this);
  }

  Object.defineProperty(Logger.prototype, "logLevel", {
    get: function get() {
      return this._logLevel;
    },
    set: function set(val) {
      if (!(val in exports.LogLevel)) {
        throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
      }

      this._logLevel = val;
    },
    enumerable: false,
    configurable: true
  }); // Workaround for setter/getter having to be the same type.

  Logger.prototype.setLogLevel = function (val) {
    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
  };

  Object.defineProperty(Logger.prototype, "logHandler", {
    get: function get() {
      return this._logHandler;
    },
    set: function set(val) {
      if (typeof val !== 'function') {
        throw new TypeError('Value assigned to `logHandler` must be a function');
      }

      this._logHandler = val;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Logger.prototype, "userLogHandler", {
    get: function get() {
      return this._userLogHandler;
    },
    set: function set(val) {
      this._userLogHandler = val;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * The functions below are all based on the `console` interface
   */

  Logger.prototype.debug = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));

    this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));
  };

  Logger.prototype.log = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));

    this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));
  };

  Logger.prototype.info = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));

    this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));
  };

  Logger.prototype.warn = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));

    this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));
  };

  Logger.prototype.error = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));

    this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));
  };

  return Logger;
}();

function setLogLevel(level) {
  instances.forEach(function (inst) {
    inst.setLogLevel(level);
  });
}

function setUserLogHandler(logCallback, options) {
  var _loop_1 = function _loop_1(instance) {
    var customLogLevel = null;

    if (options && options.level) {
      customLogLevel = levelStringToEnum[options.level];
    }

    if (logCallback === null) {
      instance.userLogHandler = null;
    } else {
      instance.userLogHandler = function (instance, level) {
        var args = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }

        var message = args.map(function (arg) {
          if (arg == null) {
            return null;
          } else if (typeof arg === 'string') {
            return arg;
          } else if (typeof arg === 'number' || typeof arg === 'boolean') {
            return arg.toString();
          } else if (arg instanceof Error) {
            return arg.message;
          } else {
            try {
              return JSON.stringify(arg);
            } catch (ignored) {
              return null;
            }
          }
        }).filter(function (arg) {
          return arg;
        }).join(' ');

        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
          logCallback({
            level: exports.LogLevel[level].toLowerCase(),
            message: message,
            args: args,
            type: instance.name
          });
        }
      };
    }
  };

  for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
    var instance = instances_1[_i];

    _loop_1(instance);
  }
}

exports.Logger = Logger;
exports.setLogLevel = setLogLevel;
exports.setUserLogHandler = setUserLogHandler;

},{}],8:[function(require,module,exports){
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var firebase = require('@firebase/app');

var tslib = require('tslib');

var util = require('@firebase/util');

var component = require('@firebase/component');

function _interopDefaultLegacy(e) {
  return e && _typeof(e) === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Constants used in the Firebase Storage library.
 */

/**
 * Domain name for firebase storage.
 */


var DEFAULT_HOST = 'firebasestorage.googleapis.com';
/**
 * The key in Firebase config json for the storage bucket.
 */

var CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
/**
 * 2 minutes
 *
 * The timeout for all operations except upload.
 */

var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
/**
 * 10 minutes
 *
 * The timeout for upload.
 */

var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;

var FirebaseStorageError =
/** @class */
function (_super) {
  tslib.__extends(FirebaseStorageError, _super);

  function FirebaseStorageError(code, message) {
    var _this = _super.call(this, prependCode(code), "Firebase Storage: " + message + " (" + prependCode(code) + ")") || this;

    _this.customData = {
      serverResponse: null
    }; // Without this, `instanceof FirebaseStorageError`, in tests for example,
    // returns false.

    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);
    return _this;
  }

  FirebaseStorageError.prototype.codeEquals = function (code) {
    return prependCode(code) === this.code;
  };

  Object.defineProperty(FirebaseStorageError.prototype, "message", {
    get: function get() {
      if (this.customData.serverResponse) {
        return this.message + "\n" + this.customData.serverResponse;
      } else {
        return this.message;
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
    get: function get() {
      return this.customData.serverResponse;
    },
    set: function set(serverResponse) {
      this.customData.serverResponse = serverResponse;
    },
    enumerable: false,
    configurable: true
  });
  return FirebaseStorageError;
}(util.FirebaseError);

var Code = {
  // Shared between all platforms
  UNKNOWN: 'unknown',
  OBJECT_NOT_FOUND: 'object-not-found',
  BUCKET_NOT_FOUND: 'bucket-not-found',
  PROJECT_NOT_FOUND: 'project-not-found',
  QUOTA_EXCEEDED: 'quota-exceeded',
  UNAUTHENTICATED: 'unauthenticated',
  UNAUTHORIZED: 'unauthorized',
  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
  INVALID_CHECKSUM: 'invalid-checksum',
  CANCELED: 'canceled',
  // JS specific
  INVALID_EVENT_NAME: 'invalid-event-name',
  INVALID_URL: 'invalid-url',
  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
  NO_DEFAULT_BUCKET: 'no-default-bucket',
  CANNOT_SLICE_BLOB: 'cannot-slice-blob',
  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
  NO_DOWNLOAD_URL: 'no-download-url',
  INVALID_ARGUMENT: 'invalid-argument',
  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
  APP_DELETED: 'app-deleted',
  INVALID_ROOT_OPERATION: 'invalid-root-operation',
  INVALID_FORMAT: 'invalid-format',
  INTERNAL_ERROR: 'internal-error',
  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'
};

function prependCode(code) {
  return 'storage/' + code;
}

function unknown() {
  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';
  return new FirebaseStorageError(Code.UNKNOWN, message);
}

function objectNotFound(path) {
  return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
}

function quotaExceeded(bucket) {
  return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" + bucket + "' exceeded, please view quota on " + 'https://firebase.google.com/pricing/.');
}

function unauthenticated() {
  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';
  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
}

function unauthorized(path) {
  return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
}

function retryLimitExceeded() {
  return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
}

function canceled() {
  return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
}

function invalidUrl(url) {
  return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
}

function invalidDefaultBucket(bucket) {
  return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
}

function noDefaultBucket() {
  return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' + "found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
}

function cannotSliceBlob() {
  return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
}

function serverFileWrongSize() {
  return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
}

function noDownloadURL() {
  return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
}

function invalidArgument(message) {
  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);
}

function appDeleted() {
  return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
}
/**
 * @param name - The name of the operation that was invalid.
 */


function invalidRootOperation(name) {
  return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" + name + "' cannot be performed on a root reference, create a non-root " + "reference using child, such as .child('file.png').");
}
/**
 * @param format - The format that was not valid.
 * @param message - A message describing the format violation.
 */


function invalidFormat(format, message) {
  return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
}
/**
 * @param message - A message describing the internal error.
 */


function internalError(message) {
  throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var StringFormat = {
  RAW: 'raw',
  BASE64: 'base64',
  BASE64URL: 'base64url',
  DATA_URL: 'data_url'
};

var StringData =
/** @class */
function () {
  function StringData(data, contentType) {
    this.data = data;
    this.contentType = contentType || null;
  }

  return StringData;
}();

function dataFromString(format, stringData) {
  switch (format) {
    case StringFormat.RAW:
      return new StringData(utf8Bytes_(stringData));

    case StringFormat.BASE64:
    case StringFormat.BASE64URL:
      return new StringData(base64Bytes_(format, stringData));

    case StringFormat.DATA_URL:
      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
    // do nothing
  } // assert(false);


  throw unknown();
}

function utf8Bytes_(value) {
  var b = [];

  for (var i = 0; i < value.length; i++) {
    var c = value.charCodeAt(i);

    if (c <= 127) {
      b.push(c);
    } else {
      if (c <= 2047) {
        b.push(192 | c >> 6, 128 | c & 63);
      } else {
        if ((c & 64512) === 55296) {
          // The start of a surrogate pair.
          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;

          if (!valid) {
            // The second surrogate wasn't there.
            b.push(239, 191, 189);
          } else {
            var hi = c;
            var lo = value.charCodeAt(++i);
            c = 65536 | (hi & 1023) << 10 | lo & 1023;
            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
          }
        } else {
          if ((c & 64512) === 56320) {
            // Invalid low surrogate.
            b.push(239, 191, 189);
          } else {
            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
          }
        }
      }
    }
  }

  return new Uint8Array(b);
}

function percentEncodedBytes_(value) {
  var decoded;

  try {
    decoded = decodeURIComponent(value);
  } catch (e) {
    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
  }

  return utf8Bytes_(decoded);
}

function base64Bytes_(format, value) {
  switch (format) {
    case StringFormat.BASE64:
      {
        var hasMinus = value.indexOf('-') !== -1;
        var hasUnder = value.indexOf('_') !== -1;

        if (hasMinus || hasUnder) {
          var invalidChar = hasMinus ? '-' : '_';
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
        }

        break;
      }

    case StringFormat.BASE64URL:
      {
        var hasPlus = value.indexOf('+') !== -1;
        var hasSlash = value.indexOf('/') !== -1;

        if (hasPlus || hasSlash) {
          var invalidChar = hasPlus ? '+' : '/';
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
        }

        value = value.replace(/-/g, '+').replace(/_/g, '/');
        break;
      }
    // do nothing
  }

  var bytes;

  try {
    bytes = atob(value);
  } catch (e) {
    throw invalidFormat(format, 'Invalid character found');
  }

  var array = new Uint8Array(bytes.length);

  for (var i = 0; i < bytes.length; i++) {
    array[i] = bytes.charCodeAt(i);
  }

  return array;
}

var DataURLParts =
/** @class */
function () {
  function DataURLParts(dataURL) {
    this.base64 = false;
    this.contentType = null;
    var matches = dataURL.match(/^data:([^,]+)?,/);

    if (matches === null) {
      throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
    }

    var middle = matches[1] || null;

    if (middle != null) {
      this.base64 = endsWith(middle, ';base64');
      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;
    }

    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
  }

  return DataURLParts;
}();

function dataURLBytes_(dataUrl) {
  var parts = new DataURLParts(dataUrl);

  if (parts.base64) {
    return base64Bytes_(StringFormat.BASE64, parts.rest);
  } else {
    return percentEncodedBytes_(parts.rest);
  }
}

function dataURLContentType_(dataUrl) {
  var parts = new DataURLParts(dataUrl);
  return parts.contentType;
}

function endsWith(s, end) {
  var longEnough = s.length >= end.length;

  if (!longEnough) {
    return false;
  }

  return s.substring(s.length - end.length) === end;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var TaskEvent = {
  /** Triggered whenever the task changes or progress is updated. */
  STATE_CHANGED: 'state_changed'
};
var InternalTaskState = {
  RUNNING: 'running',
  PAUSING: 'pausing',
  PAUSED: 'paused',
  SUCCESS: 'success',
  CANCELING: 'canceling',
  CANCELED: 'canceled',
  ERROR: 'error'
};
var TaskState = {
  /** The task is currently transferring data. */
  RUNNING: 'running',

  /** The task was paused by the user. */
  PAUSED: 'paused',

  /** The task completed successfully. */
  SUCCESS: 'success',

  /** The task was canceled. */
  CANCELED: 'canceled',

  /** The task failed with an error. */
  ERROR: 'error'
};

function taskStateFromInternalTaskState(state) {
  switch (state) {
    case InternalTaskState.RUNNING:
    case InternalTaskState.PAUSING:
    case InternalTaskState.CANCELING:
      return TaskState.RUNNING;

    case InternalTaskState.PAUSED:
      return TaskState.PAUSED;

    case InternalTaskState.SUCCESS:
      return TaskState.SUCCESS;

    case InternalTaskState.CANCELED:
      return TaskState.CANCELED;

    case InternalTaskState.ERROR:
      return TaskState.ERROR;

    default:
      // TODO(andysoto): assert(false);
      return TaskState.ERROR;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ErrorCode;

(function (ErrorCode) {
  ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
  ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
  ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
})(ErrorCode || (ErrorCode = {}));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
 * doesn't work in React Native on Android.
 */


var NetworkXhrIo =
/** @class */
function () {
  function NetworkXhrIo() {
    var _this = this;

    this.sent_ = false;
    this.xhr_ = new XMLHttpRequest();
    this.errorCode_ = ErrorCode.NO_ERROR;
    this.sendPromise_ = new Promise(function (resolve) {
      _this.xhr_.addEventListener('abort', function () {
        _this.errorCode_ = ErrorCode.ABORT;
        resolve(_this);
      });

      _this.xhr_.addEventListener('error', function () {
        _this.errorCode_ = ErrorCode.NETWORK_ERROR;
        resolve(_this);
      });

      _this.xhr_.addEventListener('load', function () {
        resolve(_this);
      });
    });
  }
  /**
   * @override
   */


  NetworkXhrIo.prototype.send = function (url, method, body, headers) {
    if (this.sent_) {
      throw internalError('cannot .send() more than once');
    }

    this.sent_ = true;
    this.xhr_.open(method, url, true);

    if (headers !== undefined) {
      for (var key in headers) {
        if (headers.hasOwnProperty(key)) {
          this.xhr_.setRequestHeader(key, headers[key].toString());
        }
      }
    }

    if (body !== undefined) {
      this.xhr_.send(body);
    } else {
      this.xhr_.send();
    }

    return this.sendPromise_;
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getErrorCode = function () {
    if (!this.sent_) {
      throw internalError('cannot .getErrorCode() before sending');
    }

    return this.errorCode_;
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getStatus = function () {
    if (!this.sent_) {
      throw internalError('cannot .getStatus() before sending');
    }

    try {
      return this.xhr_.status;
    } catch (e) {
      return -1;
    }
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getResponseText = function () {
    if (!this.sent_) {
      throw internalError('cannot .getResponseText() before sending');
    }

    return this.xhr_.responseText;
  };
  /**
   * Aborts the request.
   * @override
   */


  NetworkXhrIo.prototype.abort = function () {
    this.xhr_.abort();
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getResponseHeader = function (header) {
    return this.xhr_.getResponseHeader(header);
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
    if (this.xhr_.upload != null) {
      this.xhr_.upload.addEventListener('progress', listener);
    }
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
    if (this.xhr_.upload != null) {
      this.xhr_.upload.removeEventListener('progress', listener);
    }
  };

  return NetworkXhrIo;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Factory-like class for creating XhrIo instances.
 */


var XhrIoPool =
/** @class */
function () {
  function XhrIoPool() {}

  XhrIoPool.prototype.createXhrIo = function () {
    return new NetworkXhrIo();
  };

  return XhrIoPool;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isJustDef(p) {
  return p !== void 0;
} // eslint-disable-next-line @typescript-eslint/ban-types


function isFunction(p) {
  return typeof p === 'function';
}

function isNonArrayObject(p) {
  return _typeof(p) === 'object' && !Array.isArray(p);
}

function isString(p) {
  return typeof p === 'string' || p instanceof String;
}

function isNativeBlob(p) {
  return isNativeBlobDefined() && p instanceof Blob;
}

function isNativeBlobDefined() {
  return typeof Blob !== 'undefined';
}

function validateNumber(argument, minValue, maxValue, value) {
  if (value < minValue) {
    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, "Invalid value for '" + argument + "'. Expected " + minValue + " or greater.");
  }

  if (value > maxValue) {
    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, "Invalid value for '" + argument + "'. Expected " + maxValue + " or less.");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getBlobBuilder() {
  if (typeof BlobBuilder !== 'undefined') {
    return BlobBuilder;
  } else if (typeof WebKitBlobBuilder !== 'undefined') {
    return WebKitBlobBuilder;
  } else {
    return undefined;
  }
}
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param args The values that will make up the resulting blob.
 * @return The blob.
 */


function getBlob() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var BlobBuilder = getBlobBuilder();

  if (BlobBuilder !== undefined) {
    var bb = new BlobBuilder();

    for (var i = 0; i < args.length; i++) {
      bb.append(args[i]);
    }

    return bb.getBlob();
  } else {
    if (isNativeBlobDefined()) {
      return new Blob(args);
    } else {
      throw new FirebaseStorageError(Code.UNSUPPORTED_ENVIRONMENT, "This browser doesn't seem to support creating Blobs");
    }
  }
}
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */


function sliceBlob(blob, start, end) {
  if (blob.webkitSlice) {
    return blob.webkitSlice(start, end);
  } else if (blob.mozSlice) {
    return blob.mozSlice(start, end);
  } else if (blob.slice) {
    return blob.slice(start, end);
  }

  return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param opt_elideCopy - If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 */


var FbsBlob =
/** @class */
function () {
  function FbsBlob(data, elideCopy) {
    var size = 0;
    var blobType = '';

    if (isNativeBlob(data)) {
      this.data_ = data;
      size = data.size;
      blobType = data.type;
    } else if (data instanceof ArrayBuffer) {
      if (elideCopy) {
        this.data_ = new Uint8Array(data);
      } else {
        this.data_ = new Uint8Array(data.byteLength);
        this.data_.set(new Uint8Array(data));
      }

      size = this.data_.length;
    } else if (data instanceof Uint8Array) {
      if (elideCopy) {
        this.data_ = data;
      } else {
        this.data_ = new Uint8Array(data.length);
        this.data_.set(data);
      }

      size = data.length;
    }

    this.size_ = size;
    this.type_ = blobType;
  }

  FbsBlob.prototype.size = function () {
    return this.size_;
  };

  FbsBlob.prototype.type = function () {
    return this.type_;
  };

  FbsBlob.prototype.slice = function (startByte, endByte) {
    if (isNativeBlob(this.data_)) {
      var realBlob = this.data_;
      var sliced = sliceBlob(realBlob, startByte, endByte);

      if (sliced === null) {
        return null;
      }

      return new FbsBlob(sliced);
    } else {
      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
      return new FbsBlob(slice, true);
    }
  };

  FbsBlob.getBlob = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (isNativeBlobDefined()) {
      var blobby = args.map(function (val) {
        if (val instanceof FbsBlob) {
          return val.data_;
        } else {
          return val;
        }
      });
      return new FbsBlob(getBlob.apply(null, blobby));
    } else {
      var uint8Arrays = args.map(function (val) {
        if (isString(val)) {
          return dataFromString(StringFormat.RAW, val).data;
        } else {
          // Blobs don't exist, so this has to be a Uint8Array.
          return val.data_;
        }
      });
      var finalLength_1 = 0;
      uint8Arrays.forEach(function (array) {
        finalLength_1 += array.byteLength;
      });
      var merged_1 = new Uint8Array(finalLength_1);
      var index_1 = 0;
      uint8Arrays.forEach(function (array) {
        for (var i = 0; i < array.length; i++) {
          merged_1[index_1++] = array[i];
        }
      });
      return new FbsBlob(merged_1, true);
    }
  };

  FbsBlob.prototype.uploadData = function () {
    return this.data_;
  };

  return FbsBlob;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Location =
/** @class */
function () {
  function Location(bucket, path) {
    this.bucket = bucket;
    this.path_ = path;
  }

  Object.defineProperty(Location.prototype, "path", {
    get: function get() {
      return this.path_;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Location.prototype, "isRoot", {
    get: function get() {
      return this.path.length === 0;
    },
    enumerable: false,
    configurable: true
  });

  Location.prototype.fullServerUrl = function () {
    var encode = encodeURIComponent;
    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
  };

  Location.prototype.bucketOnlyServerUrl = function () {
    var encode = encodeURIComponent;
    return '/b/' + encode(this.bucket) + '/o';
  };

  Location.makeFromBucketSpec = function (bucketString) {
    var bucketLocation;

    try {
      bucketLocation = Location.makeFromUrl(bucketString);
    } catch (e) {
      // Not valid URL, use as-is. This lets you put bare bucket names in
      // config.
      return new Location(bucketString, '');
    }

    if (bucketLocation.path === '') {
      return bucketLocation;
    } else {
      throw invalidDefaultBucket(bucketString);
    }
  };

  Location.makeFromUrl = function (url) {
    var location = null;
    var bucketDomain = '([A-Za-z0-9.\\-_]+)';

    function gsModify(loc) {
      if (loc.path.charAt(loc.path.length - 1) === '/') {
        loc.path_ = loc.path_.slice(0, -1);
      }
    }

    var gsPath = '(/(.*))?$';
    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
    var gsIndices = {
      bucket: 1,
      path: 3
    };

    function httpModify(loc) {
      loc.path_ = decodeURIComponent(loc.path);
    }

    var version = 'v[A-Za-z0-9_]+';
    var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\.');
    var firebaseStoragePath = '(/([^?#]*).*)?$';
    var firebaseStorageRegExp = new RegExp("^https?://" + firebaseStorageHost + "/" + version + "/b/" + bucketDomain + "/o" + firebaseStoragePath, 'i');
    var firebaseStorageIndices = {
      bucket: 1,
      path: 3
    };
    var cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';
    var cloudStoragePath = '([^?#]*)';
    var cloudStorageRegExp = new RegExp("^https?://" + cloudStorageHost + "/" + bucketDomain + "/" + cloudStoragePath, 'i');
    var cloudStorageIndices = {
      bucket: 1,
      path: 2
    };
    var groups = [{
      regex: gsRegex,
      indices: gsIndices,
      postModify: gsModify
    }, {
      regex: firebaseStorageRegExp,
      indices: firebaseStorageIndices,
      postModify: httpModify
    }, {
      regex: cloudStorageRegExp,
      indices: cloudStorageIndices,
      postModify: httpModify
    }];

    for (var i = 0; i < groups.length; i++) {
      var group = groups[i];
      var captures = group.regex.exec(url);

      if (captures) {
        var bucketValue = captures[group.indices.bucket];
        var pathValue = captures[group.indices.path];

        if (!pathValue) {
          pathValue = '';
        }

        location = new Location(bucketValue, pathValue);
        group.postModify(location);
        break;
      }
    }

    if (location == null) {
      throw invalidUrl(url);
    }

    return location;
  };

  return Location;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */


function jsonObjectOrNull(s) {
  var obj;

  try {
    obj = JSON.parse(s);
  } catch (e) {
    return null;
  }

  if (isNonArrayObject(obj)) {
    return obj;
  } else {
    return null;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Contains helper methods for manipulating paths.
 */

/**
 * @return Null if the path is already at the root.
 */


function parent(path) {
  if (path.length === 0) {
    return null;
  }

  var index = path.lastIndexOf('/');

  if (index === -1) {
    return '';
  }

  var newPath = path.slice(0, index);
  return newPath;
}

function child(path, childPath) {
  var canonicalChildPath = childPath.split('/').filter(function (component) {
    return component.length > 0;
  }).join('/');

  if (path.length === 0) {
    return canonicalChildPath;
  } else {
    return path + '/' + canonicalChildPath;
  }
}
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */


function lastComponent(path) {
  var index = path.lastIndexOf('/', path.length - 2);

  if (index === -1) {
    return path;
  } else {
    return path.slice(index + 1);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function makeUrl(urlPart) {
  return "https://" + DEFAULT_HOST + "/v0" + urlPart;
}

function makeQueryString(params) {
  var encode = encodeURIComponent;
  var queryPart = '?';

  for (var key in params) {
    if (params.hasOwnProperty(key)) {
      var nextPart = encode(key) + '=' + encode(params[key]);
      queryPart = queryPart + nextPart + '&';
    }
  } // Chop off the extra '&' or '?' on the end


  queryPart = queryPart.slice(0, -1);
  return queryPart;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function noXform_(metadata, value) {
  return value;
}

var Mapping =
/** @class */
function () {
  function Mapping(server, local, writable, xform) {
    this.server = server;
    this.local = local || server;
    this.writable = !!writable;
    this.xform = xform || noXform_;
  }

  return Mapping;
}();

var mappings_ = null;

function xformPath(fullPath) {
  if (!isString(fullPath) || fullPath.length < 2) {
    return fullPath;
  } else {
    return lastComponent(fullPath);
  }
}

function getMappings() {
  if (mappings_) {
    return mappings_;
  }

  var mappings = [];
  mappings.push(new Mapping('bucket'));
  mappings.push(new Mapping('generation'));
  mappings.push(new Mapping('metageneration'));
  mappings.push(new Mapping('name', 'fullPath', true));

  function mappingsXformPath(_metadata, fullPath) {
    return xformPath(fullPath);
  }

  var nameMapping = new Mapping('name');
  nameMapping.xform = mappingsXformPath;
  mappings.push(nameMapping);
  /**
   * Coerces the second param to a number, if it is defined.
   */

  function xformSize(_metadata, size) {
    if (size !== undefined) {
      return Number(size);
    } else {
      return size;
    }
  }

  var sizeMapping = new Mapping('size');
  sizeMapping.xform = xformSize;
  mappings.push(sizeMapping);
  mappings.push(new Mapping('timeCreated'));
  mappings.push(new Mapping('updated'));
  mappings.push(new Mapping('md5Hash', null, true));
  mappings.push(new Mapping('cacheControl', null, true));
  mappings.push(new Mapping('contentDisposition', null, true));
  mappings.push(new Mapping('contentEncoding', null, true));
  mappings.push(new Mapping('contentLanguage', null, true));
  mappings.push(new Mapping('contentType', null, true));
  mappings.push(new Mapping('metadata', 'customMetadata', true));
  mappings_ = mappings;
  return mappings_;
}

function addRef(metadata, service) {
  function generateRef() {
    var bucket = metadata['bucket'];
    var path = metadata['fullPath'];
    var loc = new Location(bucket, path);
    return service.makeStorageReference(loc);
  }

  Object.defineProperty(metadata, 'ref', {
    get: generateRef
  });
}

function fromResource(service, resource, mappings) {
  var metadata = {};
  metadata['type'] = 'file';
  var len = mappings.length;

  for (var i = 0; i < len; i++) {
    var mapping = mappings[i];
    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
  }

  addRef(metadata, service);
  return metadata;
}

function fromResourceString(service, resourceString, mappings) {
  var obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  var resource = obj;
  return fromResource(service, resource, mappings);
}

function downloadUrlFromResourceString(metadata, resourceString) {
  var obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  if (!isString(obj['downloadTokens'])) {
    // This can happen if objects are uploaded through GCS and retrieved
    // through list, so we don't want to throw an Error.
    return null;
  }

  var tokens = obj['downloadTokens'];

  if (tokens.length === 0) {
    return null;
  }

  var encode = encodeURIComponent;
  var tokensList = tokens.split(',');
  var urls = tokensList.map(function (token) {
    var bucket = metadata['bucket'];
    var path = metadata['fullPath'];
    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
    var base = makeUrl(urlPart);
    var queryString = makeQueryString({
      alt: 'media',
      token: token
    });
    return base + queryString;
  });
  return urls[0];
}

function toResourceString(metadata, mappings) {
  var resource = {};
  var len = mappings.length;

  for (var i = 0; i < len; i++) {
    var mapping = mappings[i];

    if (mapping.writable) {
      resource[mapping.server] = metadata[mapping.local];
    }
  }

  return JSON.stringify(resource);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var PREFIXES_KEY = 'prefixes';
var ITEMS_KEY = 'items';

function fromBackendResponse(service, bucket, resource) {
  var listResult = {
    prefixes: [],
    items: [],
    nextPageToken: resource['nextPageToken']
  };

  if (resource[PREFIXES_KEY]) {
    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {
      var path = _a[_i];
      var pathWithoutTrailingSlash = path.replace(/\/$/, '');
      var reference = service.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
      listResult.prefixes.push(reference);
    }
  }

  if (resource[ITEMS_KEY]) {
    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {
      var item = _c[_b];
      var reference = service.makeStorageReference(new Location(bucket, item['name']));
      listResult.items.push(reference);
    }
  }

  return listResult;
}

function fromResponseString(service, bucket, resourceString) {
  var obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  var resource = obj;
  return fromBackendResponse(service, bucket, resource);
}

var RequestInfo =
/** @class */
function () {
  function RequestInfo(url, method,
  /**
   * Returns the value with which to resolve the request's promise. Only called
   * if the request is successful. Throw from this function to reject the
   * returned Request's promise with the thrown error.
   * Note: The XhrIo passed to this function may be reused after this callback
   * returns. Do not keep a reference to it in any way.
   */
  handler, timeout) {
    this.url = url;
    this.method = method;
    this.handler = handler;
    this.timeout = timeout;
    this.urlParams = {};
    this.headers = {};
    this.body = null;
    this.errorHandler = null;
    /**
     * Called with the current number of bytes uploaded and total size (-1 if not
     * computable) of the request body (i.e. used to report upload progress).
     */

    this.progressCallback = null;
    this.successCodes = [200];
    this.additionalRetryCodes = [];
  }

  return RequestInfo;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws the UNKNOWN FirebaseStorageError if cndn is false.
 */


function handlerCheck(cndn) {
  if (!cndn) {
    throw unknown();
  }
}

function metadataHandler(service, mappings) {
  function handler(xhr, text) {
    var metadata = fromResourceString(service, text, mappings);
    handlerCheck(metadata !== null);
    return metadata;
  }

  return handler;
}

function listHandler(service, bucket) {
  function handler(xhr, text) {
    var listResult = fromResponseString(service, bucket, text);
    handlerCheck(listResult !== null);
    return listResult;
  }

  return handler;
}

function downloadUrlHandler(service, mappings) {
  function handler(xhr, text) {
    var metadata = fromResourceString(service, text, mappings);
    handlerCheck(metadata !== null);
    return downloadUrlFromResourceString(metadata, text);
  }

  return handler;
}

function sharedErrorHandler(location) {
  function errorHandler(xhr, err) {
    var newErr;

    if (xhr.getStatus() === 401) {
      newErr = unauthenticated();
    } else {
      if (xhr.getStatus() === 402) {
        newErr = quotaExceeded(location.bucket);
      } else {
        if (xhr.getStatus() === 403) {
          newErr = unauthorized(location.path);
        } else {
          newErr = err;
        }
      }
    }

    newErr.serverResponse = err.serverResponse;
    return newErr;
  }

  return errorHandler;
}

function objectErrorHandler(location) {
  var shared = sharedErrorHandler(location);

  function errorHandler(xhr, err) {
    var newErr = shared(xhr, err);

    if (xhr.getStatus() === 404) {
      newErr = objectNotFound(location.path);
    }

    newErr.serverResponse = err.serverResponse;
    return newErr;
  }

  return errorHandler;
}

function getMetadata(service, location, mappings) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'GET';
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function list(service, location, delimiter, pageToken, maxResults) {
  var urlParams = {};

  if (location.isRoot) {
    urlParams['prefix'] = '';
  } else {
    urlParams['prefix'] = location.path + '/';
  }

  if (delimiter && delimiter.length > 0) {
    urlParams['delimiter'] = delimiter;
  }

  if (pageToken) {
    urlParams['pageToken'] = pageToken;
  }

  if (maxResults) {
    urlParams['maxResults'] = maxResults;
  }

  var urlPart = location.bucketOnlyServerUrl();
  var url = makeUrl(urlPart);
  var method = 'GET';
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}

function getDownloadUrl(service, location, mappings) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'GET';
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function updateMetadata(service, location, metadata, mappings) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'PATCH';
  var body = toResourceString(metadata, mappings);
  var headers = {
    'Content-Type': 'application/json; charset=utf-8'
  };
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function deleteObject(service, location) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'DELETE';
  var timeout = service.maxOperationRetryTime;

  function handler(_xhr, _text) {}

  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.successCodes = [200, 204];
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function determineContentType_(metadata, blob) {
  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';
}

function metadataForUpload_(location, blob, metadata) {
  var metadataClone = Object.assign({}, metadata);
  metadataClone['fullPath'] = location.path;
  metadataClone['size'] = blob.size();

  if (!metadataClone['contentType']) {
    metadataClone['contentType'] = determineContentType_(null, blob);
  }

  return metadataClone;
}

function multipartUpload(service, location, mappings, blob, metadata) {
  var urlPart = location.bucketOnlyServerUrl();
  var headers = {
    'X-Goog-Upload-Protocol': 'multipart'
  };

  function genBoundary() {
    var str = '';

    for (var i = 0; i < 2; i++) {
      str = str + Math.random().toString().slice(2);
    }

    return str;
  }

  var boundary = genBoundary();
  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
  var metadata_ = metadataForUpload_(location, blob, metadata);
  var metadataString = toResourceString(metadata_, mappings);
  var preBlobPart = '--' + boundary + '\r\n' + 'Content-Type: application/json; charset=utf-8\r\n\r\n' + metadataString + '\r\n--' + boundary + '\r\n' + 'Content-Type: ' + metadata_['contentType'] + '\r\n\r\n';
  var postBlobPart = '\r\n--' + boundary + '--';
  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);

  if (body === null) {
    throw cannotSliceBlob();
  }

  var urlParams = {
    name: metadata_['fullPath']
  };
  var url = makeUrl(urlPart);
  var method = 'POST';
  var timeout = service.maxUploadRetryTime;
  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 */


var ResumableUploadStatus =
/** @class */
function () {
  function ResumableUploadStatus(current, total, finalized, metadata) {
    this.current = current;
    this.total = total;
    this.finalized = !!finalized;
    this.metadata = metadata || null;
  }

  return ResumableUploadStatus;
}();

function checkResumeHeader_(xhr, allowed) {
  var status = null;

  try {
    status = xhr.getResponseHeader('X-Goog-Upload-Status');
  } catch (e) {
    handlerCheck(false);
  }

  var allowedStatus = allowed || ['active'];
  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
  return status;
}

function createResumableUpload(service, location, mappings, blob, metadata) {
  var urlPart = location.bucketOnlyServerUrl();
  var metadataForUpload = metadataForUpload_(location, blob, metadata);
  var urlParams = {
    name: metadataForUpload['fullPath']
  };
  var url = makeUrl(urlPart);
  var method = 'POST';
  var headers = {
    'X-Goog-Upload-Protocol': 'resumable',
    'X-Goog-Upload-Command': 'start',
    'X-Goog-Upload-Header-Content-Length': blob.size(),
    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
    'Content-Type': 'application/json; charset=utf-8'
  };
  var body = toResourceString(metadataForUpload, mappings);
  var timeout = service.maxUploadRetryTime;

  function handler(xhr) {
    checkResumeHeader_(xhr);
    var url;

    try {
      url = xhr.getResponseHeader('X-Goog-Upload-URL');
    } catch (e) {
      handlerCheck(false);
    }

    handlerCheck(isString(url));
    return url;
  }

  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */


function getResumableUploadStatus(service, location, url, blob) {
  var headers = {
    'X-Goog-Upload-Command': 'query'
  };

  function handler(xhr) {
    var status = checkResumeHeader_(xhr, ['active', 'final']);
    var sizeString = null;

    try {
      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
    } catch (e) {
      handlerCheck(false);
    }

    if (!sizeString) {
      // null or empty string
      handlerCheck(false);
    }

    var size = Number(sizeString);
    handlerCheck(!isNaN(size));
    return new ResumableUploadStatus(size, blob.size(), status === 'final');
  }

  var method = 'POST';
  var timeout = service.maxUploadRetryTime;
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */


var resumableUploadChunkSize = 256 * 1024;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */

function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
  // TODO(andysoto): standardize on internal asserts
  // assert(!(opt_status && opt_status.finalized));
  var status_ = new ResumableUploadStatus(0, 0);

  if (status) {
    status_.current = status.current;
    status_.total = status.total;
  } else {
    status_.current = 0;
    status_.total = blob.size();
  }

  if (blob.size() !== status_.total) {
    throw serverFileWrongSize();
  }

  var bytesLeft = status_.total - status_.current;
  var bytesToUpload = bytesLeft;

  if (chunkSize > 0) {
    bytesToUpload = Math.min(bytesToUpload, chunkSize);
  }

  var startByte = status_.current;
  var endByte = startByte + bytesToUpload;
  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
  var headers = {
    'X-Goog-Upload-Command': uploadCommand,
    'X-Goog-Upload-Offset': status_.current
  };
  var body = blob.slice(startByte, endByte);

  if (body === null) {
    throw cannotSliceBlob();
  }

  function handler(xhr, text) {
    // TODO(andysoto): Verify the MD5 of each uploaded range:
    // the 'x-range-md5' header comes back with status code 308 responses.
    // We'll only be able to bail out though, because you can't re-upload a
    // range that you previously uploaded.
    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
    var newCurrent = status_.current + bytesToUpload;
    var size = blob.size();
    var metadata;

    if (uploadStatus === 'final') {
      metadata = metadataHandler(service, mappings)(xhr, text);
    } else {
      metadata = null;
    }

    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
  }

  var method = 'POST';
  var timeout = service.maxUploadRetryTime;
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.progressCallback = progressCallback || null;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Observer =
/** @class */
function () {
  function Observer(nextOrObserver, error, complete) {
    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;

    if (asFunctions) {
      this.next = nextOrObserver;
      this.error = error;
      this.complete = complete;
    } else {
      var observer = nextOrObserver;
      this.next = observer.next;
      this.error = observer.error;
      this.complete = observer.complete;
    }
  }

  return Observer;
}();

var UploadTaskSnapshot =
/** @class */
function () {
  function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
    this.bytesTransferred = bytesTransferred;
    this.totalBytes = totalBytes;
    this.state = state;
    this.metadata = metadata;
    this.task = task;
    this.ref = ref;
  }

  return UploadTaskSnapshot;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */
// eslint-disable-next-line @typescript-eslint/ban-types


function async(f) {
  return function () {
    var argsToForward = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      argsToForward[_i] = arguments[_i];
    } // eslint-disable-next-line @typescript-eslint/no-floating-promises


    Promise.resolve().then(function () {
      return f.apply(void 0, argsToForward);
    });
  };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 */


var UploadTask =
/** @class */
function () {
  /**
   * @param ref - The firebaseStorage.Reference object this task came
   *     from, untyped to avoid cyclic dependencies.
   * @param blob - The blob to upload.
   */
  function UploadTask(ref, blob, metadata) {
    var _this = this;

    if (metadata === void 0) {
      metadata = null;
    }
    /**
     * @internal
     */


    this._transferred = 0;
    this._needToFetchStatus = false;
    this._needToFetchMetadata = false;
    this._observers = [];
    this._error = undefined;
    this._uploadUrl = undefined;
    this._request = undefined;
    this._chunkMultiplier = 1;
    this._resolve = undefined;
    this._reject = undefined;
    this._ref = ref;
    this._blob = blob;
    this._metadata = metadata;
    this._mappings = getMappings();
    this._resumable = this._shouldDoResumable(this._blob);
    this._state = InternalTaskState.RUNNING;

    this._errorHandler = function (error) {
      _this._request = undefined;
      _this._chunkMultiplier = 1;

      if (error.codeEquals(Code.CANCELED)) {
        _this._needToFetchStatus = true;

        _this.completeTransitions_();
      } else {
        _this._error = error;

        _this._transition(InternalTaskState.ERROR);
      }
    };

    this._metadataErrorHandler = function (error) {
      _this._request = undefined;

      if (error.codeEquals(Code.CANCELED)) {
        _this.completeTransitions_();
      } else {
        _this._error = error;

        _this._transition(InternalTaskState.ERROR);
      }
    };

    this._promise = new Promise(function (resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;

      _this._start();
    }); // Prevent uncaught rejections on the internal promise from bubbling out
    // to the top level with a dummy handler.

    this._promise.then(null, function () {});
  }

  UploadTask.prototype._makeProgressCallback = function () {
    var _this = this;

    var sizeBefore = this._transferred;
    return function (loaded) {
      return _this._updateProgress(sizeBefore + loaded);
    };
  };

  UploadTask.prototype._shouldDoResumable = function (blob) {
    return blob.size() > 256 * 1024;
  };

  UploadTask.prototype._start = function () {
    if (this._state !== InternalTaskState.RUNNING) {
      // This can happen if someone pauses us in a resume callback, for example.
      return;
    }

    if (this._request !== undefined) {
      return;
    }

    if (this._resumable) {
      if (this._uploadUrl === undefined) {
        this._createResumable();
      } else {
        if (this._needToFetchStatus) {
          this._fetchStatus();
        } else {
          if (this._needToFetchMetadata) {
            // Happens if we miss the metadata on upload completion.
            this._fetchMetadata();
          } else {
            this._continueUpload();
          }
        }
      }
    } else {
      this._oneShotUpload();
    }
  };

  UploadTask.prototype._resolveToken = function (callback) {
    var _this = this; // eslint-disable-next-line @typescript-eslint/no-floating-promises


    this._ref.storage.getAuthToken().then(function (authToken) {
      switch (_this._state) {
        case InternalTaskState.RUNNING:
          callback(authToken);
          break;

        case InternalTaskState.CANCELING:
          _this._transition(InternalTaskState.CANCELED);

          break;

        case InternalTaskState.PAUSING:
          _this._transition(InternalTaskState.PAUSED);

          break;
      }
    });
  }; // TODO(andysoto): assert false


  UploadTask.prototype._createResumable = function () {
    var _this = this;

    this._resolveToken(function (authToken) {
      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);

      var createRequest = _this._ref.storage.makeRequest(requestInfo, authToken);

      _this._request = createRequest;
      createRequest.getPromise().then(function (url) {
        _this._request = undefined;
        _this._uploadUrl = url;
        _this._needToFetchStatus = false;

        _this.completeTransitions_();
      }, _this._errorHandler);
    });
  };

  UploadTask.prototype._fetchStatus = function () {
    var _this = this; // TODO(andysoto): assert(this.uploadUrl_ !== null);


    var url = this._uploadUrl;

    this._resolveToken(function (authToken) {
      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);

      var statusRequest = _this._ref.storage.makeRequest(requestInfo, authToken);

      _this._request = statusRequest;
      statusRequest.getPromise().then(function (status) {
        status = status;
        _this._request = undefined;

        _this._updateProgress(status.current);

        _this._needToFetchStatus = false;

        if (status.finalized) {
          _this._needToFetchMetadata = true;
        }

        _this.completeTransitions_();
      }, _this._errorHandler);
    });
  };

  UploadTask.prototype._continueUpload = function () {
    var _this = this;

    var chunkSize = resumableUploadChunkSize * this._chunkMultiplier;
    var status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);

    var url = this._uploadUrl;

    this._resolveToken(function (authToken) {
      var requestInfo;

      try {
        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());
      } catch (e) {
        _this._error = e;

        _this._transition(InternalTaskState.ERROR);

        return;
      }

      var uploadRequest = _this._ref.storage.makeRequest(requestInfo, authToken);

      _this._request = uploadRequest;
      uploadRequest.getPromise().then(function (newStatus) {
        _this._increaseMultiplier();

        _this._request = undefined;

        _this._updateProgress(newStatus.current);

        if (newStatus.finalized) {
          _this._metadata = newStatus.metadata;

          _this._transition(InternalTaskState.SUCCESS);
        } else {
          _this.completeTransitions_();
        }
      }, _this._errorHandler);
    });
  };

  UploadTask.prototype._increaseMultiplier = function () {
    var currentSize = resumableUploadChunkSize * this._chunkMultiplier; // Max chunk size is 32M.

    if (currentSize < 32 * 1024 * 1024) {
      this._chunkMultiplier *= 2;
    }
  };

  UploadTask.prototype._fetchMetadata = function () {
    var _this = this;

    this._resolveToken(function (authToken) {
      var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);

      var metadataRequest = _this._ref.storage.makeRequest(requestInfo, authToken);

      _this._request = metadataRequest;
      metadataRequest.getPromise().then(function (metadata) {
        _this._request = undefined;
        _this._metadata = metadata;

        _this._transition(InternalTaskState.SUCCESS);
      }, _this._metadataErrorHandler);
    });
  };

  UploadTask.prototype._oneShotUpload = function () {
    var _this = this;

    this._resolveToken(function (authToken) {
      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);

      var multipartRequest = _this._ref.storage.makeRequest(requestInfo, authToken);

      _this._request = multipartRequest;
      multipartRequest.getPromise().then(function (metadata) {
        _this._request = undefined;
        _this._metadata = metadata;

        _this._updateProgress(_this._blob.size());

        _this._transition(InternalTaskState.SUCCESS);
      }, _this._errorHandler);
    });
  };

  UploadTask.prototype._updateProgress = function (transferred) {
    var old = this._transferred;
    this._transferred = transferred; // A progress update can make the "transferred" value smaller (e.g. a
    // partial upload not completed by server, after which the "transferred"
    // value may reset to the value at the beginning of the request).

    if (this._transferred !== old) {
      this._notifyObservers();
    }
  };

  UploadTask.prototype._transition = function (state) {
    if (this._state === state) {
      return;
    }

    switch (state) {
      case InternalTaskState.CANCELING:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING);
        this._state = state;

        if (this._request !== undefined) {
          this._request.cancel();
        }

        break;

      case InternalTaskState.PAUSING:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING);
        this._state = state;

        if (this._request !== undefined) {
          this._request.cancel();
        }

        break;

      case InternalTaskState.RUNNING:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSED ||
        //        this.state_ === InternalTaskState.PAUSING);
        var wasPaused = this._state === InternalTaskState.PAUSED;
        this._state = state;

        if (wasPaused) {
          this._notifyObservers();

          this._start();
        }

        break;

      case InternalTaskState.PAUSED:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSING);
        this._state = state;

        this._notifyObservers();

        break;

      case InternalTaskState.CANCELED:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSED ||
        //        this.state_ === InternalTaskState.CANCELING);
        this._error = canceled();
        this._state = state;

        this._notifyObservers();

        break;

      case InternalTaskState.ERROR:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING ||
        //        this.state_ === InternalTaskState.CANCELING);
        this._state = state;

        this._notifyObservers();

        break;

      case InternalTaskState.SUCCESS:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING ||
        //        this.state_ === InternalTaskState.CANCELING);
        this._state = state;

        this._notifyObservers();

        break;
    }
  };

  UploadTask.prototype.completeTransitions_ = function () {
    switch (this._state) {
      case InternalTaskState.PAUSING:
        this._transition(InternalTaskState.PAUSED);

        break;

      case InternalTaskState.CANCELING:
        this._transition(InternalTaskState.CANCELED);

        break;

      case InternalTaskState.RUNNING:
        this._start();

        break;
    }
  };

  Object.defineProperty(UploadTask.prototype, "snapshot", {
    get: function get() {
      var externalState = taskStateFromInternalTaskState(this._state);
      return new UploadTaskSnapshot(this._transferred, this._blob.size(), externalState, this._metadata, this, this._ref);
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Adds a callback for an event.
   * @param type - The type of event to listen for.
   */

  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
    var _this = this;

    var observer = new Observer(nextOrObserver, error, completed);

    this._addObserver(observer);

    return function () {
      _this._removeObserver(observer);
    };
  };
  /**
   * This object behaves like a Promise, and resolves with its snapshot data
   * when the upload completes.
   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
   * @param onRejected - The rejection callback.
   */


  UploadTask.prototype.then = function (onFulfilled, onRejected) {
    // These casts are needed so that TypeScript can infer the types of the
    // resulting Promise.
    return this._promise.then(onFulfilled, onRejected);
  };
  /**
   * Equivalent to calling `then(null, onRejected)`.
   */


  UploadTask.prototype["catch"] = function (onRejected) {
    return this.then(null, onRejected);
  };
  /**
   * Adds the given observer.
   */


  UploadTask.prototype._addObserver = function (observer) {
    this._observers.push(observer);

    this._notifyObserver(observer);
  };
  /**
   * Removes the given observer.
   */


  UploadTask.prototype._removeObserver = function (observer) {
    var i = this._observers.indexOf(observer);

    if (i !== -1) {
      this._observers.splice(i, 1);
    }
  };

  UploadTask.prototype._notifyObservers = function () {
    var _this = this;

    this._finishPromise();

    var observers = this._observers.slice();

    observers.forEach(function (observer) {
      _this._notifyObserver(observer);
    });
  };

  UploadTask.prototype._finishPromise = function () {
    if (this._resolve !== undefined) {
      var triggered = true;

      switch (taskStateFromInternalTaskState(this._state)) {
        case TaskState.SUCCESS:
          async(this._resolve.bind(null, this.snapshot))();
          break;

        case TaskState.CANCELED:
        case TaskState.ERROR:
          var toCall = this._reject;
          async(toCall.bind(null, this._error))();
          break;

        default:
          triggered = false;
          break;
      }

      if (triggered) {
        this._resolve = undefined;
        this._reject = undefined;
      }
    }
  };

  UploadTask.prototype._notifyObserver = function (observer) {
    var externalState = taskStateFromInternalTaskState(this._state);

    switch (externalState) {
      case TaskState.RUNNING:
      case TaskState.PAUSED:
        if (observer.next) {
          async(observer.next.bind(observer, this.snapshot))();
        }

        break;

      case TaskState.SUCCESS:
        if (observer.complete) {
          async(observer.complete.bind(observer))();
        }

        break;

      case TaskState.CANCELED:
      case TaskState.ERROR:
        if (observer.error) {
          async(observer.error.bind(observer, this._error))();
        }

        break;

      default:
        // TODO(andysoto): assert(false);
        if (observer.error) {
          async(observer.error.bind(observer, this._error))();
        }

    }
  };
  /**
   * Resumes a paused task. Has no effect on a currently running or failed task.
   * @returns True if the operation took effect, false if ignored.
   */


  UploadTask.prototype.resume = function () {
    var valid = this._state === InternalTaskState.PAUSED || this._state === InternalTaskState.PAUSING;

    if (valid) {
      this._transition(InternalTaskState.RUNNING);
    }

    return valid;
  };
  /**
   * Pauses a currently running task. Has no effect on a paused or failed task.
   * @returns True if the operation took effect, false if ignored.
   */


  UploadTask.prototype.pause = function () {
    var valid = this._state === InternalTaskState.RUNNING;

    if (valid) {
      this._transition(InternalTaskState.PAUSING);
    }

    return valid;
  };
  /**
   * Cancels a currently running or paused task. Has no effect on a complete or
   * failed task.
   * @returns True if the operation took effect, false if ignored.
   */


  UploadTask.prototype.cancel = function () {
    var valid = this._state === InternalTaskState.RUNNING || this._state === InternalTaskState.PAUSING;

    if (valid) {
      this._transition(InternalTaskState.CANCELING);
    }

    return valid;
  };

  return UploadTask;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @param location - An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */


var Reference =
/** @class */
function () {
  function Reference(_service, location) {
    this._service = _service;

    if (location instanceof Location) {
      this._location = location;
    } else {
      this._location = Location.makeFromUrl(location);
    }
  }
  /**
   * @returns The URL for the bucket and path this object references,
   *     in the form gs://<bucket>/<object-path>
   * @override
   */


  Reference.prototype.toString = function () {
    return 'gs://' + this._location.bucket + '/' + this._location.path;
  };

  Reference.prototype.newRef = function (service, location) {
    return new Reference(service, location);
  };

  Object.defineProperty(Reference.prototype, "root", {
    /**
     * @returns An reference to the root of this
     *     object's bucket.
     */
    get: function get() {
      var location = new Location(this._location.bucket, '');
      return this.newRef(this._service, location);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "bucket", {
    get: function get() {
      return this._location.bucket;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "fullPath", {
    get: function get() {
      return this._location.path;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "name", {
    get: function get() {
      return lastComponent(this._location.path);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "storage", {
    get: function get() {
      return this._service;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "parent", {
    get: function get() {
      var newPath = parent(this._location.path);

      if (newPath === null) {
        return null;
      }

      var location = new Location(this._location.bucket, newPath);
      return new Reference(this._service, location);
    },
    enumerable: false,
    configurable: true
  });

  Reference.prototype._throwIfRoot = function (name) {
    if (this._location.path === '') {
      throw invalidRootOperation(name);
    }
  };

  return Reference;
}();
/**
 * Uploads a blob to this object's location.
 * @public
 * @param ref - Storage Reference where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the newly uploaded string.
 * @returns An UploadTask that lets you control and
 *     observe the upload.
 */


function uploadBytesResumable(ref, data, metadata) {
  if (metadata === void 0) {
    metadata = null;
  }

  ref._throwIfRoot('uploadBytesResumable');

  return new UploadTask(ref, new FbsBlob(data), metadata);
}
/**
 * Uploads a string to this object's location.
 * @public
 * @param ref - Storage Reference where string should be uploaded.
 * @param value - The string to upload.
 * @param format - The format of the string to upload.
 * @param metadata - Metadata for the newly uploaded object.
 * @returns An UploadTask that lets you control and
 *     observe the upload.
 */


function uploadString(ref, value, format, metadata) {
  if (format === void 0) {
    format = StringFormat.RAW;
  }

  ref._throwIfRoot('putString');

  var data = dataFromString(format, value);

  var metadataClone = tslib.__assign({}, metadata);

  if (metadataClone['contentType'] == null && data.contentType != null) {
    metadataClone['contentType'] = data.contentType;
  }

  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);
}
/**
 * List all items (files) and prefixes (folders) under this storage reference.
 *
 * This is a helper method for calling list() repeatedly until there are
 * no more results. The default pagination size is 1000.
 *
 * Note: The results may not be consistent if objects are changed while this
 * operation is running.
 *
 * Warning: listAll may potentially consume too many resources if there are
 * too many results.
 * @public
 * @param ref - Storage Reference to get list from.
 *
 * @returns A Promise that resolves with all the items and prefixes under
 *      the current storage reference. `prefixes` contains references to
 *      sub-directories and `items` contains references to objects in this
 *      folder. `nextPageToken` is never returned.
 */


function listAll(ref) {
  var accumulator = {
    prefixes: [],
    items: []
  };
  return listAllHelper(ref, accumulator).then(function () {
    return accumulator;
  });
}
/**
 * Separated from listAll because async functions can't use "arguments".
 * @internal
 * @param ref
 * @param accumulator
 * @param pageToken
 */


function listAllHelper(ref, accumulator, pageToken) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var opt, nextPage;

    var _a, _b;

    return tslib.__generator(this, function (_c) {
      switch (_c.label) {
        case 0:
          opt = {
            // maxResults is 1000 by default.
            pageToken: pageToken
          };
          return [4
          /*yield*/
          , list$1(ref, opt)];

        case 1:
          nextPage = _c.sent();

          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);

          (_b = accumulator.items).push.apply(_b, nextPage.items);

          if (!(nextPage.nextPageToken != null)) return [3
          /*break*/
          , 3];
          return [4
          /*yield*/
          , listAllHelper(ref, accumulator, nextPage.nextPageToken)];

        case 2:
          _c.sent();

          _c.label = 3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * List items (files) and prefixes (folders) under this storage reference.
 *
 * List API is only available for Firebase Rules Version 2.
 *
 * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
 * delimited folder structure.
 * Refer to GCS's List API if you want to learn more.
 *
 * To adhere to Firebase Rules's Semantics, Firebase Storage does not
 * support objects whose paths end with "/" or contain two consecutive
 * "/"s. Firebase Storage List API will filter these unsupported objects.
 * list() may fail if there are too many unsupported objects in the bucket.
 * @public
 *
 * @param ref - Storage Reference to get list from.
 * @param options - See ListOptions for details.
 * @returns A Promise that resolves with the items and prefixes.
 *      `prefixes` contains references to sub-folders and `items`
 *      contains references to objects in this folder. `nextPageToken`
 *      can be used to get the rest of the results.
 */


function list$1(ref, options) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authToken, op, requestInfo;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (options != null) {
            if (typeof options.maxResults === 'number') {
              validateNumber('options.maxResults',
              /* minValue= */
              1,
              /* maxValue= */
              1000, options.maxResults);
            }
          }

          return [4
          /*yield*/
          , ref.storage.getAuthToken()];

        case 1:
          authToken = _a.sent();
          op = options || {};
          requestInfo = list(ref.storage, ref._location,
          /*delimiter= */
          '/', op.pageToken, op.maxResults);
          return [2
          /*return*/
          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];
      }
    });
  });
}
/**
 * A promise that resolves with the metadata for this object. If this
 * object doesn't exist or metadata cannot be retreived, the promise is
 * rejected.
 * @public
 * @param ref - Storage Reference to get metadata from.
 */


function getMetadata$1(ref) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authToken, requestInfo;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          ref._throwIfRoot('getMetadata');

          return [4
          /*yield*/
          , ref.storage.getAuthToken()];

        case 1:
          authToken = _a.sent();
          requestInfo = getMetadata(ref.storage, ref._location, getMappings());
          return [2
          /*return*/
          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];
      }
    });
  });
}
/**
 * Updates the metadata for this object.
 * @public
 * @param ref - Storage Reference to update metadata for.
 * @param metadata - The new metadata for the object.
 *     Only values that have been explicitly set will be changed. Explicitly
 *     setting a value to null will remove the metadata.
 * @returns A promise that resolves
 *     with the new metadata for this object.
 *     See `firebaseStorage.Reference.prototype.getMetadata`
 */


function updateMetadata$1(ref, metadata) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authToken, requestInfo;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          ref._throwIfRoot('updateMetadata');

          return [4
          /*yield*/
          , ref.storage.getAuthToken()];

        case 1:
          authToken = _a.sent();
          requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());
          return [2
          /*return*/
          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];
      }
    });
  });
}
/**
 * Returns the download URL for the given Reference.
 * @public
 * @returns A promise that resolves with the download
 *     URL for this object.
 */


function getDownloadURL(ref) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authToken, requestInfo;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          ref._throwIfRoot('getDownloadURL');

          return [4
          /*yield*/
          , ref.storage.getAuthToken()];

        case 1:
          authToken = _a.sent();
          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());
          return [2
          /*return*/
          , ref.storage.makeRequest(requestInfo, authToken).getPromise().then(function (url) {
            if (url === null) {
              throw noDownloadURL();
            }

            return url;
          })];
      }
    });
  });
}
/**
 * Deletes the object at this location.
 * @public
 * @param ref - Storage Reference for object to delete.
 * @returns A promise that resolves if the deletion succeeds.
 */


function deleteObject$1(ref) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authToken, requestInfo;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          ref._throwIfRoot('deleteObject');

          return [4
          /*yield*/
          , ref.storage.getAuthToken()];

        case 1:
          authToken = _a.sent();
          requestInfo = deleteObject(ref.storage, ref._location);
          return [2
          /*return*/
          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];
      }
    });
  });
}
/**
 * Returns reference for object obtained by appending `childPath` to `ref`.
 * @internal
 *
 * @param ref - Storage Reference to get child of.
 * @param childPath - Child path from provided ref.
 * @returns A reference to the object obtained by
 * appending childPath, removing any duplicate, beginning, or trailing
 * slashes.
 */


function getChild(ref, childPath) {
  var newPath = child(ref._location.path, childPath);
  var location = new Location(ref._location.bucket, newPath);
  return new Reference(ref.storage, location);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var UploadTaskSnapshotCompat =
/** @class */
function () {
  function UploadTaskSnapshotCompat(_delegate, task, ref) {
    this._delegate = _delegate;
    this.task = task;
    this.ref = ref;
  }

  Object.defineProperty(UploadTaskSnapshotCompat.prototype, "bytesTransferred", {
    get: function get() {
      return this._delegate.bytesTransferred;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(UploadTaskSnapshotCompat.prototype, "metadata", {
    get: function get() {
      return this._delegate.metadata;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(UploadTaskSnapshotCompat.prototype, "state", {
    get: function get() {
      return this._delegate.state;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(UploadTaskSnapshotCompat.prototype, "totalBytes", {
    get: function get() {
      return this._delegate.totalBytes;
    },
    enumerable: false,
    configurable: true
  });
  return UploadTaskSnapshotCompat;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var UploadTaskCompat =
/** @class */
function () {
  function UploadTaskCompat(_delegate, _ref) {
    this._delegate = _delegate;
    this._ref = _ref;
    this.cancel = this._delegate.cancel.bind(this._delegate);
    this["catch"] = this._delegate["catch"].bind(this._delegate);
    this.pause = this._delegate.pause.bind(this._delegate);
    this.resume = this._delegate.resume.bind(this._delegate);
    this._snapshot = new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);
  }

  Object.defineProperty(UploadTaskCompat.prototype, "snapshot", {
    get: function get() {
      return this._snapshot;
    },
    enumerable: false,
    configurable: true
  });

  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {
    var _this = this;

    return this._delegate.then(function (snapshot) {
      if (onFulfilled) {
        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));
      }
    }, onRejected);
  };

  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {
    var _this = this;

    var wrappedNextOrObserver = undefined;

    if (!!nextOrObserver) {
      if (typeof nextOrObserver === 'function') {
        wrappedNextOrObserver = function wrappedNextOrObserver(taskSnapshot) {
          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
        };
      } else {
        wrappedNextOrObserver = {
          next: !!nextOrObserver.next ? function (taskSnapshot) {
            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
          } : undefined,
          complete: nextOrObserver.complete || undefined,
          error: nextOrObserver.error || undefined
        };
      }
    }

    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);
  };

  return UploadTaskCompat;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ListResultCompat =
/** @class */
function () {
  function ListResultCompat(_delegate, _service) {
    this._delegate = _delegate;
    this._service = _service;
  }

  Object.defineProperty(ListResultCompat.prototype, "prefixes", {
    get: function get() {
      var _this = this;

      return this._delegate.prefixes.map(function (ref) {
        return new ReferenceCompat(ref, _this._service);
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ListResultCompat.prototype, "items", {
    get: function get() {
      var _this = this;

      return this._delegate.items.map(function (ref) {
        return new ReferenceCompat(ref, _this._service);
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ListResultCompat.prototype, "nextPageToken", {
    get: function get() {
      return this._delegate.nextPageToken || null;
    },
    enumerable: false,
    configurable: true
  });
  return ListResultCompat;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ReferenceCompat =
/** @class */
function () {
  function ReferenceCompat(_delegate, storage) {
    this._delegate = _delegate;
    this.storage = storage;
  }

  Object.defineProperty(ReferenceCompat.prototype, "name", {
    get: function get() {
      return this._delegate.name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ReferenceCompat.prototype, "bucket", {
    get: function get() {
      return this._delegate.bucket;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ReferenceCompat.prototype, "fullPath", {
    get: function get() {
      return this._delegate.fullPath;
    },
    enumerable: false,
    configurable: true
  });

  ReferenceCompat.prototype.toString = function () {
    return this._delegate.toString();
  };
  /**
   * @returns A reference to the object obtained by
   * appending childPath, removing any duplicate, beginning, or trailing
   * slashes.
   */


  ReferenceCompat.prototype.child = function (childPath) {
    var reference = getChild(this._delegate, childPath);
    return new ReferenceCompat(reference, this.storage);
  };

  Object.defineProperty(ReferenceCompat.prototype, "root", {
    get: function get() {
      return new ReferenceCompat(this._delegate.root, this.storage);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ReferenceCompat.prototype, "parent", {
    /**
     * @returns A reference to the parent of the
     * current object, or null if the current object is the root.
     */
    get: function get() {
      var reference = this._delegate.parent;

      if (reference == null) {
        return null;
      }

      return new ReferenceCompat(reference, this.storage);
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Uploads a blob to this object's location.
   * @param data - The blob to upload.
   * @returns An UploadTask that lets you control and
   * observe the upload.
   */

  ReferenceCompat.prototype.put = function (data, metadata) {
    this._throwIfRoot('put');

    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);
  };
  /**
   * Uploads a string to this object's location.
   * @param value - The string to upload.
   * @param format - The format of the string to upload.
   * @returns An UploadTask that lets you control and
   * observe the upload.
   */


  ReferenceCompat.prototype.putString = function (value, format, metadata) {
    if (format === void 0) {
      format = StringFormat.RAW;
    }

    this._throwIfRoot('putString');

    return new UploadTaskCompat(uploadString(this._delegate, value, format, metadata), this);
  };
  /**
   * List all items (files) and prefixes (folders) under this storage reference.
   *
   * This is a helper method for calling list() repeatedly until there are
   * no more results. The default pagination size is 1000.
   *
   * Note: The results may not be consistent if objects are changed while this
   * operation is running.
   *
   * Warning: listAll may potentially consume too many resources if there are
   * too many results.
   *
   * @returns A Promise that resolves with all the items and prefixes under
   *  the current storage reference. `prefixes` contains references to
   *  sub-directories and `items` contains references to objects in this
   *  folder. `nextPageToken` is never returned.
   */


  ReferenceCompat.prototype.listAll = function () {
    var _this = this;

    return listAll(this._delegate).then(function (r) {
      return new ListResultCompat(r, _this.storage);
    });
  };
  /**
   * List items (files) and prefixes (folders) under this storage reference.
   *
   * List API is only available for Firebase Rules Version 2.
   *
   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
   * delimited folder structure. Refer to GCS's List API if you want to learn more.
   *
   * To adhere to Firebase Rules's Semantics, Firebase Storage does not
   * support objects whose paths end with "/" or contain two consecutive
   * "/"s. Firebase Storage List API will filter these unsupported objects.
   * list() may fail if there are too many unsupported objects in the bucket.
   *
   * @param options - See ListOptions for details.
   * @returns A Promise that resolves with the items and prefixes.
   * `prefixes` contains references to sub-folders and `items`
   * contains references to objects in this folder. `nextPageToken`
   * can be used to get the rest of the results.
   */


  ReferenceCompat.prototype.list = function (options) {
    var _this = this;

    return list$1(this._delegate, options).then(function (r) {
      return new ListResultCompat(r, _this.storage);
    });
  };
  /**
   * A promise that resolves with the metadata for this object. If this
   * object doesn't exist or metadata cannot be retreived, the promise is
   * rejected.
   */


  ReferenceCompat.prototype.getMetadata = function () {
    return getMetadata$1(this._delegate);
  };
  /**
   * Updates the metadata for this object.
   * @param metadata - The new metadata for the object.
   * Only values that have been explicitly set will be changed. Explicitly
   * setting a value to null will remove the metadata.
   * @returns A promise that resolves
   * with the new metadata for this object.
   * @see firebaseStorage.Reference.prototype.getMetadata
   */


  ReferenceCompat.prototype.updateMetadata = function (metadata) {
    return updateMetadata$1(this._delegate, metadata);
  };
  /**
   * @returns A promise that resolves with the download
   * URL for this object.
   */


  ReferenceCompat.prototype.getDownloadURL = function () {
    return getDownloadURL(this._delegate);
  };
  /**
   * Deletes the object at this location.
   * @returns A promise that resolves if the deletion succeeds.
   */


  ReferenceCompat.prototype["delete"] = function () {
    this._throwIfRoot('delete');

    return deleteObject$1(this._delegate);
  };

  ReferenceCompat.prototype._throwIfRoot = function (name) {
    if (this._delegate._location.path === '') {
      throw invalidRootOperation(name);
    }
  };

  return ReferenceCompat;
}();
/**
 * A request whose promise always fails.
 */


var FailRequest =
/** @class */
function () {
  function FailRequest(error) {
    this.promise_ = Promise.reject(error);
  }
  /** @inheritDoc */


  FailRequest.prototype.getPromise = function () {
    return this.promise_;
  };
  /** @inheritDoc */


  FailRequest.prototype.cancel = function (_appDelete) {};

  return FailRequest;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */


function start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any
callback, timeout) {
  // TODO(andysoto): make this code cleaner (probably refactor into an actual
  // type instead of a bunch of functions with state shared in the closure)
  var waitSeconds = 1; // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
  // TODO: find a way to exclude Node type definition for storage because storage only works in browser
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var timeoutId = null;
  var hitTimeout = false;
  var cancelState = 0;

  function canceled() {
    return cancelState === 2;
  }

  var triggeredCallback = false;

  function triggerCallback() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (!triggeredCallback) {
      triggeredCallback = true;
      callback.apply(null, args);
    }
  }

  function callWithDelay(millis) {
    timeoutId = setTimeout(function () {
      timeoutId = null;
      f(handler, canceled());
    }, millis);
  }

  function handler(success) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    if (triggeredCallback) {
      return;
    }

    if (success) {
      triggerCallback.call.apply(triggerCallback, tslib.__spreadArrays([null, success], args));
      return;
    }

    var mustStop = canceled() || hitTimeout;

    if (mustStop) {
      triggerCallback.call.apply(triggerCallback, tslib.__spreadArrays([null, success], args));
      return;
    }

    if (waitSeconds < 64) {
      /* TODO(andysoto): don't back off so quickly if we know we're offline. */
      waitSeconds *= 2;
    }

    var waitMillis;

    if (cancelState === 1) {
      cancelState = 2;
      waitMillis = 0;
    } else {
      waitMillis = (waitSeconds + Math.random()) * 1000;
    }

    callWithDelay(waitMillis);
  }

  var stopped = false;

  function stop(wasTimeout) {
    if (stopped) {
      return;
    }

    stopped = true;

    if (triggeredCallback) {
      return;
    }

    if (timeoutId !== null) {
      if (!wasTimeout) {
        cancelState = 2;
      }

      clearTimeout(timeoutId);
      callWithDelay(0);
    } else {
      if (!wasTimeout) {
        cancelState = 1;
      }
    }
  }

  callWithDelay(0);
  setTimeout(function () {
    hitTimeout = true;
    stop(true);
  }, timeout);
  return stop;
}
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */


function stop(id) {
  id(false);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var NetworkRequest =
/** @class */
function () {
  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
    var _this = this;

    this.pendingXhr_ = null;
    this.backoffId_ = null;
    this.canceled_ = false;
    this.appDelete_ = false;
    this.url_ = url;
    this.method_ = method;
    this.headers_ = headers;
    this.body_ = body;
    this.successCodes_ = successCodes.slice();
    this.additionalRetryCodes_ = additionalRetryCodes.slice();
    this.callback_ = callback;
    this.errorCallback_ = errorCallback;
    this.progressCallback_ = progressCallback;
    this.timeout_ = timeout;
    this.pool_ = pool;
    this.promise_ = new Promise(function (resolve, reject) {
      _this.resolve_ = resolve;
      _this.reject_ = reject;

      _this.start_();
    });
  }
  /**
   * Actually starts the retry loop.
   */


  NetworkRequest.prototype.start_ = function () {
    var self = this;

    function doTheRequest(backoffCallback, canceled) {
      if (canceled) {
        backoffCallback(false, new RequestEndStatus(false, null, true));
        return;
      }

      var xhr = self.pool_.createXhrIo();
      self.pendingXhr_ = xhr;

      function progressListener(progressEvent) {
        var loaded = progressEvent.loaded;
        var total = progressEvent.lengthComputable ? progressEvent.total : -1;

        if (self.progressCallback_ !== null) {
          self.progressCallback_(loaded, total);
        }
      }

      if (self.progressCallback_ !== null) {
        xhr.addUploadProgressListener(progressListener);
      } // eslint-disable-next-line @typescript-eslint/no-floating-promises


      xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {
        if (self.progressCallback_ !== null) {
          xhr.removeUploadProgressListener(progressListener);
        }

        self.pendingXhr_ = null;
        xhr = xhr;
        var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;
        var status = xhr.getStatus();

        if (!hitServer || self.isRetryStatusCode_(status)) {
          var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;
          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
          return;
        }

        var successCode = self.successCodes_.indexOf(status) !== -1;
        backoffCallback(true, new RequestEndStatus(successCode, xhr));
      });
    }
    /**
     * @param requestWentThrough - True if the request eventually went
     *     through, false if it hit the retry limit or was canceled.
     */


    function backoffDone(requestWentThrough, status) {
      var resolve = self.resolve_;
      var reject = self.reject_;
      var xhr = status.xhr;

      if (status.wasSuccessCode) {
        try {
          var result = self.callback_(xhr, xhr.getResponseText());

          if (isJustDef(result)) {
            resolve(result);
          } else {
            resolve();
          }
        } catch (e) {
          reject(e);
        }
      } else {
        if (xhr !== null) {
          var err = unknown();
          err.serverResponse = xhr.getResponseText();

          if (self.errorCallback_) {
            reject(self.errorCallback_(xhr, err));
          } else {
            reject(err);
          }
        } else {
          if (status.canceled) {
            var err = self.appDelete_ ? appDeleted() : canceled();
            reject(err);
          } else {
            var err = retryLimitExceeded();
            reject(err);
          }
        }
      }
    }

    if (this.canceled_) {
      backoffDone(false, new RequestEndStatus(false, null, true));
    } else {
      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
    }
  };
  /** @inheritDoc */


  NetworkRequest.prototype.getPromise = function () {
    return this.promise_;
  };
  /** @inheritDoc */


  NetworkRequest.prototype.cancel = function (appDelete) {
    this.canceled_ = true;
    this.appDelete_ = appDelete || false;

    if (this.backoffId_ !== null) {
      stop(this.backoffId_);
    }

    if (this.pendingXhr_ !== null) {
      this.pendingXhr_.abort();
    }
  };

  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
    // The codes for which to retry came from this page:
    // https://cloud.google.com/storage/docs/exponential-backoff
    var isFiveHundredCode = status >= 500 && status < 600;
    var extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.
    408, // Too Many Requests: you're getting rate-limited, basically.
    429];
    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
  };

  return NetworkRequest;
}();
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled - Defaults to false.
 */


var RequestEndStatus =
/** @class */
function () {
  function RequestEndStatus(wasSuccessCode, xhr, canceled) {
    this.wasSuccessCode = wasSuccessCode;
    this.xhr = xhr;
    this.canceled = !!canceled;
  }

  return RequestEndStatus;
}();

function addAuthHeader_(headers, authToken) {
  if (authToken !== null && authToken.length > 0) {
    headers['Authorization'] = 'Firebase ' + authToken;
  }
}

function addVersionHeader_(headers) {
  var version = typeof firebase__default['default'] !== 'undefined' ? firebase__default['default'].SDK_VERSION : 'AppManager';
  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;
}

function addGmpidHeader_(headers, appId) {
  if (appId) {
    headers['X-Firebase-GMPID'] = appId;
  }
}

function makeRequest(requestInfo, appId, authToken, pool) {
  var queryPart = makeQueryString(requestInfo.urlParams);
  var url = requestInfo.url + queryPart;
  var headers = Object.assign({}, requestInfo.headers);
  addGmpidHeader_(headers, appId);
  addAuthHeader_(headers, authToken);
  addVersionHeader_(headers);
  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isUrl(path) {
  return /^[A-Za-z]+:\/\//.test(path);
}
/**
 * Returns a firebaseStorage.Reference for the given url.
 */


function refFromURL(service, url) {
  return new Reference(service, url);
}
/**
 * Returns a firebaseStorage.Reference for the given path in the default
 * bucket.
 */


function refFromPath(ref, path) {
  if (ref instanceof StorageService) {
    var service = ref;

    if (service._bucket == null) {
      throw noDefaultBucket();
    }

    var reference = new Reference(service, service._bucket);

    if (path != null) {
      return refFromPath(reference, path);
    } else {
      return reference;
    }
  } else {
    // ref is a Reference
    if (path !== undefined) {
      if (path.includes('..')) {
        throw invalidArgument('`path` param cannot contain ".."');
      }

      return getChild(ref, path);
    } else {
      return ref;
    }
  }
}

function ref(serviceOrRef, pathOrUrl) {
  if (pathOrUrl && isUrl(pathOrUrl)) {
    if (serviceOrRef instanceof StorageService) {
      return refFromURL(serviceOrRef, pathOrUrl);
    } else {
      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');
    }
  } else {
    return refFromPath(serviceOrRef, pathOrUrl);
  }
}

function extractBucket(config) {
  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];

  if (bucketString == null) {
    return null;
  }

  return Location.makeFromBucketSpec(bucketString);
}
/**
 * A service that provides Firebase Storage Reference instances.
 * @param opt_url - gs:// url to a custom Storage Bucket
 */


var StorageService =
/** @class */
function () {
  function StorageService(app,
  /**
   * @internal
   */
  _authProvider,
  /**
   * @internal
   */
  _pool,
  /**
   * @internal
   */
  _url) {
    this.app = app;
    this._authProvider = _authProvider;
    this._pool = _pool;
    this._url = _url;
    /**
     * @internal
     */

    this._bucket = null;
    this._appId = null;
    this._deleted = false;
    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
    this._requests = new Set();

    if (_url != null) {
      this._bucket = Location.makeFromBucketSpec(_url);
    } else {
      this._bucket = extractBucket(this.app.options);
    }
  }

  Object.defineProperty(StorageService.prototype, "maxUploadRetryTime", {
    get: function get() {
      return this._maxUploadRetryTime;
    },
    set: function set(time) {
      validateNumber('time',
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY, time);
      this._maxUploadRetryTime = time;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StorageService.prototype, "maxOperationRetryTime", {
    get: function get() {
      return this._maxOperationRetryTime;
    },
    set: function set(time) {
      validateNumber('time',
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY, time);
      this._maxOperationRetryTime = time;
    },
    enumerable: false,
    configurable: true
  });

  StorageService.prototype.getAuthToken = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var auth, tokenData;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            auth = this._authProvider.getImmediate({
              optional: true
            });
            if (!auth) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , auth.getToken()];

          case 1:
            tokenData = _a.sent();

            if (tokenData !== null) {
              return [2
              /*return*/
              , tokenData.accessToken];
            }

            _a.label = 2;

          case 2:
            return [2
            /*return*/
            , null];
        }
      });
    });
  };
  /**
   * Stop running requests and prevent more from being created.
   * @internal
   */


  StorageService.prototype._delete = function () {
    this._deleted = true;

    this._requests.forEach(function (request) {
      return request.cancel();
    });

    this._requests.clear();

    return Promise.resolve();
  };
  /**
   * Returns a new firebaseStorage.Reference object referencing this StorageService
   * at the given Location.
   */


  StorageService.prototype.makeStorageReference = function (loc) {
    return new Reference(this, loc);
  };
  /**
   * @internal
   * @param requestInfo - HTTP RequestInfo object
   * @param authToken - Firebase auth token
   */


  StorageService.prototype.makeRequest = function (requestInfo, authToken) {
    var _this = this;

    if (!this._deleted) {
      var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool);

      this._requests.add(request_1); // Request removes itself from set when complete.


      request_1.getPromise().then(function () {
        return _this._requests["delete"](request_1);
      }, function () {
        return _this._requests["delete"](request_1);
      });
      return request_1;
    } else {
      return new FailRequest(appDeleted());
    }
  };

  return StorageService;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A service that provides firebaseStorage.Reference instances.
 * @param opt_url gs:// url to a custom Storage Bucket
 */


var StorageServiceCompat =
/** @class */
function () {
  function StorageServiceCompat(app, _delegate) {
    var _this = this;

    this.app = app;
    this._delegate = _delegate;
    this.INTERNAL = {
      /**
       * Called when the associated app is deleted.
       */
      "delete": function _delete() {
        return _this._delegate._delete();
      }
    };
  }

  Object.defineProperty(StorageServiceCompat.prototype, "maxOperationRetryTime", {
    get: function get() {
      return this._delegate.maxOperationRetryTime;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StorageServiceCompat.prototype, "maxUploadRetryTime", {
    get: function get() {
      return this._delegate.maxUploadRetryTime;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Returns a firebaseStorage.Reference for the given path in the default
   * bucket.
   */

  StorageServiceCompat.prototype.ref = function (path) {
    if (isUrl(path)) {
      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');
    }

    return new ReferenceCompat(ref(this._delegate, path), this);
  };
  /**
   * Returns a firebaseStorage.Reference object for the given absolute URL,
   * which must be a gs:// or http[s]:// URL.
   */


  StorageServiceCompat.prototype.refFromURL = function (url) {
    if (!isUrl(url)) {
      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');
    }

    try {
      Location.makeFromUrl(url);
    } catch (e) {
      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');
    }

    return new ReferenceCompat(ref(this._delegate, url), this);
  };

  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {
    this._delegate.maxUploadRetryTime = time;
  };

  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {
    this._delegate.maxOperationRetryTime = time;
  };

  return StorageServiceCompat;
}();

var name = "@firebase/storage";
var version = "0.4.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Type constant for Firebase Storage.
 */

var STORAGE_TYPE = 'storage';

function factory(container, url) {
  // Dependencies
  // TODO: This should eventually be 'app-compat'
  var app = container.getProvider('app').getImmediate();
  var authProvider = container.getProvider('auth-internal'); // TODO: get StorageService instance from component framework instead
  // of creating a new one.

  var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, new XhrIoPool(), url));
  return storageServiceCompat;
}

function registerStorage(instance) {
  var namespaceExports = {
    // no-inline
    TaskState: TaskState,
    TaskEvent: TaskEvent,
    StringFormat: StringFormat,
    Storage: StorageService,
    Reference: ReferenceCompat
  };
  instance.INTERNAL.registerComponent(new component.Component(STORAGE_TYPE, factory, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps(namespaceExports).setMultipleInstances(true));
  instance.registerVersion(name, version);
}

registerStorage(firebase__default['default']);
exports.registerStorage = registerStorage;

},{"@firebase/app":3,"@firebase/component":5,"@firebase/util":9,"tslib":17}],9:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areCookiesEnabled = areCookiesEnabled;
exports.async = async;
exports.calculateBackoffMillis = calculateBackoffMillis;
exports.contains = contains;
exports.createSubscribe = createSubscribe;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.getUA = getUA;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isIndexedDBAvailable = isIndexedDBAvailable;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isSafari = isSafari;
exports.isUWP = isUWP;
exports.jsonEval = jsonEval;
exports.map = map;
exports.ordinal = ordinal;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringify = stringify;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateIndexedDBOpenable = validateIndexedDBOpenable;
exports.validateNamespace = validateNamespace;
exports.validateArgCount = exports.stringToByteArray = exports.stringLength = exports.issuedAtTime = exports.isValidTimestamp = exports.isValidFormat = exports.isAdmin = exports.decode = exports.base64Encode = exports.base64Decode = exports.base64 = exports.assertionError = exports.assert = exports.Sha1 = exports.RANDOM_FACTOR = exports.MAX_VALUE_MILLIS = exports.FirebaseError = exports.ErrorFactory = exports.Deferred = exports.CONSTANTS = void 0;

var _tslib = require("tslib");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
var CONSTANTS = {
  /**
   * @define {boolean} Whether this is the client Node.js SDK.
   */
  NODE_CLIENT: false,

  /**
   * @define {boolean} Whether this is the Admin Node.js SDK.
   */
  NODE_ADMIN: false,

  /**
   * Firebase SDK Version
   */
  SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws an error if the provided assertion is falsy
 */

exports.CONSTANTS = CONSTANTS;

var assert = function assert(assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
/**
 * Returns an Error object suitable for throwing.
 */


exports.assert = assert;

var assertionError = function assertionError(message) {
  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.assertionError = assertionError;

var stringToByteArray = function stringToByteArray(str) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */


var byteArrayToString = function byteArrayToString(bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var pos = 0,
      c = 0;

  while (pos < bytes.length) {
    var c1 = bytes[pos++];

    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      // Surrogate Pair
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      var c4 = bytes[pos++];
      var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }

  return out.join('');
}; // We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()


var base64 = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,

  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,

  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,

  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,

  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',

  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },

  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },

  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob === 'function',

  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray: function encodeByteArray(input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }

    this.init_();
    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    var output = [];

    for (var i = 0; i < input.length; i += 3) {
      var byte1 = input[i];
      var haveByte2 = i + 1 < input.length;
      var byte2 = haveByte2 ? input[i + 1] : 0;
      var haveByte3 = i + 2 < input.length;
      var byte3 = haveByte3 ? input[i + 2] : 0;
      var outByte1 = byte1 >> 2;
      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      var outByte4 = byte3 & 0x3f;

      if (!haveByte3) {
        outByte4 = 64;

        if (!haveByte2) {
          outByte3 = 64;
        }
      }

      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }

    return output.join('');
  },

  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString: function encodeString(input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }

    return this.encodeByteArray(stringToByteArray(input), webSafe);
  },

  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString: function decodeString(input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }

    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },

  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray: function decodeStringToByteArray(input, webSafe) {
    this.init_();
    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    var output = [];

    for (var i = 0; i < input.length;) {
      var byte1 = charToByteMap[input.charAt(i++)];
      var haveByte2 = i < input.length;
      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      var haveByte3 = i < input.length;
      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      var haveByte4 = i < input.length;
      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;

      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw Error();
      }

      var outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);

      if (byte3 !== 64) {
        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);

        if (byte4 !== 64) {
          var outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }

    return output;
  },

  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_: function init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {}; // We want quick mappings back and forth, so we precompute two maps.

      for (var i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i; // Be forgiving when decoding and correctly decode both encodings.

        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
/**
 * URL-safe base64 encoding
 */

exports.base64 = base64;

var base64Encode = function base64Encode(str) {
  var utf8Bytes = stringToByteArray(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */


exports.base64Encode = base64Encode;

var base64Decode = function base64Decode(str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }

  return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */


exports.base64Decode = base64Decode;

function deepCopy(value) {
  return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */


function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }

  switch (source.constructor) {
    case Date:
      // Treat Dates like scalars; if the target date object had any child
      // properties - they will be lost!
      var dateValue = source;
      return new Date(dateValue.getTime());

    case Object:
      if (target === undefined) {
        target = {};
      }

      break;

    case Array:
      // Always copy the array source and overwrite the target.
      target = [];
      break;

    default:
      // Not a plain Object - treat it as a scalar.
      return source;
  }

  for (var prop in source) {
    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
      continue;
    }

    target[prop] = deepExtend(target[prop], source[prop]);
  }

  return target;
}

function isValidKey(key) {
  return key !== '__proto__';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Deferred =
/** @class */
function () {
  function Deferred() {
    var _this = this;

    this.reject = function () {};

    this.resolve = function () {};

    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */


  Deferred.prototype.wrapCallback = function (callback) {
    var _this = this;

    return function (error, value) {
      if (error) {
        _this.reject(error);
      } else {
        _this.resolve(value);
      }

      if (typeof callback === 'function') {
        // Attaching noop handler just in case developer wasn't expecting
        // promises
        _this.promise["catch"](function () {}); // Some of our callbacks don't expect a value and our own tests
        // assert that the parameter length is 1


        if (callback.length === 1) {
          callback(error);
        } else {
          callback(error, value);
        }
      }
    };
  };

  return Deferred;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */


exports.Deferred = Deferred;

function getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */


function isMobileCordova() {
  return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/


function isNode() {
  try {
    return Object.prototype.toString.call(global.process) === '[object process]';
  } catch (e) {
    return false;
  }
}
/**
 * Detect Browser Environment
 */


function isBrowser() {
  return (typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object' && self.self === self;
}

function isBrowserExtension() {
  var runtime = (typeof chrome === "undefined" ? "undefined" : _typeof(chrome)) === 'object' ? chrome.runtime : (typeof browser === "undefined" ? "undefined" : _typeof(browser)) === 'object' ? browser.runtime : undefined;
  return _typeof(runtime) === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */


function isReactNative() {
  return (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */


function isElectron() {
  return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */


function isIE() {
  var ua = getUA();
  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */


function isUWP() {
  return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */


function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */


function isSafari() {
  return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */


function isIndexedDBAvailable() {
  return 'indexedDB' in self && indexedDB != null;
}
/**
 * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 */


function validateIndexedDBOpenable() {
  return new Promise(function (resolve, reject) {
    try {
      var preExist_1 = true;
      var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
      var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);

      request_1.onsuccess = function () {
        request_1.result.close(); // delete database only when it doesn't pre-exist

        if (!preExist_1) {
          window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
        }

        resolve(true);
      };

      request_1.onupgradeneeded = function () {
        preExist_1 = false;
      };

      request_1.onerror = function () {
        var _a;

        reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
      };
    } catch (error) {
      reject(error);
    }
  });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */


function areCookiesEnabled() {
  if (!navigator || !navigator.cookieEnabled) {
    return false;
  }

  return true;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ERROR_NAME = 'FirebaseError'; // Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types

var FirebaseError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(FirebaseError, _super);

  function FirebaseError(code, message, customData) {
    var _this = _super.call(this, message) || this;

    _this.code = code;
    _this.customData = customData;
    _this.name = ERROR_NAME; // Fix For ES5
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work

    Object.setPrototypeOf(_this, FirebaseError.prototype); // Maintains proper stack trace for where our error was thrown.
    // Only available on V8.

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, ErrorFactory.prototype.create);
    }

    return _this;
  }

  return FirebaseError;
}(Error);

exports.FirebaseError = FirebaseError;

var ErrorFactory =
/** @class */
function () {
  function ErrorFactory(service, serviceName, errors) {
    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }

  ErrorFactory.prototype.create = function (code) {
    var data = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      data[_i - 1] = arguments[_i];
    }

    var customData = data[0] || {};
    var fullCode = this.service + "/" + code;
    var template = this.errors[code];
    var message = template ? replaceTemplate(template, customData) : 'Error'; // Service Name: Error message (service/code).

    var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
    var error = new FirebaseError(fullCode, fullMessage, customData);
    return error;
  };

  return ErrorFactory;
}();

exports.ErrorFactory = ErrorFactory;

function replaceTemplate(template, data) {
  return template.replace(PATTERN, function (_, key) {
    var value = data[key];
    return value != null ? String(value) : "<" + key + "?>";
  });
}

var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */

function jsonEval(str) {
  return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */


function stringify(data) {
  return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var decode = function decode(token) {
  var header = {},
      claims = {},
      data = {},
      signature = '';

  try {
    var parts = token.split('.');
    header = jsonEval(base64Decode(parts[0]) || '');
    claims = jsonEval(base64Decode(parts[1]) || '');
    signature = parts[2];
    data = claims['d'] || {};
    delete claims['d'];
  } catch (e) {}

  return {
    header: header,
    claims: claims,
    data: data,
    signature: signature
  };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.decode = decode;

var isValidTimestamp = function isValidTimestamp(token) {
  var claims = decode(token).claims;
  var now = Math.floor(new Date().getTime() / 1000);
  var validSince = 0,
      validUntil = 0;

  if (_typeof(claims) === 'object') {
    if (claims.hasOwnProperty('nbf')) {
      validSince = claims['nbf'];
    } else if (claims.hasOwnProperty('iat')) {
      validSince = claims['iat'];
    }

    if (claims.hasOwnProperty('exp')) {
      validUntil = claims['exp'];
    } else {
      // token will expire after 24h by default
      validUntil = validSince + 86400;
    }
  }

  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.isValidTimestamp = isValidTimestamp;

var issuedAtTime = function issuedAtTime(token) {
  var claims = decode(token).claims;

  if (_typeof(claims) === 'object' && claims.hasOwnProperty('iat')) {
    return claims['iat'];
  }

  return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.issuedAtTime = issuedAtTime;

var isValidFormat = function isValidFormat(token) {
  var decoded = decode(token),
      claims = decoded.claims;
  return !!claims && _typeof(claims) === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


exports.isValidFormat = isValidFormat;

var isAdmin = function isAdmin(token) {
  var claims = decode(token).claims;
  return _typeof(claims) === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.isAdmin = isAdmin;

function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return undefined;
  }
}

function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }

  return true;
}

function map(obj, fn, contextObj) {
  var res = {};

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }

  return res;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */


function querystring(querystringParams) {
  var params = [];

  var _loop_1 = function _loop_1(key, value) {
    if (Array.isArray(value)) {
      value.forEach(function (arrayVal) {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  };

  for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
    var _b = _a[_i],
        key = _b[0],
        value = _b[1];

    _loop_1(key, value);
  }

  return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */


function querystringDecode(querystring) {
  var obj = {};
  var tokens = querystring.replace(/^\?/, '').split('&');
  tokens.forEach(function (token) {
    if (token) {
      var key = token.split('=');
      obj[key[0]] = key[1];
    }
  });
  return obj;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */

/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */


var Sha1 =
/** @class */
function () {
  function Sha1() {
    /**
     * Holds the previous values of accumulated variables a-e in the compress_
     * function.
     * @private
     */
    this.chain_ = [];
    /**
     * A buffer holding the partially computed hash result.
     * @private
     */

    this.buf_ = [];
    /**
     * An array of 80 bytes, each a part of the message to be hashed.  Referred to
     * as the message schedule in the docs.
     * @private
     */

    this.W_ = [];
    /**
     * Contains data needed to pad messages less than 64 bytes.
     * @private
     */

    this.pad_ = [];
    /**
     * @private {number}
     */

    this.inbuf_ = 0;
    /**
     * @private {number}
     */

    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;

    for (var i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }

    this.reset();
  }

  Sha1.prototype.reset = function () {
    this.chain_[0] = 0x67452301;
    this.chain_[1] = 0xefcdab89;
    this.chain_[2] = 0x98badcfe;
    this.chain_[3] = 0x10325476;
    this.chain_[4] = 0xc3d2e1f0;
    this.inbuf_ = 0;
    this.total_ = 0;
  };
  /**
   * Internal compress helper function.
   * @param buf Block to compress.
   * @param offset Offset of the block in the buffer.
   * @private
   */


  Sha1.prototype.compress_ = function (buf, offset) {
    if (!offset) {
      offset = 0;
    }

    var W = this.W_; // get 16 big endian words

    if (typeof buf === 'string') {
      for (var i = 0; i < 16; i++) {
        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
        // have a bug that turns the post-increment ++ operator into pre-increment
        // during JIT compilation.  We have code that depends heavily on SHA-1 for
        // correctness and which is affected by this bug, so I've removed all uses
        // of post-increment ++ in which the result value is used.  We can revert
        // this change once the Safari bug
        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
        // most clients have been updated.
        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
        offset += 4;
      }
    } else {
      for (var i = 0; i < 16; i++) {
        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
        offset += 4;
      }
    } // expand to 80 words


    for (var i = 16; i < 80; i++) {
      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1 | t >>> 31) & 0xffffffff;
    }

    var a = this.chain_[0];
    var b = this.chain_[1];
    var c = this.chain_[2];
    var d = this.chain_[3];
    var e = this.chain_[4];
    var f, k; // TODO(user): Try to unroll this loop to speed up the computation.

    for (var i = 0; i < 80; i++) {
      if (i < 40) {
        if (i < 20) {
          f = d ^ b & (c ^ d);
          k = 0x5a827999;
        } else {
          f = b ^ c ^ d;
          k = 0x6ed9eba1;
        }
      } else {
        if (i < 60) {
          f = b & c | d & (b | c);
          k = 0x8f1bbcdc;
        } else {
          f = b ^ c ^ d;
          k = 0xca62c1d6;
        }
      }

      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
      e = d;
      d = c;
      c = (b << 30 | b >>> 2) & 0xffffffff;
      b = a;
      a = t;
    }

    this.chain_[0] = this.chain_[0] + a & 0xffffffff;
    this.chain_[1] = this.chain_[1] + b & 0xffffffff;
    this.chain_[2] = this.chain_[2] + c & 0xffffffff;
    this.chain_[3] = this.chain_[3] + d & 0xffffffff;
    this.chain_[4] = this.chain_[4] + e & 0xffffffff;
  };

  Sha1.prototype.update = function (bytes, length) {
    // TODO(johnlenz): tighten the function signature and remove this check
    if (bytes == null) {
      return;
    }

    if (length === undefined) {
      length = bytes.length;
    }

    var lengthMinusBlock = length - this.blockSize;
    var n = 0; // Using local instead of member variables gives ~5% speedup on Firefox 16.

    var buf = this.buf_;
    var inbuf = this.inbuf_; // The outer while loop should execute at most twice.

    while (n < length) {
      // When we have no data in the block to top up, we can directly process the
      // input buffer (assuming it contains sufficient data). This gives ~25%
      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
      // the data is provided in large chunks (or in multiples of 64 bytes).
      if (inbuf === 0) {
        while (n <= lengthMinusBlock) {
          this.compress_(bytes, n);
          n += this.blockSize;
        }
      }

      if (typeof bytes === 'string') {
        while (n < length) {
          buf[inbuf] = bytes.charCodeAt(n);
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      } else {
        while (n < length) {
          buf[inbuf] = bytes[n];
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      }
    }

    this.inbuf_ = inbuf;
    this.total_ += length;
  };
  /** @override */


  Sha1.prototype.digest = function () {
    var digest = [];
    var totalBits = this.total_ * 8; // Add pad 0x80 0x00*.

    if (this.inbuf_ < 56) {
      this.update(this.pad_, 56 - this.inbuf_);
    } else {
      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
    } // Add # bits.


    for (var i = this.blockSize - 1; i >= 56; i--) {
      this.buf_[i] = totalBits & 255;
      totalBits /= 256; // Don't use bit-shifting here!
    }

    this.compress_(this.buf_);
    var n = 0;

    for (var i = 0; i < 5; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        digest[n] = this.chain_[i] >> j & 255;
        ++n;
      }
    }

    return digest;
  };

  return Sha1;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */


exports.Sha1 = Sha1;

function createSubscribe(executor, onNoObservers) {
  var proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */


var ObserverProxy =
/** @class */
function () {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function ObserverProxy(executor, onNoObservers) {
    var _this = this;

    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0; // Micro-task scheduling by calling task.then().

    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers; // Call the executor asynchronously so subscribers that are called
    // synchronously after the creation of the subscribe function
    // can still receive the very first value generated in the executor.

    this.task.then(function () {
      executor(_this);
    })["catch"](function (e) {
      _this.error(e);
    });
  }

  ObserverProxy.prototype.next = function (value) {
    this.forEachObserver(function (observer) {
      observer.next(value);
    });
  };

  ObserverProxy.prototype.error = function (error) {
    this.forEachObserver(function (observer) {
      observer.error(error);
    });
    this.close(error);
  };

  ObserverProxy.prototype.complete = function () {
    this.forEachObserver(function (observer) {
      observer.complete();
    });
    this.close();
  };
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */


  ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
    var _this = this;

    var observer;

    if (nextOrObserver === undefined && error === undefined && complete === undefined) {
      throw new Error('Missing Observer.');
    } // Assemble an Observer object when passed as callback functions.


    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error: error,
        complete: complete
      };
    }

    if (observer.next === undefined) {
      observer.next = noop;
    }

    if (observer.error === undefined) {
      observer.error = noop;
    }

    if (observer.complete === undefined) {
      observer.complete = noop;
    }

    var unsub = this.unsubscribeOne.bind(this, this.observers.length); // Attempt to subscribe to a terminated Observable - we
    // just respond to the Observer with the final error or complete
    // event.

    if (this.finalized) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.task.then(function () {
        try {
          if (_this.finalError) {
            observer.error(_this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {// nothing
        }

        return;
      });
    }

    this.observers.push(observer);
    return unsub;
  }; // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.


  ObserverProxy.prototype.unsubscribeOne = function (i) {
    if (this.observers === undefined || this.observers[i] === undefined) {
      return;
    }

    delete this.observers[i];
    this.observerCount -= 1;

    if (this.observerCount === 0 && this.onNoObservers !== undefined) {
      this.onNoObservers(this);
    }
  };

  ObserverProxy.prototype.forEachObserver = function (fn) {
    if (this.finalized) {
      // Already closed by previous event....just eat the additional values.
      return;
    } // Since sendOne calls asynchronously - there is no chance that
    // this.observers will become undefined.


    for (var i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  }; // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.


  ObserverProxy.prototype.sendOne = function (i, fn) {
    var _this = this; // Execute the callback asynchronously
    // eslint-disable-next-line @typescript-eslint/no-floating-promises


    this.task.then(function () {
      if (_this.observers !== undefined && _this.observers[i] !== undefined) {
        try {
          fn(_this.observers[i]);
        } catch (e) {
          // Ignore exceptions raised in Observers or missing methods of an
          // Observer.
          // Log error to console. b/31404806
          if (typeof console !== 'undefined' && console.error) {
            console.error(e);
          }
        }
      }
    });
  };

  ObserverProxy.prototype.close = function (err) {
    var _this = this;

    if (this.finalized) {
      return;
    }

    this.finalized = true;

    if (err !== undefined) {
      this.finalError = err;
    } // Proxy is no longer needed - garbage collect references
    // eslint-disable-next-line @typescript-eslint/no-floating-promises


    this.task.then(function () {
      _this.observers = undefined;
      _this.onNoObservers = undefined;
    });
  };

  return ObserverProxy;
}();
/** Turn synchronous function into one called asynchronously. */
// eslint-disable-next-line @typescript-eslint/ban-types


function async(fn, onError) {
  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    Promise.resolve(true).then(function () {
      fn.apply(void 0, args);
    })["catch"](function (error) {
      if (onError) {
        onError(error);
      }
    });
  };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */


function implementsAnyMethods(obj, methods) {
  if (_typeof(obj) !== 'object' || obj === null) {
    return false;
  }

  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];

    if (method in obj && typeof obj[method] === 'function') {
      return true;
    }
  }

  return false;
}

function noop() {// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */


var validateArgCount = function validateArgCount(fnName, minCount, maxCount, argCount) {
  var argError;

  if (argCount < minCount) {
    argError = 'at least ' + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
  }

  if (argError) {
    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
    throw new Error(error);
  }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argumentNumber The index of the argument
 * @param optional Whether or not the argument is optional
 * @return The prefix to add to the error thrown for validation.
 */


exports.validateArgCount = validateArgCount;

function errorPrefix(fnName, argumentNumber, optional) {
  var argName = '';

  switch (argumentNumber) {
    case 1:
      argName = optional ? 'first' : 'First';
      break;

    case 2:
      argName = optional ? 'second' : 'Second';
      break;

    case 3:
      argName = optional ? 'third' : 'Third';
      break;

    case 4:
      argName = optional ? 'fourth' : 'Fourth';
      break;

    default:
      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
  }

  var error = fnName + ' failed: ';
  error += argName + ' argument ';
  return error;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */


function validateNamespace(fnName, argumentNumber, namespace, optional) {
  if (optional && !namespace) {
    return;
  }

  if (typeof namespace !== 'string') {
    //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
  }
}

function validateCallback(fnName, argumentNumber, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
  if (optional && !callback) {
    return;
  }

  if (typeof callback !== 'function') {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
  }
}

function validateContextObject(fnName, argumentNumber, context, optional) {
  if (optional && !context) {
    return;
  }

  if (_typeof(context) !== 'object' || context === null) {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3

/**
 * @param {string} str
 * @return {Array}
 */


var stringToByteArray$1 = function stringToByteArray$1(str) {
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i); // Is this the lead surrogate in a surrogate pair?

    if (c >= 0xd800 && c <= 0xdbff) {
      var high = c - 0xd800; // the high 10 bits.

      i++;
      assert(i < str.length, 'Surrogate pair missing trail surrogate.');
      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.

      c = 0x10000 + (high << 10) + low;
    }

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */


exports.stringToByteArray = stringToByteArray$1;

var stringLength = function stringLength(str) {
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 0xd800 && c <= 0xdbff) {
      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
      p += 4;
      i++; // skip trail surrogate.
    } else {
      p += 3;
    }
  }

  return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The amount of milliseconds to exponentially increase.
 */


exports.stringLength = stringLength;
var DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */

var DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */

var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.

/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */

exports.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;
var RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */

exports.RANDOM_FACTOR = RANDOM_FACTOR;

function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
  if (intervalMillis === void 0) {
    intervalMillis = DEFAULT_INTERVAL_MILLIS;
  }

  if (backoffFactor === void 0) {
    backoffFactor = DEFAULT_BACKOFF_FACTOR;
  } // Calculates an exponentially increasing value.
  // Deviation: calculates value from count and a constant interval, so we only need to save value
  // and count to restore state.


  var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount); // A random "fuzz" to avoid waves of retries.
  // Deviation: randomFactor is required.

  var randomWait = Math.round( // A fraction of the backoff value to add/subtract.
  // Deviation: changes multiplication order to improve readability.
  RANDOM_FACTOR * currBaseValue * ( // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
  // if we add or subtract.
  Math.random() - 0.5) * 2); // Limits backoff to max to avoid effectively permanent backoff.

  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provide English ordinal letters after a number
 */


function ordinal(i) {
  if (!Number.isFinite(i)) {
    return "" + i;
  }

  return i + indicator(i);
}

function indicator(i) {
  i = Math.abs(i);
  var cent = i % 100;

  if (cent >= 10 && cent <= 20) {
    return 'th';
  }

  var dec = i % 10;

  if (dec === 1) {
    return 'st';
  }

  if (dec === 2) {
    return 'nd';
  }

  if (dec === 3) {
    return 'rd';
  }

  return 'th';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"tslib":17}],10:[function(require,module,exports){
'use strict';

require('@firebase/analytics');

},{"@firebase/analytics":2}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _app["default"];
  }
});

var _app = _interopRequireDefault(require("@firebase/app"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var name = "firebase";
var version = "8.2.2";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

_app["default"].registerVersion(name, version, 'app');

},{"@firebase/app":3}],12:[function(require,module,exports){
'use strict';

require('@firebase/auth');

},{"@firebase/auth":4}],13:[function(require,module,exports){
'use strict';

require('@firebase/database');

},{"@firebase/database":14}],14:[function(require,module,exports){
(function (process){(function (){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.registerDatabase=registerDatabase;exports.enableLogging=exports.ServerValue=exports.Reference=exports.Query=exports.OnDisconnect=exports.Database=exports.DataSnapshot=void 0;var _app=_interopRequireDefault(require("@firebase/app"));var _tslib=require("tslib");var _util=require("@firebase/util");var _logger=require("@firebase/logger");var _component=require("@firebase/component");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 * @constructor
 */var DOMStorageWrapper=/** @class */function(){/**
     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
     */function DOMStorageWrapper(domStorage_){this.domStorage_=domStorage_;// Use a prefix to avoid collisions with other stuff saved by the app.
this.prefix_='firebase:';}/**
     * @param {string} key The key to save the value under
     * @param {?Object} value The value being stored, or null to remove the key.
     */DOMStorageWrapper.prototype.set=function(key,value){if(value==null){this.domStorage_.removeItem(this.prefixedName_(key));}else{this.domStorage_.setItem(this.prefixedName_(key),(0,_util.stringify)(value));}};/**
     * @param {string} key
     * @return {*} The value that was stored under this key, or null
     */DOMStorageWrapper.prototype.get=function(key){var storedVal=this.domStorage_.getItem(this.prefixedName_(key));if(storedVal==null){return null;}else{return(0,_util.jsonEval)(storedVal);}};/**
     * @param {string} key
     */DOMStorageWrapper.prototype.remove=function(key){this.domStorage_.removeItem(this.prefixedName_(key));};/**
     * @param {string} name
     * @return {string}
     */DOMStorageWrapper.prototype.prefixedName_=function(name){return this.prefix_+name;};DOMStorageWrapper.prototype.toString=function(){return this.domStorage_.toString();};return DOMStorageWrapper;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 *
 * @constructor
 */var MemoryStorage=/** @class */function(){function MemoryStorage(){this.cache_={};this.isInMemoryStorage=true;}MemoryStorage.prototype.set=function(key,value){if(value==null){delete this.cache_[key];}else{this.cache_[key]=value;}};MemoryStorage.prototype.get=function(key){if((0,_util.contains)(this.cache_,key)){return this.cache_[key];}return null;};MemoryStorage.prototype.remove=function(key){delete this.cache_[key];};return MemoryStorage;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param {string} domStorageName Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @return {?} Turning off type information until a common interface is defined.
 */var createStoragefor=function createStoragefor(domStorageName){try{// NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
// so it must be inside the try/catch.
if(typeof window!=='undefined'&&typeof window[domStorageName]!=='undefined'){// Need to test cache. Just because it's here doesn't mean it works
var domStorage=window[domStorageName];domStorage.setItem('firebase:sentinel','cache');domStorage.removeItem('firebase:sentinel');return new DOMStorageWrapper(domStorage);}}catch(e){}// Failed to create wrapper.  Just return in-memory storage.
// TODO: log?
return new MemoryStorage();};/** A storage object that lasts across sessions */var PersistentStorage=createStoragefor('localStorage');/** A storage object that only lasts one session */var SessionStorage=createStoragefor('sessionStorage');/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var logClient=new _logger.Logger('@firebase/database');/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 * @type {function(): number} Generated ID.
 */var LUIDGenerator=function(){var id=1;return function(){return id++;};}();/**
 * Sha1 hash of the input string
 * @param {!string} str The string to hash
 * @return {!string} The resulting hash
 */var sha1=function sha1(str){var utf8Bytes=(0,_util.stringToByteArray)(str);var sha1=new _util.Sha1();sha1.update(utf8Bytes);var sha1Bytes=sha1.digest();return _util.base64.encodeByteArray(sha1Bytes);};/**
 * @param {...*} varArgs
 * @return {string}
 * @private
 */var buildLogMessage_=function buildLogMessage_(){var varArgs=[];for(var _i=0;_i<arguments.length;_i++){varArgs[_i]=arguments[_i];}var message='';for(var i=0;i<varArgs.length;i++){var arg=varArgs[i];if(Array.isArray(arg)||arg&&_typeof(arg)==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any
typeof arg.length==='number'){message+=buildLogMessage_.apply(null,arg);}else if(_typeof(arg)==='object'){message+=(0,_util.stringify)(arg);}else{message+=arg;}message+=' ';}return message;};/**
 * Use this for all debug messages in Firebase.
 * @type {?function(string)}
 */var logger=null;/**
 * Flag to check for log availability on first log message
 * @type {boolean}
 * @private
 */var firstLog_=true;/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
 * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
 */var enableLogging=function enableLogging(logger_,persistent){(0,_util.assert)(!persistent||logger_===true||logger_===false,"Can't turn on custom loggers persistently.");if(logger_===true){logClient.logLevel=_logger.LogLevel.VERBOSE;logger=logClient.log.bind(logClient);if(persistent){SessionStorage.set('logging_enabled',true);}}else if(typeof logger_==='function'){logger=logger_;}else{logger=null;SessionStorage.remove('logging_enabled');}};/**
 *
 * @param {...(string|Arguments)} varArgs
 */exports.enableLogging=enableLogging;var log=function log(){var varArgs=[];for(var _i=0;_i<arguments.length;_i++){varArgs[_i]=arguments[_i];}if(firstLog_===true){firstLog_=false;if(logger===null&&SessionStorage.get('logging_enabled')===true){enableLogging(true);}}if(logger){var message=buildLogMessage_.apply(null,varArgs);logger(message);}};/**
 * @param {!string} prefix
 * @return {function(...[*])}
 */var logWrapper=function logWrapper(prefix){return function(){var varArgs=[];for(var _i=0;_i<arguments.length;_i++){varArgs[_i]=arguments[_i];}log.apply(void 0,(0,_tslib.__spread)([prefix],varArgs));};};/**
 * @param {...string} varArgs
 */var error=function error(){var varArgs=[];for(var _i=0;_i<arguments.length;_i++){varArgs[_i]=arguments[_i];}var message='FIREBASE INTERNAL ERROR: '+buildLogMessage_.apply(void 0,(0,_tslib.__spread)(varArgs));logClient.error(message);};/**
 * @param {...string} varArgs
 */var fatal=function fatal(){var varArgs=[];for(var _i=0;_i<arguments.length;_i++){varArgs[_i]=arguments[_i];}var message="FIREBASE FATAL ERROR: "+buildLogMessage_.apply(void 0,(0,_tslib.__spread)(varArgs));logClient.error(message);throw new Error(message);};/**
 * @param {...*} varArgs
 */var warn=function warn(){var varArgs=[];for(var _i=0;_i<arguments.length;_i++){varArgs[_i]=arguments[_i];}var message='FIREBASE WARNING: '+buildLogMessage_.apply(void 0,(0,_tslib.__spread)(varArgs));logClient.warn(message);};/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */var warnIfPageIsSecure=function warnIfPageIsSecure(){// Be very careful accessing browser globals. Who knows what may or may not exist.
if(typeof window!=='undefined'&&window.location&&window.location.protocol&&window.location.protocol.indexOf('https:')!==-1){warn('Insecure Firebase access from a secure page. '+'Please use https in calls to new Firebase().');}};/**
 * Returns true if data is NaN, or +/- Infinity.
 * @param {*} data
 * @return {boolean}
 */var isInvalidJSONNumber=function isInvalidJSONNumber(data){return typeof data==='number'&&(data!==data||// NaN
data===Number.POSITIVE_INFINITY||data===Number.NEGATIVE_INFINITY);};/**
 * @param {function()} fn
 */var executeWhenDOMReady=function executeWhenDOMReady(fn){if((0,_util.isNodeSdk)()||document.readyState==='complete'){fn();}else{// Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
// fire before onload), but fall back to onload.
var called_1=false;var wrappedFn_1=function wrappedFn_1(){if(!document.body){setTimeout(wrappedFn_1,Math.floor(10));return;}if(!called_1){called_1=true;fn();}};if(document.addEventListener){document.addEventListener('DOMContentLoaded',wrappedFn_1,false);// fallback to onload.
window.addEventListener('load',wrappedFn_1,false);// eslint-disable-next-line @typescript-eslint/no-explicit-any
}else if(document.attachEvent){// IE.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
document.attachEvent('onreadystatechange',function(){if(document.readyState==='complete'){wrappedFn_1();}});// fallback to onload.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
window.attachEvent('onload',wrappedFn_1);// jQuery has an extra hack for IE that we could employ (based on
// http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
// I'm hoping we don't need it.
}}};/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 * @type {!string}
 */var MIN_NAME='[MIN_NAME]';/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 * @type {!string}
 */var MAX_NAME='[MAX_NAME]';/**
 * Compares valid Firebase key names, plus min and max name
 * @param {!string} a
 * @param {!string} b
 * @return {!number}
 */var nameCompare=function nameCompare(a,b){if(a===b){return 0;}else if(a===MIN_NAME||b===MAX_NAME){return-1;}else if(b===MIN_NAME||a===MAX_NAME){return 1;}else{var aAsInt=tryParseInt(a),bAsInt=tryParseInt(b);if(aAsInt!==null){if(bAsInt!==null){return aAsInt-bAsInt===0?a.length-b.length:aAsInt-bAsInt;}else{return-1;}}else if(bAsInt!==null){return 1;}else{return a<b?-1:1;}}};/**
 * @param {!string} a
 * @param {!string} b
 * @return {!number} comparison result.
 */var stringCompare=function stringCompare(a,b){if(a===b){return 0;}else if(a<b){return-1;}else{return 1;}};/**
 * @param {string} key
 * @param {Object} obj
 * @return {*}
 */var requireKey=function requireKey(key,obj){if(obj&&key in obj){return obj[key];}else{throw new Error('Missing required key ('+key+') in object: '+(0,_util.stringify)(obj));}};/**
 * @param {*} obj
 * @return {string}
 */var ObjectToUniqueKey=function ObjectToUniqueKey(obj){if(_typeof(obj)!=='object'||obj===null){return(0,_util.stringify)(obj);}var keys=[];// eslint-disable-next-line guard-for-in
for(var k in obj){keys.push(k);}// Export as json, but with the keys sorted.
keys.sort();var key='{';for(var i=0;i<keys.length;i++){if(i!==0){key+=',';}key+=(0,_util.stringify)(keys[i]);key+=':';key+=ObjectToUniqueKey(obj[keys[i]]);}key+='}';return key;};/**
 * Splits a string into a number of smaller segments of maximum size
 * @param {!string} str The string
 * @param {!number} segsize The maximum number of chars in the string.
 * @return {Array.<string>} The string, split into appropriately-sized chunks
 */var splitStringBySize=function splitStringBySize(str,segsize){var len=str.length;if(len<=segsize){return[str];}var dataSegs=[];for(var c=0;c<len;c+=segsize){if(c+segsize>len){dataSegs.push(str.substring(c,len));}else{dataSegs.push(str.substring(c,c+segsize));}}return dataSegs;};/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param obj The object or array to iterate over
 * @param fn The function to apply
 */function each(obj,fn){for(var key in obj){if(obj.hasOwnProperty(key)){fn(key,obj[key]);}}}/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param {!number} v A double
 * @return {string}
 */var doubleToIEEE754String=function doubleToIEEE754String(v){(0,_util.assert)(!isInvalidJSONNumber(v),'Invalid JSON number');// MJL
var ebits=11,fbits=52;var bias=(1<<ebits-1)-1;var s,e,f,ln,i;// Compute sign, exponent, fraction
// Skip NaN / Infinity handling --MJL.
if(v===0){e=0;f=0;s=1/v===-Infinity?1:0;}else{s=v<0;v=Math.abs(v);if(v>=Math.pow(2,1-bias)){// Normalized
ln=Math.min(Math.floor(Math.log(v)/Math.LN2),bias);e=ln+bias;f=Math.round(v*Math.pow(2,fbits-ln)-Math.pow(2,fbits));}else{// Denormalized
e=0;f=Math.round(v/Math.pow(2,1-bias-fbits));}}// Pack sign, exponent, fraction
var bits=[];for(i=fbits;i;i-=1){bits.push(f%2?1:0);f=Math.floor(f/2);}for(i=ebits;i;i-=1){bits.push(e%2?1:0);e=Math.floor(e/2);}bits.push(s?1:0);bits.reverse();var str=bits.join('');// Return the data as a hex string. --MJL
var hexByteString='';for(i=0;i<64;i+=8){var hexByte=parseInt(str.substr(i,8),2).toString(16);if(hexByte.length===1){hexByte='0'+hexByte;}hexByteString=hexByteString+hexByte;}return hexByteString.toLowerCase();};/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 * @return {boolean}
 */var isChromeExtensionContentScript=function isChromeExtensionContentScript(){return!!((typeof window==="undefined"?"undefined":_typeof(window))==='object'&&window['chrome']&&window['chrome']['extension']&&!/^chrome/.test(window.location.href));};/**
 * Used to detect if we're in a Windows 8 Store app.
 * @return {boolean}
 */var isWindowsStoreApp=function isWindowsStoreApp(){// Check for the presence of a couple WinRT globals
return(typeof Windows==="undefined"?"undefined":_typeof(Windows))==='object'&&_typeof(Windows.UI)==='object';};/**
 * Converts a server error code to a Javascript Error
 * @param {!string} code
 * @param {!Query} query
 * @return {Error}
 */var errorForServerCode=function errorForServerCode(code,query){var reason='Unknown Error';if(code==='too_big'){reason='The data requested exceeds the maximum size '+'that can be accessed with a single request.';}else if(code==='permission_denied'){reason="Client doesn't have permission to access the desired data.";}else if(code==='unavailable'){reason='The service is unavailable';}var error=new Error(code+' at '+query.path.toString()+': '+reason);// eslint-disable-next-line @typescript-eslint/no-explicit-any
error.code=code.toUpperCase();return error;};/**
 * Used to test for integer-looking strings
 * @type {RegExp}
 * @private
 */var INTEGER_REGEXP_=new RegExp('^-?(0*)\\d{1,10}$');/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 * @param {!string} str
 * @return {?number}
 */var tryParseInt=function tryParseInt(str){if(INTEGER_REGEXP_.test(str)){var intVal=Number(str);if(intVal>=-2147483648&&intVal<=2147483647){return intVal;}}return null;};/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param {!function()} fn The code to guard.
 */var exceptionGuard=function exceptionGuard(fn){try{fn();}catch(e){// Re-throw exception when it's safe.
setTimeout(function(){// It used to be that "throw e" would result in a good console error with
// relevant context, but as of Chrome 39, you just get the firebase.js
// file/line number where we re-throw it, which is useless. So we log
// e.stack explicitly.
var stack=e.stack||'';warn('Exception was thrown by user callback.',stack);throw e;},Math.floor(0));}};/**
 * @return {boolean} true if we think we're currently being crawled.
 */var beingCrawled=function beingCrawled(){var userAgent=(typeof window==="undefined"?"undefined":_typeof(window))==='object'&&window['navigator']&&window['navigator']['userAgent']||'';// For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
// believe to support JavaScript/AJAX rendering.
// NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
// would have seen the page" is flaky if we don't treat it as a crawler.
return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0;};/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param {Function} fn Function to run.
 * @param {number} time Milliseconds to wait before running.
 * @return {number|Object} The setTimeout() return value.
 */var setTimeoutNonBlocking=function setTimeoutNonBlocking(fn,time){var timeout=setTimeout(fn,time);// eslint-disable-next-line @typescript-eslint/no-explicit-any
if(_typeof(timeout)==='object'&&timeout['unref']){// eslint-disable-next-line @typescript-eslint/no-explicit-any
timeout['unref']();}return timeout;};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */var Path=/** @class */function(){/**
     * @param {string|Array.<string>} pathOrString Path string to parse,
     *      or another path, or the raw tokens array
     * @param {number=} pieceNum
     */function Path(pathOrString,pieceNum){if(pieceNum===void 0){this.pieces_=pathOrString.split('/');// Remove empty pieces.
var copyTo=0;for(var i=0;i<this.pieces_.length;i++){if(this.pieces_[i].length>0){this.pieces_[copyTo]=this.pieces_[i];copyTo++;}}this.pieces_.length=copyTo;this.pieceNum_=0;}else{this.pieces_=pathOrString;this.pieceNum_=pieceNum;}}Object.defineProperty(Path,"Empty",{/**
         * Singleton to represent an empty path
         *
         * @const
         */get:function get(){return new Path('');},enumerable:false,configurable:true});Path.prototype.getFront=function(){if(this.pieceNum_>=this.pieces_.length){return null;}return this.pieces_[this.pieceNum_];};/**
     * @return {number} The number of segments in this path
     */Path.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_;};/**
     * @return {!Path}
     */Path.prototype.popFront=function(){var pieceNum=this.pieceNum_;if(pieceNum<this.pieces_.length){pieceNum++;}return new Path(this.pieces_,pieceNum);};/**
     * @return {?string}
     */Path.prototype.getBack=function(){if(this.pieceNum_<this.pieces_.length){return this.pieces_[this.pieces_.length-1];}return null;};Path.prototype.toString=function(){var pathString='';for(var i=this.pieceNum_;i<this.pieces_.length;i++){if(this.pieces_[i]!==''){pathString+='/'+this.pieces_[i];}}return pathString||'/';};Path.prototype.toUrlEncodedString=function(){var pathString='';for(var i=this.pieceNum_;i<this.pieces_.length;i++){if(this.pieces_[i]!==''){pathString+='/'+encodeURIComponent(String(this.pieces_[i]));}}return pathString||'/';};/**
     * Shallow copy of the parts of the path.
     *
     * @param {number=} begin
     * @return {!Array<string>}
     */Path.prototype.slice=function(begin){if(begin===void 0){begin=0;}return this.pieces_.slice(this.pieceNum_+begin);};/**
     * @return {?Path}
     */Path.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length){return null;}var pieces=[];for(var i=this.pieceNum_;i<this.pieces_.length-1;i++){pieces.push(this.pieces_[i]);}return new Path(pieces,0);};/**
     * @param {string|!Path} childPathObj
     * @return {!Path}
     */Path.prototype.child=function(childPathObj){var pieces=[];for(var i=this.pieceNum_;i<this.pieces_.length;i++){pieces.push(this.pieces_[i]);}if(childPathObj instanceof Path){for(var i=childPathObj.pieceNum_;i<childPathObj.pieces_.length;i++){pieces.push(childPathObj.pieces_[i]);}}else{var childPieces=childPathObj.split('/');for(var i=0;i<childPieces.length;i++){if(childPieces[i].length>0){pieces.push(childPieces[i]);}}}return new Path(pieces,0);};/**
     * @return {boolean} True if there are no segments in this path
     */Path.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length;};/**
     * @param {!Path} outerPath
     * @param {!Path} innerPath
     * @return {!Path} The path from outerPath to innerPath
     */Path.relativePath=function(outerPath,innerPath){var outer=outerPath.getFront(),inner=innerPath.getFront();if(outer===null){return innerPath;}else if(outer===inner){return Path.relativePath(outerPath.popFront(),innerPath.popFront());}else{throw new Error('INTERNAL ERROR: innerPath ('+innerPath+') is not within '+'outerPath ('+outerPath+')');}};/**
     * @param {!Path} left
     * @param {!Path} right
     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
     */Path.comparePaths=function(left,right){var leftKeys=left.slice();var rightKeys=right.slice();for(var i=0;i<leftKeys.length&&i<rightKeys.length;i++){var cmp=nameCompare(leftKeys[i],rightKeys[i]);if(cmp!==0){return cmp;}}if(leftKeys.length===rightKeys.length){return 0;}return leftKeys.length<rightKeys.length?-1:1;};/**
     *
     * @param {Path} other
     * @return {boolean} true if paths are the same.
     */Path.prototype.equals=function(other){if(this.getLength()!==other.getLength()){return false;}for(var i=this.pieceNum_,j=other.pieceNum_;i<=this.pieces_.length;i++,j++){if(this.pieces_[i]!==other.pieces_[j]){return false;}}return true;};/**
     *
     * @param {!Path} other
     * @return {boolean} True if this path is a parent (or the same as) other
     */Path.prototype.contains=function(other){var i=this.pieceNum_;var j=other.pieceNum_;if(this.getLength()>other.getLength()){return false;}while(i<this.pieces_.length){if(this.pieces_[i]!==other.pieces_[j]){return false;}++i;++j;}return true;};return Path;}();// end Path
/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */var ValidationPath=/** @class */function(){/**
     * @param {!Path} path Initial Path.
     * @param {string} errorPrefix_ Prefix for any error messages.
     */function ValidationPath(path,errorPrefix_){this.errorPrefix_=errorPrefix_;/** @type {!Array<string>} */this.parts_=path.slice();/** @type {number} Initialize to number of '/' chars needed in path. */this.byteLength_=Math.max(1,this.parts_.length);for(var i=0;i<this.parts_.length;i++){this.byteLength_+=(0,_util.stringLength)(this.parts_[i]);}this.checkValid_();}Object.defineProperty(ValidationPath,"MAX_PATH_DEPTH",{/** @const {number} Maximum key depth. */get:function get(){return 32;},enumerable:false,configurable:true});Object.defineProperty(ValidationPath,"MAX_PATH_LENGTH_BYTES",{/** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */get:function get(){return 768;},enumerable:false,configurable:true});/** @param {string} child */ValidationPath.prototype.push=function(child){// Count the needed '/'
if(this.parts_.length>0){this.byteLength_+=1;}this.parts_.push(child);this.byteLength_+=(0,_util.stringLength)(child);this.checkValid_();};ValidationPath.prototype.pop=function(){var last=this.parts_.pop();this.byteLength_-=(0,_util.stringLength)(last);// Un-count the previous '/'
if(this.parts_.length>0){this.byteLength_-=1;}};ValidationPath.prototype.checkValid_=function(){if(this.byteLength_>ValidationPath.MAX_PATH_LENGTH_BYTES){throw new Error(this.errorPrefix_+'has a key path longer than '+ValidationPath.MAX_PATH_LENGTH_BYTES+' bytes ('+this.byteLength_+').');}if(this.parts_.length>ValidationPath.MAX_PATH_DEPTH){throw new Error(this.errorPrefix_+'path specified exceeds the maximum depth that can be written ('+ValidationPath.MAX_PATH_DEPTH+') or object contains a cycle '+this.toErrorString());}};/**
     * String for use in error messages - uses '.' notation for path.
     *
     * @return {string}
     */ValidationPath.prototype.toErrorString=function(){if(this.parts_.length===0){return'';}return"in property '"+this.parts_.join('.')+"'";};return ValidationPath;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var PROTOCOL_VERSION='5';var VERSION_PARAM='v';var TRANSPORT_SESSION_PARAM='s';var REFERER_PARAM='r';var FORGE_REF='f';// Matches console.firebase.google.com, firebase-console-*.corp.google.com and
// firebase.corp.google.com
var FORGE_DOMAIN_RE=/(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;var LAST_SESSION_PARAM='ls';var APPLICATION_ID_PARAM='p';var WEBSOCKET='websocket';var LONG_POLLING='long_polling';/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class that holds metadata about a Repo object
 *
 * @constructor
 */var RepoInfo=/** @class */function(){/**
     * @param host Hostname portion of the url for the repo
     * @param secure Whether or not this repo is accessed over ssl
     * @param namespace The namespace represented by the repo
     * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
     * @param nodeAdmin Whether this instance uses Admin SDK credentials
     * @param persistenceKey Override the default session persistence storage key
     */function RepoInfo(host,secure,namespace,webSocketOnly,nodeAdmin,persistenceKey,includeNamespaceInQueryParams){if(nodeAdmin===void 0){nodeAdmin=false;}if(persistenceKey===void 0){persistenceKey='';}if(includeNamespaceInQueryParams===void 0){includeNamespaceInQueryParams=false;}this.secure=secure;this.namespace=namespace;this.webSocketOnly=webSocketOnly;this.nodeAdmin=nodeAdmin;this.persistenceKey=persistenceKey;this.includeNamespaceInQueryParams=includeNamespaceInQueryParams;this.host=host.toLowerCase();this.domain=this.host.substr(this.host.indexOf('.')+1);this.internalHost=PersistentStorage.get('host:'+host)||this.host;}RepoInfo.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()||this.includeNamespaceInQueryParams;};RepoInfo.prototype.isCacheableHost=function(){return this.internalHost.substr(0,2)==='s-';};RepoInfo.prototype.isDemoHost=function(){return this.domain==='firebaseio-demo.com';};RepoInfo.prototype.isCustomHost=function(){return this.domain!=='firebaseio.com'&&this.domain!=='firebaseio-demo.com';};RepoInfo.prototype.updateHost=function(newHost){if(newHost!==this.internalHost){this.internalHost=newHost;if(this.isCacheableHost()){PersistentStorage.set('host:'+this.host,this.internalHost);}}};/**
     * Returns the websocket URL for this repo
     * @param {string} type of connection
     * @param {Object} params list
     * @return {string} The URL for this repo
     */RepoInfo.prototype.connectionURL=function(type,params){(0,_util.assert)(typeof type==='string','typeof type must == string');(0,_util.assert)(_typeof(params)==='object','typeof params must == object');var connURL;if(type===WEBSOCKET){connURL=(this.secure?'wss://':'ws://')+this.internalHost+'/.ws?';}else if(type===LONG_POLLING){connURL=(this.secure?'https://':'http://')+this.internalHost+'/.lp?';}else{throw new Error('Unknown connection type: '+type);}if(this.needsQueryParam()){params['ns']=this.namespace;}var pairs=[];each(params,function(key,value){pairs.push(key+'='+value);});return connURL+pairs.join('&');};/** @return {string} */RepoInfo.prototype.toString=function(){var str=this.toURLString();if(this.persistenceKey){str+='<'+this.persistenceKey+'>';}return str;};/** @return {string} */RepoInfo.prototype.toURLString=function(){var protocol=this.secure?'https://':'http://';var query=this.includeNamespaceInQueryParams?"?ns="+this.namespace:'';return""+protocol+this.host+"/"+query;};return RepoInfo;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!string} pathString
 * @return {string}
 */function decodePath(pathString){var pathStringDecoded='';var pieces=pathString.split('/');for(var i=0;i<pieces.length;i++){if(pieces[i].length>0){var piece=pieces[i];try{piece=decodeURIComponent(piece.replace(/\+/g,' '));}catch(e){}pathStringDecoded+='/'+piece;}}return pathStringDecoded;}/**
 * @param {!string} queryString
 * @return {!{[key:string]:string}} key value hash
 */function decodeQuery(queryString){var e_1,_a;var results={};if(queryString.charAt(0)==='?'){queryString=queryString.substring(1);}try{for(var _b=(0,_tslib.__values)(queryString.split('&')),_c=_b.next();!_c.done;_c=_b.next()){var segment=_c.value;if(segment.length===0){continue;}var kv=segment.split('=');if(kv.length===2){results[decodeURIComponent(kv[0])]=decodeURIComponent(kv[1]);}else{warn("Invalid query segment '"+segment+"' in query '"+queryString+"'");}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b["return"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}return results;}var parseRepoInfo=function parseRepoInfo(dataURL,nodeAdmin){var parsedUrl=parseDatabaseURL(dataURL),namespace=parsedUrl.namespace;if(parsedUrl.domain==='firebase.com'){fatal(parsedUrl.host+' is no longer supported. '+'Please use <YOUR FIREBASE>.firebaseio.com instead');}// Catch common error of uninitialized namespace value.
if((!namespace||namespace==='undefined')&&parsedUrl.domain!=='localhost'){fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');}if(!parsedUrl.secure){warnIfPageIsSecure();}var webSocketOnly=parsedUrl.scheme==='ws'||parsedUrl.scheme==='wss';return{repoInfo:new RepoInfo(parsedUrl.host,parsedUrl.secure,namespace,nodeAdmin,webSocketOnly,/*persistenceKey=*/'',/*includeNamespaceInQueryParams=*/namespace!==parsedUrl.subdomain),path:new Path(parsedUrl.pathString)};};/**
 *
 * @param {!string} dataURL
 * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}
 */var parseDatabaseURL=function parseDatabaseURL(dataURL){// Default to empty strings in the event of a malformed string.
var host='',domain='',subdomain='',pathString='',namespace='';// Always default to SSL, unless otherwise specified.
var secure=true,scheme='https',port=443;// Don't do any validation here. The caller is responsible for validating the result of parsing.
if(typeof dataURL==='string'){// Parse scheme.
var colonInd=dataURL.indexOf('//');if(colonInd>=0){scheme=dataURL.substring(0,colonInd-1);dataURL=dataURL.substring(colonInd+2);}// Parse host, path, and query string.
var slashInd=dataURL.indexOf('/');if(slashInd===-1){slashInd=dataURL.length;}var questionMarkInd=dataURL.indexOf('?');if(questionMarkInd===-1){questionMarkInd=dataURL.length;}host=dataURL.substring(0,Math.min(slashInd,questionMarkInd));if(slashInd<questionMarkInd){// For pathString, questionMarkInd will always come after slashInd
pathString=decodePath(dataURL.substring(slashInd,questionMarkInd));}var queryParams=decodeQuery(dataURL.substring(Math.min(dataURL.length,questionMarkInd)));// If we have a port, use scheme for determining if it's secure.
colonInd=host.indexOf(':');if(colonInd>=0){secure=scheme==='https'||scheme==='wss';port=parseInt(host.substring(colonInd+1),10);}else{colonInd=host.length;}var hostWithoutPort=host.slice(0,colonInd);if(hostWithoutPort.toLowerCase()==='localhost'){domain='localhost';}else if(hostWithoutPort.split('.').length<=2){domain=hostWithoutPort;}else{// Interpret the subdomain of a 3 or more component URL as the namespace name.
var dotInd=host.indexOf('.');subdomain=host.substring(0,dotInd).toLowerCase();domain=host.substring(dotInd+1);// Normalize namespaces to lowercase to share storage / connection.
namespace=subdomain;}// Always treat the value of the `ns` as the namespace name if it is present.
if('ns'in queryParams){namespace=queryParams['ns'];}}return{host:host,port:port,domain:domain,subdomain:subdomain,secure:secure,scheme:scheme,pathString:pathString,namespace:namespace};};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * True for invalid Firebase keys
 * @type {RegExp}
 * @private
 */var INVALID_KEY_REGEX_=/[\[\].#$\/\u0000-\u001F\u007F]/;/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 * @type {RegExp}
 * @private
 */var INVALID_PATH_REGEX_=/[\[\].#$\u0000-\u001F\u007F]/;/**
 * Maximum number of characters to allow in leaf value
 * @type {number}
 * @private
 */var MAX_LEAF_SIZE_=10*1024*1024;/**
 * @param {*} key
 * @return {boolean}
 */var isValidKey=function isValidKey(key){return typeof key==='string'&&key.length!==0&&!INVALID_KEY_REGEX_.test(key);};/**
 * @param {string} pathString
 * @return {boolean}
 */var isValidPathString=function isValidPathString(pathString){return typeof pathString==='string'&&pathString.length!==0&&!INVALID_PATH_REGEX_.test(pathString);};/**
 * @param {string} pathString
 * @return {boolean}
 */var isValidRootPathString=function isValidRootPathString(pathString){if(pathString){// Allow '/.info/' at the beginning.
pathString=pathString.replace(/^\/*\.info(\/|$)/,'/');}return isValidPathString(pathString);};/**
 * @param {*} priority
 * @return {boolean}
 */var isValidPriority=function isValidPriority(priority){return priority===null||typeof priority==='string'||typeof priority==='number'&&!isInvalidJSONNumber(priority)||priority&&_typeof(priority)==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any
(0,_util.contains)(priority,'.sv');};/**
 * Pre-validate a datum passed as an argument to Firebase function.
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */var validateFirebaseDataArg=function validateFirebaseDataArg(fnName,argumentNumber,data,path,optional){if(optional&&data===undefined){return;}validateFirebaseData((0,_util.errorPrefix)(fnName,argumentNumber,optional),data,path);};/**
 * Validate a data object client-side before sending to server.
 *
 * @param {string} errorPrefix
 * @param {*} data
 * @param {!Path|!ValidationPath} path_
 */var validateFirebaseData=function validateFirebaseData(errorPrefix,data,path_){var path=path_ instanceof Path?new ValidationPath(path_,errorPrefix):path_;if(data===undefined){throw new Error(errorPrefix+'contains undefined '+path.toErrorString());}if(typeof data==='function'){throw new Error(errorPrefix+'contains a function '+path.toErrorString()+' with contents = '+data.toString());}if(isInvalidJSONNumber(data)){throw new Error(errorPrefix+'contains '+data.toString()+' '+path.toErrorString());}// Check max leaf size, but try to avoid the utf8 conversion if we can.
if(typeof data==='string'&&data.length>MAX_LEAF_SIZE_/3&&(0,_util.stringLength)(data)>MAX_LEAF_SIZE_){throw new Error(errorPrefix+'contains a string greater than '+MAX_LEAF_SIZE_+' utf8 bytes '+path.toErrorString()+" ('"+data.substring(0,50)+"...')");}// TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
// to save extra walking of large objects.
if(data&&_typeof(data)==='object'){var hasDotValue_1=false;var hasActualChild_1=false;each(data,function(key,value){if(key==='.value'){hasDotValue_1=true;}else if(key!=='.priority'&&key!=='.sv'){hasActualChild_1=true;if(!isValidKey(key)){throw new Error(errorPrefix+' contains an invalid key ('+key+') '+path.toErrorString()+'.  Keys must be non-empty strings '+'and can\'t contain ".", "#", "$", "/", "[", or "]"');}}path.push(key);validateFirebaseData(errorPrefix,value,path);path.pop();});if(hasDotValue_1&&hasActualChild_1){throw new Error(errorPrefix+' contains ".value" child '+path.toErrorString()+' in addition to actual children.');}}};/**
 * Pre-validate paths passed in the firebase function.
 *
 * @param {string} errorPrefix
 * @param {Array<!Path>} mergePaths
 */var validateFirebaseMergePaths=function validateFirebaseMergePaths(errorPrefix,mergePaths){var i,curPath;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];var keys=curPath.slice();for(var j=0;j<keys.length;j++){if(keys[j]==='.priority'&&j===keys.length-1);else if(!isValidKey(keys[j])){throw new Error(errorPrefix+'contains an invalid key ('+keys[j]+') in path '+curPath.toString()+'. Keys must be non-empty strings '+'and can\'t contain ".", "#", "$", "/", "[", or "]"');}}}// Check that update keys are not descendants of each other.
// We rely on the property that sorting guarantees that ancestors come
// right before descendants.
mergePaths.sort(Path.comparePaths);var prevPath=null;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];if(prevPath!==null&&prevPath.contains(curPath)){throw new Error(errorPrefix+'contains a path '+prevPath.toString()+' that is ancestor of another path '+curPath.toString());}prevPath=curPath;}};/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */var validateFirebaseMergeDataArg=function validateFirebaseMergeDataArg(fnName,argumentNumber,data,path,optional){if(optional&&data===undefined){return;}var errorPrefix$1=(0,_util.errorPrefix)(fnName,argumentNumber,optional);if(!(data&&_typeof(data)==='object')||Array.isArray(data)){throw new Error(errorPrefix$1+' must be an object containing the children to replace.');}var mergePaths=[];each(data,function(key,value){var curPath=new Path(key);validateFirebaseData(errorPrefix$1,value,path.child(curPath));if(curPath.getBack()==='.priority'){if(!isValidPriority(value)){throw new Error(errorPrefix$1+"contains an invalid value for '"+curPath.toString()+"', which must be a valid "+'Firebase priority (a string, finite number, server value, or null).');}}mergePaths.push(curPath);});validateFirebaseMergePaths(errorPrefix$1,mergePaths);};var validatePriority=function validatePriority(fnName,argumentNumber,priority,optional){if(optional&&priority===undefined){return;}if(isInvalidJSONNumber(priority)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'is '+priority.toString()+', but must be a valid Firebase priority (a string, finite number, '+'server value, or null).');}// Special case to allow importing data with a .sv.
if(!isValidPriority(priority)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'must be a valid Firebase priority '+'(a string, finite number, server value, or null).');}};var validateEventType=function validateEventType(fnName,argumentNumber,eventType,optional){if(optional&&eventType===undefined){return;}switch(eventType){case'value':case'child_added':case'child_removed':case'child_changed':case'child_moved':break;default:throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'must be a valid event type = "value", "child_added", "child_removed", '+'"child_changed", or "child_moved".');}};var validateKey=function validateKey(fnName,argumentNumber,key,optional){if(optional&&key===undefined){return;}if(!isValidKey(key)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'was an invalid key = "'+key+'".  Firebase keys must be non-empty strings and '+'can\'t contain ".", "#", "$", "/", "[", or "]").');}};var validatePathString=function validatePathString(fnName,argumentNumber,pathString,optional){if(optional&&pathString===undefined){return;}if(!isValidPathString(pathString)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'was an invalid path = "'+pathString+'". Paths must be non-empty strings and '+'can\'t contain ".", "#", "$", "[", or "]"');}};var validateRootPathString=function validateRootPathString(fnName,argumentNumber,pathString,optional){if(pathString){// Allow '/.info/' at the beginning.
pathString=pathString.replace(/^\/*\.info(\/|$)/,'/');}validatePathString(fnName,argumentNumber,pathString,optional);};var validateWritablePath=function validateWritablePath(fnName,path){if(path.getFront()==='.info'){throw new Error(fnName+" failed = Can't modify data under /.info/");}};var validateUrl=function validateUrl(fnName,argumentNumber,parsedUrl){// TODO = Validate server better.
var pathString=parsedUrl.path.toString();if(!(typeof parsedUrl.repoInfo.host==='string')||parsedUrl.repoInfo.host.length===0||!isValidKey(parsedUrl.repoInfo.namespace)&&parsedUrl.repoInfo.host.split(':')[0]!=='localhost'||pathString.length!==0&&!isValidRootPathString(pathString)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,false)+'must be a valid firebase URL and '+'the path can\'t contain ".", "#", "$", "[", or "]".');}};var validateBoolean=function validateBoolean(fnName,argumentNumber,bool,optional){if(optional&&bool===undefined){return;}if(typeof bool!=='boolean'){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'must be a boolean.');}};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 */var OnDisconnect=/** @class */function(){/**
     * @param {!Repo} repo_
     * @param {!Path} path_
     */function OnDisconnect(repo_,path_){this.repo_=repo_;this.path_=path_;}/**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */OnDisconnect.prototype.cancel=function(onComplete){(0,_util.validateArgCount)('OnDisconnect.cancel',0,1,arguments.length);(0,_util.validateCallback)('OnDisconnect.cancel',1,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectCancel(this.path_,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */OnDisconnect.prototype.remove=function(onComplete){(0,_util.validateArgCount)('OnDisconnect.remove',0,1,arguments.length);validateWritablePath('OnDisconnect.remove',this.path_);(0,_util.validateCallback)('OnDisconnect.remove',1,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectSet(this.path_,null,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {*} value
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */OnDisconnect.prototype.set=function(value,onComplete){(0,_util.validateArgCount)('OnDisconnect.set',1,2,arguments.length);validateWritablePath('OnDisconnect.set',this.path_);validateFirebaseDataArg('OnDisconnect.set',1,value,this.path_,false);(0,_util.validateCallback)('OnDisconnect.set',2,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectSet(this.path_,value,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {*} value
     * @param {number|string|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */OnDisconnect.prototype.setWithPriority=function(value,priority,onComplete){(0,_util.validateArgCount)('OnDisconnect.setWithPriority',2,3,arguments.length);validateWritablePath('OnDisconnect.setWithPriority',this.path_);validateFirebaseDataArg('OnDisconnect.setWithPriority',1,value,this.path_,false);validatePriority('OnDisconnect.setWithPriority',2,priority,false);(0,_util.validateCallback)('OnDisconnect.setWithPriority',3,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectSetWithPriority(this.path_,value,priority,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */OnDisconnect.prototype.update=function(objectToMerge,onComplete){(0,_util.validateArgCount)('OnDisconnect.update',1,2,arguments.length);validateWritablePath('OnDisconnect.update',this.path_);if(Array.isArray(objectToMerge)){var newObjectToMerge={};for(var i=0;i<objectToMerge.length;++i){newObjectToMerge[''+i]=objectToMerge[i];}objectToMerge=newObjectToMerge;warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the '+'existing data, or an Object with integer keys if you really do want to only update some of the children.');}validateFirebaseMergeDataArg('OnDisconnect.update',1,objectToMerge,this.path_,false);(0,_util.validateCallback)('OnDisconnect.update',2,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectUpdate(this.path_,objectToMerge,deferred.wrapCallback(onComplete));return deferred.promise;};return OnDisconnect;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */exports.OnDisconnect=OnDisconnect;var TransactionResult=/** @class */function(){/**
     * A type for the resolve value of Firebase.transaction.
     * @constructor
     * @dict
     * @param {boolean} committed
     * @param {DataSnapshot} snapshot
     */function TransactionResult(committed,snapshot){this.committed=committed;this.snapshot=snapshot;}// Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
// for end-users
TransactionResult.prototype.toJSON=function(){(0,_util.validateArgCount)('TransactionResult.toJSON',0,1,arguments.length);return{committed:this.committed,snapshot:this.snapshot.toJSON()};};return TransactionResult;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */var nextPushId=function(){// Modeled after base64 web-safe chars, but ordered by ASCII.
var PUSH_CHARS='-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';// Timestamp of last push, used to prevent local collisions if you push twice
// in one ms.
var lastPushTime=0;// We generate 72-bits of randomness which get turned into 12 characters and
// appended to the timestamp to prevent collisions with other clients. We
// store the last characters we generated because in the event of a collision,
// we'll use those same characters except "incremented" by one.
var lastRandChars=[];return function(now){var duplicateTime=now===lastPushTime;lastPushTime=now;var i;var timeStampChars=new Array(8);for(i=7;i>=0;i--){timeStampChars[i]=PUSH_CHARS.charAt(now%64);// NOTE: Can't use << here because javascript will convert to int and lose
// the upper bits.
now=Math.floor(now/64);}(0,_util.assert)(now===0,'Cannot push at time == 0');var id=timeStampChars.join('');if(!duplicateTime){for(i=0;i<12;i++){lastRandChars[i]=Math.floor(Math.random()*64);}}else{// If the timestamp hasn't changed since last push, use the same random
// number, except incremented by 1.
for(i=11;i>=0&&lastRandChars[i]===63;i--){lastRandChars[i]=0;}lastRandChars[i]++;}for(i=0;i<12;i++){id+=PUSH_CHARS.charAt(lastRandChars[i]);}(0,_util.assert)(id.length===20,'nextPushId: Length should be 20.');return id;};}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @param {!string} name
 * @param {!Node} node
 * @constructor
 * @struct
 */var NamedNode=/** @class */function(){function NamedNode(name,node){this.name=name;this.node=node;}/**
     *
     * @param {!string} name
     * @param {!Node} node
     * @return {NamedNode}
     */NamedNode.Wrap=function(name,node){return new NamedNode(name,node);};return NamedNode;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @constructor
 */var Index=/** @class */function(){function Index(){}/**
     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
     * this index
     */Index.prototype.getCompare=function(){return this.compare.bind(this);};/**
     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
     *
     * @param {!Node} oldNode
     * @param {!Node} newNode
     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
     */Index.prototype.indexedValueChanged=function(oldNode,newNode){var oldWrapped=new NamedNode(MIN_NAME,oldNode);var newWrapped=new NamedNode(MIN_NAME,newNode);return this.compare(oldWrapped,newWrapped)!==0;};/**
     * @return {!NamedNode} a node wrapper that will sort equal to or less than
     * any other node wrapper, using this index
     */Index.prototype.minPost=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;};return Index;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __EMPTY_NODE;var KeyIndex=/** @class */function(_super){(0,_tslib.__extends)(KeyIndex,_super);function KeyIndex(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(KeyIndex,"__EMPTY_NODE",{get:function get(){return __EMPTY_NODE;},set:function set(val){__EMPTY_NODE=val;},enumerable:false,configurable:true});/**
     * @inheritDoc
     */KeyIndex.prototype.compare=function(a,b){return nameCompare(a.name,b.name);};/**
     * @inheritDoc
     */KeyIndex.prototype.isDefinedOn=function(node){// We could probably return true here (since every node has a key), but it's never called
// so just leaving unimplemented for now.
throw(0,_util.assertionError)('KeyIndex.isDefinedOn not expected to be called.');};/**
     * @inheritDoc
     */KeyIndex.prototype.indexedValueChanged=function(oldNode,newNode){return false;// The key for a node never changes.
};/**
     * @inheritDoc
     */KeyIndex.prototype.minPost=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;};/**
     * @inheritDoc
     */KeyIndex.prototype.maxPost=function(){// TODO: This should really be created once and cached in a static property, but
// NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
return new NamedNode(MAX_NAME,__EMPTY_NODE);};/**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */KeyIndex.prototype.makePost=function(indexValue,name){(0,_util.assert)(typeof indexValue==='string','KeyIndex indexValue must always be a string.');// We just use empty node, but it'll never be compared, since our comparator only looks at name.
return new NamedNode(indexValue,__EMPTY_NODE);};/**
     * @return {!string} String representation for inclusion in a query spec
     */KeyIndex.prototype.toString=function(){return'.key';};return KeyIndex;}(Index);var KEY_INDEX=new KeyIndex();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var MAX_NODE;function setMaxNode(val){MAX_NODE=val;}/**
 * @param {(!string|!number)} priority
 * @return {!string}
 */var priorityHashText=function priorityHashText(priority){if(typeof priority==='number'){return'number:'+doubleToIEEE754String(priority);}else{return'string:'+priority;}};/**
 * Validates that a priority snapshot Node is valid.
 *
 * @param {!Node} priorityNode
 */var validatePriorityNode=function validatePriorityNode(priorityNode){if(priorityNode.isLeafNode()){var val=priorityNode.val();(0,_util.assert)(typeof val==='string'||typeof val==='number'||_typeof(val)==='object'&&(0,_util.contains)(val,'.sv'),'Priority must be a string or number.');}else{(0,_util.assert)(priorityNode===MAX_NODE||priorityNode.isEmpty(),'priority of unexpected type.');}// Don't call getPriority() on MAX_NODE to avoid hitting assertion.
(0,_util.assert)(priorityNode===MAX_NODE||priorityNode.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.");};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __childrenNodeConstructor;/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */var LeafNode=/** @class */function(){/**
     * @implements {Node}
     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
     *                                         The object type is possible in the event of a deferred value
     * @param {!Node=} priorityNode_ The priority of this node.
     */function LeafNode(value_,priorityNode_){if(priorityNode_===void 0){priorityNode_=LeafNode.__childrenNodeConstructor.EMPTY_NODE;}this.value_=value_;this.priorityNode_=priorityNode_;this.lazyHash_=null;(0,_util.assert)(this.value_!==undefined&&this.value_!==null,"LeafNode shouldn't be created with null/undefined value.");validatePriorityNode(this.priorityNode_);}Object.defineProperty(LeafNode,"__childrenNodeConstructor",{get:function get(){return __childrenNodeConstructor;},set:function set(val){__childrenNodeConstructor=val;},enumerable:false,configurable:true});/** @inheritDoc */LeafNode.prototype.isLeafNode=function(){return true;};/** @inheritDoc */LeafNode.prototype.getPriority=function(){return this.priorityNode_;};/** @inheritDoc */LeafNode.prototype.updatePriority=function(newPriorityNode){return new LeafNode(this.value_,newPriorityNode);};/** @inheritDoc */LeafNode.prototype.getImmediateChild=function(childName){// Hack to treat priority as a regular child
if(childName==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}};/** @inheritDoc */LeafNode.prototype.getChild=function(path){if(path.isEmpty()){return this;}else if(path.getFront()==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}};/**
     * @inheritDoc
     */LeafNode.prototype.hasChild=function(){return false;};/** @inheritDoc */LeafNode.prototype.getPredecessorChildName=function(childName,childNode){return null;};/** @inheritDoc */LeafNode.prototype.updateImmediateChild=function(childName,newChildNode){if(childName==='.priority'){return this.updatePriority(newChildNode);}else if(newChildNode.isEmpty()&&childName!=='.priority'){return this;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName,newChildNode).updatePriority(this.priorityNode_);}};/** @inheritDoc */LeafNode.prototype.updateChild=function(path,newChildNode){var front=path.getFront();if(front===null){return newChildNode;}else if(newChildNode.isEmpty()&&front!=='.priority'){return this;}else{(0,_util.assert)(front!=='.priority'||path.getLength()===1,'.priority must be the last token in a path');return this.updateImmediateChild(front,LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(),newChildNode));}};/** @inheritDoc */LeafNode.prototype.isEmpty=function(){return false;};/** @inheritDoc */LeafNode.prototype.numChildren=function(){return 0;};/** @inheritDoc */LeafNode.prototype.forEachChild=function(index,action){return false;};/**
     * @inheritDoc
     */LeafNode.prototype.val=function(exportFormat){if(exportFormat&&!this.getPriority().isEmpty()){return{'.value':this.getValue(),'.priority':this.getPriority().val()};}else{return this.getValue();}};/** @inheritDoc */LeafNode.prototype.hash=function(){if(this.lazyHash_===null){var toHash='';if(!this.priorityNode_.isEmpty()){toHash+='priority:'+priorityHashText(this.priorityNode_.val())+':';}var type=_typeof(this.value_);toHash+=type+':';if(type==='number'){toHash+=doubleToIEEE754String(this.value_);}else{toHash+=this.value_;}this.lazyHash_=sha1(toHash);}return this.lazyHash_;};/**
     * Returns the value of the leaf node.
     * @return {Object|string|number|boolean} The value of the node.
     */LeafNode.prototype.getValue=function(){return this.value_;};/**
     * @inheritDoc
     */LeafNode.prototype.compareTo=function(other){if(other===LeafNode.__childrenNodeConstructor.EMPTY_NODE){return 1;}else if(other instanceof LeafNode.__childrenNodeConstructor){return-1;}else{(0,_util.assert)(other.isLeafNode(),'Unknown node type');return this.compareToLeafNode_(other);}};/**
     * Comparison specifically for two leaf nodes
     * @param {!LeafNode} otherLeaf
     * @return {!number}
     * @private
     */LeafNode.prototype.compareToLeafNode_=function(otherLeaf){var otherLeafType=_typeof(otherLeaf.value_);var thisLeafType=_typeof(this.value_);var otherIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);var thisIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);(0,_util.assert)(otherIndex>=0,'Unknown leaf type: '+otherLeafType);(0,_util.assert)(thisIndex>=0,'Unknown leaf type: '+thisLeafType);if(otherIndex===thisIndex){// Same type, compare values
if(thisLeafType==='object'){// Deferred value nodes are all equal, but we should also never get to this point...
return 0;}else{// Note that this works because true > false, all others are number or string comparisons
if(this.value_<otherLeaf.value_){return-1;}else if(this.value_===otherLeaf.value_){return 0;}else{return 1;}}}else{return thisIndex-otherIndex;}};/**
     * @inheritDoc
     */LeafNode.prototype.withIndex=function(){return this;};/**
     * @inheritDoc
     */LeafNode.prototype.isIndexed=function(){return true;};/**
     * @inheritDoc
     */LeafNode.prototype.equals=function(other){/**
         * @inheritDoc
         */if(other===this){return true;}else if(other.isLeafNode()){var otherLeaf=other;return this.value_===otherLeaf.value_&&this.priorityNode_.equals(otherLeaf.priorityNode_);}else{return false;}};/**
     * The sort order for comparing leaf nodes of different types. If two leaf nodes have
     * the same type, the comparison falls back to their value
     * @type {Array.<!string>}
     * @const
     */LeafNode.VALUE_TYPE_ORDER=['object','boolean','number','string'];return LeafNode;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var nodeFromJSON;var MAX_NODE$1;function setNodeFromJSON(val){nodeFromJSON=val;}function setMaxNode$1(val){MAX_NODE$1=val;}/**
 * @constructor
 * @extends {Index}
 * @private
 */var PriorityIndex=/** @class */function(_super){(0,_tslib.__extends)(PriorityIndex,_super);function PriorityIndex(){return _super!==null&&_super.apply(this,arguments)||this;}/**
     * @inheritDoc
     */PriorityIndex.prototype.compare=function(a,b){var aPriority=a.node.getPriority();var bPriority=b.node.getPriority();var indexCmp=aPriority.compareTo(bPriority);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}};/**
     * @inheritDoc
     */PriorityIndex.prototype.isDefinedOn=function(node){return!node.getPriority().isEmpty();};/**
     * @inheritDoc
     */PriorityIndex.prototype.indexedValueChanged=function(oldNode,newNode){return!oldNode.getPriority().equals(newNode.getPriority());};/**
     * @inheritDoc
     */PriorityIndex.prototype.minPost=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;};/**
     * @inheritDoc
     */PriorityIndex.prototype.maxPost=function(){return new NamedNode(MAX_NAME,new LeafNode('[PRIORITY-POST]',MAX_NODE$1));};/**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */PriorityIndex.prototype.makePost=function(indexValue,name){var priorityNode=nodeFromJSON(indexValue);return new NamedNode(name,new LeafNode('[PRIORITY-POST]',priorityNode));};/**
     * @return {!string} String representation for inclusion in a query spec
     */PriorityIndex.prototype.toString=function(){return'.priority';};return PriorityIndex;}(Index);var PRIORITY_INDEX=new PriorityIndex();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An iterator over an LLRBNode.
 */var SortedMapIterator=/** @class */function(){/**
     * @template K, V, T
     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
     * @param {?K} startKey
     * @param {function(K, K): number} comparator
     * @param {boolean} isReverse_ Whether or not to iterate in reverse
     * @param {(function(K, V):T)=} resultGenerator_
     */function SortedMapIterator(node,startKey,comparator,isReverse_,resultGenerator_){if(resultGenerator_===void 0){resultGenerator_=null;}this.isReverse_=isReverse_;this.resultGenerator_=resultGenerator_;/** @private
         * @type {Array.<!LLRBNode>}
         */this.nodeStack_=[];var cmp=1;while(!node.isEmpty()){node=node;cmp=startKey?comparator(node.key,startKey):1;// flip the comparison if we're going in reverse
if(isReverse_){cmp*=-1;}if(cmp<0){// This node is less than our start key. ignore it
if(this.isReverse_){node=node.left;}else{node=node.right;}}else if(cmp===0){// This node is exactly equal to our start key. Push it on the stack, but stop iterating;
this.nodeStack_.push(node);break;}else{// This node is greater than our start key, add it to the stack and move to the next one
this.nodeStack_.push(node);if(this.isReverse_){node=node.right;}else{node=node.left;}}}}SortedMapIterator.prototype.getNext=function(){if(this.nodeStack_.length===0){return null;}var node=this.nodeStack_.pop();var result;if(this.resultGenerator_){result=this.resultGenerator_(node.key,node.value);}else{result={key:node.key,value:node.value};}if(this.isReverse_){node=node.left;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.right;}}else{node=node.right;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.left;}}return result;};SortedMapIterator.prototype.hasNext=function(){return this.nodeStack_.length>0;};SortedMapIterator.prototype.peek=function(){if(this.nodeStack_.length===0){return null;}var node=this.nodeStack_[this.nodeStack_.length-1];if(this.resultGenerator_){return this.resultGenerator_(node.key,node.value);}else{return{key:node.key,value:node.value};}};return SortedMapIterator;}();/**
 * Represents a node in a Left-leaning Red-Black tree.
 */var LLRBNode=/** @class */function(){/**
     * @template K, V
     * @param {!K} key Key associated with this node.
     * @param {!V} value Value associated with this node.
     * @param {?boolean} color Whether this node is red.
     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
     */function LLRBNode(key,value,color,left,right){this.key=key;this.value=value;this.color=color!=null?color:LLRBNode.RED;this.left=left!=null?left:SortedMap.EMPTY_NODE;this.right=right!=null?right:SortedMap.EMPTY_NODE;}/**
     * Returns a copy of the current node, optionally replacing pieces of it.
     *
     * @param {?K} key New key for the node, or null.
     * @param {?V} value New value for the node, or null.
     * @param {?boolean} color New color for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
     * @return {!LLRBNode} The node copy.
     */LLRBNode.prototype.copy=function(key,value,color,left,right){return new LLRBNode(key!=null?key:this.key,value!=null?value:this.value,color!=null?color:this.color,left!=null?left:this.left,right!=null?right:this.right);};/**
     * @return {number} The total number of nodes in the tree.
     */LLRBNode.prototype.count=function(){return this.left.count()+1+this.right.count();};/**
     * @return {boolean} True if the tree is empty.
     */LLRBNode.prototype.isEmpty=function(){return false;};/**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     *   node.  If it returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */LLRBNode.prototype.inorderTraversal=function(action){return this.left.inorderTraversal(action)||!!action(this.key,this.value)||this.right.inorderTraversal(action);};/**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!Object, !Object)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {*} True if traversal was aborted.
     */LLRBNode.prototype.reverseTraversal=function(action){return this.right.reverseTraversal(action)||action(this.key,this.value)||this.left.reverseTraversal(action);};/**
     * @return {!Object} The minimum node in the tree.
     * @private
     */LLRBNode.prototype.min_=function(){if(this.left.isEmpty()){return this;}else{return this.left.min_();}};/**
     * @return {!K} The maximum key in the tree.
     */LLRBNode.prototype.minKey=function(){return this.min_().key;};/**
     * @return {!K} The maximum key in the tree.
     */LLRBNode.prototype.maxKey=function(){if(this.right.isEmpty()){return this.key;}else{return this.right.maxKey();}};/**
     *
     * @param {!Object} key Key to insert.
     * @param {!Object} value Value to insert.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with the key/value added.
     */LLRBNode.prototype.insert=function(key,value,comparator){var n=this;var cmp=comparator(key,n.key);if(cmp<0){n=n.copy(null,null,null,n.left.insert(key,value,comparator),null);}else if(cmp===0){n=n.copy(null,value,null,null,null);}else{n=n.copy(null,null,null,null,n.right.insert(key,value,comparator));}return n.fixUp_();};/**
     * @private
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
     */LLRBNode.prototype.removeMin_=function(){if(this.left.isEmpty()){return SortedMap.EMPTY_NODE;}var n=this;if(!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.removeMin_(),null);return n.fixUp_();};/**
     * @param {!Object} key The key of the item to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
     */LLRBNode.prototype.remove=function(key,comparator){var n,smallest;n=this;if(comparator(key,n.key)<0){if(!n.left.isEmpty()&&!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.remove(key,comparator),null);}else{if(n.left.isRed_()){n=n.rotateRight_();}if(!n.right.isEmpty()&&!n.right.isRed_()&&!n.right.left.isRed_()){n=n.moveRedRight_();}if(comparator(key,n.key)===0){if(n.right.isEmpty()){return SortedMap.EMPTY_NODE;}else{smallest=n.right.min_();n=n.copy(smallest.key,smallest.value,null,null,n.right.removeMin_());}}n=n.copy(null,null,null,null,n.right.remove(key,comparator));}return n.fixUp_();};/**
     * @private
     * @return {boolean} Whether this is a RED node.
     */LLRBNode.prototype.isRed_=function(){return this.color;};/**
     * @private
     * @return {!LLRBNode} New tree after performing any needed rotations.
     */LLRBNode.prototype.fixUp_=function(){var n=this;if(n.right.isRed_()&&!n.left.isRed_()){n=n.rotateLeft_();}if(n.left.isRed_()&&n.left.left.isRed_()){n=n.rotateRight_();}if(n.left.isRed_()&&n.right.isRed_()){n=n.colorFlip_();}return n;};/**
     * @private
     * @return {!LLRBNode} New tree, after moveRedLeft.
     */LLRBNode.prototype.moveRedLeft_=function(){var n=this.colorFlip_();if(n.right.left.isRed_()){n=n.copy(null,null,null,null,n.right.rotateRight_());n=n.rotateLeft_();n=n.colorFlip_();}return n;};/**
     * @private
     * @return {!LLRBNode} New tree, after moveRedRight.
     */LLRBNode.prototype.moveRedRight_=function(){var n=this.colorFlip_();if(n.left.left.isRed_()){n=n.rotateRight_();n=n.colorFlip_();}return n;};/**
     * @private
     * @return {!LLRBNode} New tree, after rotateLeft.
     */LLRBNode.prototype.rotateLeft_=function(){var nl=this.copy(null,null,LLRBNode.RED,null,this.right.left);return this.right.copy(null,null,this.color,nl,null);};/**
     * @private
     * @return {!LLRBNode} New tree, after rotateRight.
     */LLRBNode.prototype.rotateRight_=function(){var nr=this.copy(null,null,LLRBNode.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,nr);};/**
     * @private
     * @return {!LLRBNode} New tree, after colorFlip.
     */LLRBNode.prototype.colorFlip_=function(){var left=this.left.copy(null,null,!this.left.color,null,null);var right=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,left,right);};/**
     * For testing.
     *
     * @private
     * @return {boolean} True if all is well.
     */LLRBNode.prototype.checkMaxDepth_=function(){var blackDepth=this.check_();return Math.pow(2.0,blackDepth)<=this.count()+1;};/**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */LLRBNode.prototype.check_=function(){if(this.isRed_()&&this.left.isRed_()){throw new Error('Red node has red child('+this.key+','+this.value+')');}if(this.right.isRed_()){throw new Error('Right child of ('+this.key+','+this.value+') is red');}var blackDepth=this.left.check_();if(blackDepth!==this.right.check_()){throw new Error('Black depths differ');}else{return blackDepth+(this.isRed_()?0:1);}};LLRBNode.RED=true;LLRBNode.BLACK=false;return LLRBNode;}();/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */var LLRBEmptyNode=/** @class */function(){function LLRBEmptyNode(){}/**
     * Returns a copy of the current node.
     *
     * @return {!LLRBEmptyNode} The node copy.
     */LLRBEmptyNode.prototype.copy=function(key,value,color,left,right){return this;};/**
     * Returns a copy of the tree, with the specified key/value added.
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with item added.
     */LLRBEmptyNode.prototype.insert=function(key,value,comparator){return new LLRBNode(key,value,null);};/**
     * Returns a copy of the tree, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBEmptyNode} New tree, with item removed.
     */LLRBEmptyNode.prototype.remove=function(key,comparator){return this;};/**
     * @return {number} The total number of nodes in the tree.
     */LLRBEmptyNode.prototype.count=function(){return 0;};/**
     * @return {boolean} True if the tree is empty.
     */LLRBEmptyNode.prototype.isEmpty=function(){return true;};/**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */LLRBEmptyNode.prototype.inorderTraversal=function(action){return false;};/**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */LLRBEmptyNode.prototype.reverseTraversal=function(action){return false;};/**
     * @return {null}
     */LLRBEmptyNode.prototype.minKey=function(){return null;};/**
     * @return {null}
     */LLRBEmptyNode.prototype.maxKey=function(){return null;};/**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */LLRBEmptyNode.prototype.check_=function(){return 0;};/**
     * @private
     * @return {boolean} Whether this node is red.
     */LLRBEmptyNode.prototype.isRed_=function(){return false;};return LLRBEmptyNode;}();/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */var SortedMap=/** @class */function(){/**
     * @template K, V
     * @param {function(K, K):number} comparator_ Key comparator.
     * @param {LLRBNode=} root_ (Optional) Root node for the map.
     */function SortedMap(comparator_,root_){if(root_===void 0){root_=SortedMap.EMPTY_NODE;}this.comparator_=comparator_;this.root_=root_;}/**
     * Returns a copy of the map, with the specified key/value added or replaced.
     * (TODO: We should perhaps rename this method to 'put')
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @return {!SortedMap.<K, V>} New map, with item added.
     */SortedMap.prototype.insert=function(key,value){return new SortedMap(this.comparator_,this.root_.insert(key,value,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));};/**
     * Returns a copy of the map, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @return {!SortedMap.<K, V>} New map, with item removed.
     */SortedMap.prototype.remove=function(key){return new SortedMap(this.comparator_,this.root_.remove(key,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));};/**
     * Returns the value of the node with the given key, or null.
     *
     * @param {!K} key The key to look up.
     * @return {?V} The value of the node with the given key, or null if the
     * key doesn't exist.
     */SortedMap.prototype.get=function(key){var cmp;var node=this.root_;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){return node.value;}else if(cmp<0){node=node.left;}else if(cmp>0){node=node.right;}}return null;};/**
     * Returns the key of the item *before* the specified key, or null if key is the first item.
     * @param {K} key The key to find the predecessor of
     * @return {?K} The predecessor key.
     */SortedMap.prototype.getPredecessorKey=function(key){var cmp,node=this.root_,rightParent=null;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){if(!node.left.isEmpty()){node=node.left;while(!node.right.isEmpty()){node=node.right;}return node.key;}else if(rightParent){return rightParent.key;}else{return null;// first item.
}}else if(cmp<0){node=node.left;}else if(cmp>0){rightParent=node;node=node.right;}}throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');};/**
     * @return {boolean} True if the map is empty.
     */SortedMap.prototype.isEmpty=function(){return this.root_.isEmpty();};/**
     * @return {number} The total number of nodes in the map.
     */SortedMap.prototype.count=function(){return this.root_.count();};/**
     * @return {?K} The minimum key in the map.
     */SortedMap.prototype.minKey=function(){return this.root_.minKey();};/**
     * @return {?K} The maximum key in the map.
     */SortedMap.prototype.maxKey=function(){return this.root_.maxKey();};/**
     * Traverses the map in key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!K, !V):*} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */SortedMap.prototype.inorderTraversal=function(action){return this.root_.inorderTraversal(action);};/**
     * Traverses the map in reverse key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!Object, !Object)} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} True if the traversal was aborted.
     */SortedMap.prototype.reverseTraversal=function(action){return this.root_.reverseTraversal(action);};/**
     * Returns an iterator over the SortedMap.
     * @template T
     * @param {(function(K, V):T)=} resultGenerator
     * @return {SortedMapIterator.<K, V, T>} The iterator.
     */SortedMap.prototype.getIterator=function(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,false,resultGenerator);};SortedMap.prototype.getIteratorFrom=function(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,false,resultGenerator);};SortedMap.prototype.getReverseIteratorFrom=function(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,true,resultGenerator);};SortedMap.prototype.getReverseIterator=function(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,true,resultGenerator);};/**
     * Always use the same empty node, to reduce memory.
     * @const
     */SortedMap.EMPTY_NODE=new LLRBEmptyNode();return SortedMap;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var LOG_2=Math.log(2);/**
 * @constructor
 */var Base12Num=/** @class */function(){/**
     * @param {number} length
     */function Base12Num(length){var logBase2=function logBase2(num){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return parseInt(Math.log(num)/LOG_2,10);};var bitMask=function bitMask(bits){return parseInt(Array(bits+1).join('1'),2);};this.count=logBase2(length+1);this.current_=this.count-1;var mask=bitMask(this.count);this.bits_=length+1&mask;}/**
     * @return {boolean}
     */Base12Num.prototype.nextBitIsOne=function(){//noinspection JSBitwiseOperatorUsage
var result=!(this.bits_&0x1<<this.current_);this.current_--;return result;};return Base12Num;}();/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @template K, V
 * @param {Array.<!NamedNode>} childList Unsorted list of children
 * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
 * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
 *                                                        type is not NamedNode
 * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
 * @return {SortedMap.<K, V>}
 */var buildChildSet=function buildChildSet(childList,cmp,keyFn,mapSortFn){childList.sort(cmp);var buildBalancedTree=function buildBalancedTree(low,high){var length=high-low;var namedNode;var key;if(length===0){return null;}else if(length===1){namedNode=childList[low];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,null,null);}else{// eslint-disable-next-line @typescript-eslint/no-explicit-any
var middle=parseInt(length/2,10)+low;var left=buildBalancedTree(low,middle);var right=buildBalancedTree(middle+1,high);namedNode=childList[middle];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,left,right);}};var buildFrom12Array=function buildFrom12Array(base12){var node=null;var root=null;var index=childList.length;var buildPennant=function buildPennant(chunkSize,color){var low=index-chunkSize;var high=index;index-=chunkSize;var childTree=buildBalancedTree(low+1,high);var namedNode=childList[low];var key=keyFn?keyFn(namedNode):namedNode;attachPennant(new LLRBNode(key,namedNode.node,color,null,childTree));};var attachPennant=function attachPennant(pennant){if(node){node.left=pennant;node=pennant;}else{root=pennant;node=pennant;}};for(var i=0;i<base12.count;++i){var isOne=base12.nextBitIsOne();// The number of nodes taken in each slice is 2^(arr.length - (i + 1))
var chunkSize=Math.pow(2,base12.count-(i+1));if(isOne){buildPennant(chunkSize,LLRBNode.BLACK);}else{// current == 2
buildPennant(chunkSize,LLRBNode.BLACK);buildPennant(chunkSize,LLRBNode.RED);}}return root;};var base12=new Base12Num(childList.length);var root=buildFrom12Array(base12);// eslint-disable-next-line @typescript-eslint/no-explicit-any
return new SortedMap(mapSortFn||cmp,root);};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var _defaultIndexMap;var fallbackObject={};var IndexMap=/** @class */function(){function IndexMap(indexes_,indexSet_){this.indexes_=indexes_;this.indexSet_=indexSet_;}Object.defineProperty(IndexMap,"Default",{/**
         * The default IndexMap for nodes without a priority
         */get:function get(){(0,_util.assert)(fallbackObject&&PRIORITY_INDEX,'ChildrenNode.ts has not been loaded');_defaultIndexMap=_defaultIndexMap||new IndexMap({'.priority':fallbackObject},{'.priority':PRIORITY_INDEX});return _defaultIndexMap;},enumerable:false,configurable:true});IndexMap.prototype.get=function(indexKey){var sortedMap=(0,_util.safeGet)(this.indexes_,indexKey);if(!sortedMap){throw new Error('No index defined for '+indexKey);}if(sortedMap instanceof SortedMap){return sortedMap;}else{// The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
// regular child map
return null;}};IndexMap.prototype.hasIndex=function(indexDefinition){return(0,_util.contains)(this.indexSet_,indexDefinition.toString());};IndexMap.prototype.addIndex=function(indexDefinition,existingChildren){(0,_util.assert)(indexDefinition!==KEY_INDEX,"KeyIndex always exists and isn't meant to be added to the IndexMap.");var childList=[];var sawIndexedValue=false;var iter=existingChildren.getIterator(NamedNode.Wrap);var next=iter.getNext();while(next){sawIndexedValue=sawIndexedValue||indexDefinition.isDefinedOn(next.node);childList.push(next);next=iter.getNext();}var newIndex;if(sawIndexedValue){newIndex=buildChildSet(childList,indexDefinition.getCompare());}else{newIndex=fallbackObject;}var indexName=indexDefinition.toString();var newIndexSet=(0,_tslib.__assign)({},this.indexSet_);newIndexSet[indexName]=indexDefinition;var newIndexes=(0,_tslib.__assign)({},this.indexes_);newIndexes[indexName]=newIndex;return new IndexMap(newIndexes,newIndexSet);};/**
     * Ensure that this node is properly tracked in any indexes that we're maintaining
     */IndexMap.prototype.addToIndexes=function(namedNode,existingChildren){var _this=this;var newIndexes=(0,_util.map)(this.indexes_,function(indexedChildren,indexName){var index=(0,_util.safeGet)(_this.indexSet_,indexName);(0,_util.assert)(index,'Missing index implementation for '+indexName);if(indexedChildren===fallbackObject){// Check to see if we need to index everything
if(index.isDefinedOn(namedNode.node)){// We need to build this index
var childList=[];var iter=existingChildren.getIterator(NamedNode.Wrap);var next=iter.getNext();while(next){if(next.name!==namedNode.name){childList.push(next);}next=iter.getNext();}childList.push(namedNode);return buildChildSet(childList,index.getCompare());}else{// No change, this remains a fallback
return fallbackObject;}}else{var existingSnap=existingChildren.get(namedNode.name);var newChildren=indexedChildren;if(existingSnap){newChildren=newChildren.remove(new NamedNode(namedNode.name,existingSnap));}return newChildren.insert(namedNode,namedNode.node);}});return new IndexMap(newIndexes,this.indexSet_);};/**
     * Create a new IndexMap instance with the given value removed
     */IndexMap.prototype.removeFromIndexes=function(namedNode,existingChildren){var newIndexes=(0,_util.map)(this.indexes_,function(indexedChildren){if(indexedChildren===fallbackObject){// This is the fallback. Just return it, nothing to do in this case
return indexedChildren;}else{var existingSnap=existingChildren.get(namedNode.name);if(existingSnap){return indexedChildren.remove(new NamedNode(namedNode.name,existingSnap));}else{// No record of this child
return indexedChildren;}}});return new IndexMap(newIndexes,this.indexSet_);};return IndexMap;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function NAME_ONLY_COMPARATOR(left,right){return nameCompare(left.name,right.name);}function NAME_COMPARATOR(left,right){return nameCompare(left,right);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO: For memory savings, don't store priorityNode_ if it's empty.
var EMPTY_NODE;/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 *
 * @constructor
 * @implements {Node}
 */var ChildrenNode=/** @class */function(){/**
     *
     * @param {!SortedMap.<string, !Node>} children_ List of children
     * of this node..
     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
     * @param {!IndexMap} indexMap_
     */function ChildrenNode(children_,priorityNode_,indexMap_){this.children_=children_;this.priorityNode_=priorityNode_;this.indexMap_=indexMap_;this.lazyHash_=null;/**
         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
         * class instead of an empty ChildrenNode.
         */if(this.priorityNode_){validatePriorityNode(this.priorityNode_);}if(this.children_.isEmpty()){(0,_util.assert)(!this.priorityNode_||this.priorityNode_.isEmpty(),'An empty node cannot have a priority');}}Object.defineProperty(ChildrenNode,"EMPTY_NODE",{get:function get(){return EMPTY_NODE||(EMPTY_NODE=new ChildrenNode(new SortedMap(NAME_COMPARATOR),null,IndexMap.Default));},enumerable:false,configurable:true});/** @inheritDoc */ChildrenNode.prototype.isLeafNode=function(){return false;};/** @inheritDoc */ChildrenNode.prototype.getPriority=function(){return this.priorityNode_||EMPTY_NODE;};/** @inheritDoc */ChildrenNode.prototype.updatePriority=function(newPriorityNode){if(this.children_.isEmpty()){// Don't allow priorities on empty nodes
return this;}else{return new ChildrenNode(this.children_,newPriorityNode,this.indexMap_);}};/** @inheritDoc */ChildrenNode.prototype.getImmediateChild=function(childName){// Hack to treat priority as a regular child
if(childName==='.priority'){return this.getPriority();}else{var child=this.children_.get(childName);return child===null?EMPTY_NODE:child;}};/** @inheritDoc */ChildrenNode.prototype.getChild=function(path){var front=path.getFront();if(front===null){return this;}return this.getImmediateChild(front).getChild(path.popFront());};/** @inheritDoc */ChildrenNode.prototype.hasChild=function(childName){return this.children_.get(childName)!==null;};/** @inheritDoc */ChildrenNode.prototype.updateImmediateChild=function(childName,newChildNode){(0,_util.assert)(newChildNode,'We should always be passing snapshot nodes');if(childName==='.priority'){return this.updatePriority(newChildNode);}else{var namedNode=new NamedNode(childName,newChildNode);var newChildren=void 0,newIndexMap=void 0;if(newChildNode.isEmpty()){newChildren=this.children_.remove(childName);newIndexMap=this.indexMap_.removeFromIndexes(namedNode,this.children_);}else{newChildren=this.children_.insert(childName,newChildNode);newIndexMap=this.indexMap_.addToIndexes(namedNode,this.children_);}var newPriority=newChildren.isEmpty()?EMPTY_NODE:this.priorityNode_;return new ChildrenNode(newChildren,newPriority,newIndexMap);}};/** @inheritDoc */ChildrenNode.prototype.updateChild=function(path,newChildNode){var front=path.getFront();if(front===null){return newChildNode;}else{(0,_util.assert)(path.getFront()!=='.priority'||path.getLength()===1,'.priority must be the last token in a path');var newImmediateChild=this.getImmediateChild(front).updateChild(path.popFront(),newChildNode);return this.updateImmediateChild(front,newImmediateChild);}};/** @inheritDoc */ChildrenNode.prototype.isEmpty=function(){return this.children_.isEmpty();};/** @inheritDoc */ChildrenNode.prototype.numChildren=function(){return this.children_.count();};/** @inheritDoc */ChildrenNode.prototype.val=function(exportFormat){if(this.isEmpty()){return null;}var obj={};var numKeys=0,maxKey=0,allIntegerKeys=true;this.forEachChild(PRIORITY_INDEX,function(key,childNode){obj[key]=childNode.val(exportFormat);numKeys++;if(allIntegerKeys&&ChildrenNode.INTEGER_REGEXP_.test(key)){maxKey=Math.max(maxKey,Number(key));}else{allIntegerKeys=false;}});if(!exportFormat&&allIntegerKeys&&maxKey<2*numKeys){// convert to array.
var array=[];// eslint-disable-next-line guard-for-in
for(var key in obj){array[key]=obj[key];}return array;}else{if(exportFormat&&!this.getPriority().isEmpty()){obj['.priority']=this.getPriority().val();}return obj;}};/** @inheritDoc */ChildrenNode.prototype.hash=function(){if(this.lazyHash_===null){var toHash_1='';if(!this.getPriority().isEmpty()){toHash_1+='priority:'+priorityHashText(this.getPriority().val())+':';}this.forEachChild(PRIORITY_INDEX,function(key,childNode){var childHash=childNode.hash();if(childHash!==''){toHash_1+=':'+key+':'+childHash;}});this.lazyHash_=toHash_1===''?'':sha1(toHash_1);}return this.lazyHash_;};/** @inheritDoc */ChildrenNode.prototype.getPredecessorChildName=function(childName,childNode,index){var idx=this.resolveIndex_(index);if(idx){var predecessor=idx.getPredecessorKey(new NamedNode(childName,childNode));return predecessor?predecessor.name:null;}else{return this.children_.getPredecessorKey(childName);}};/**
     * @param {!Index} indexDefinition
     * @return {?string}
     */ChildrenNode.prototype.getFirstChildName=function(indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){var minKey=idx.minKey();return minKey&&minKey.name;}else{return this.children_.minKey();}};/**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */ChildrenNode.prototype.getFirstChild=function(indexDefinition){var minKey=this.getFirstChildName(indexDefinition);if(minKey){return new NamedNode(minKey,this.children_.get(minKey));}else{return null;}};/**
     * Given an index, return the key name of the largest value we have, according to that index
     * @param {!Index} indexDefinition
     * @return {?string}
     */ChildrenNode.prototype.getLastChildName=function(indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){var maxKey=idx.maxKey();return maxKey&&maxKey.name;}else{return this.children_.maxKey();}};/**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */ChildrenNode.prototype.getLastChild=function(indexDefinition){var maxKey=this.getLastChildName(indexDefinition);if(maxKey){return new NamedNode(maxKey,this.children_.get(maxKey));}else{return null;}};/**
     * @inheritDoc
     */ChildrenNode.prototype.forEachChild=function(index,action){var idx=this.resolveIndex_(index);if(idx){return idx.inorderTraversal(function(wrappedNode){return action(wrappedNode.name,wrappedNode.node);});}else{return this.children_.inorderTraversal(action);}};/**
     * @param {!Index} indexDefinition
     * @return {SortedMapIterator}
     */ChildrenNode.prototype.getIterator=function(indexDefinition){return this.getIteratorFrom(indexDefinition.minPost(),indexDefinition);};/**
     *
     * @param {!NamedNode} startPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */ChildrenNode.prototype.getIteratorFrom=function(startPost,indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getIteratorFrom(startPost,function(key){return key;});}else{var iterator=this.children_.getIteratorFrom(startPost.name,NamedNode.Wrap);var next=iterator.peek();while(next!=null&&indexDefinition.compare(next,startPost)<0){iterator.getNext();next=iterator.peek();}return iterator;}};/**
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */ChildrenNode.prototype.getReverseIterator=function(indexDefinition){return this.getReverseIteratorFrom(indexDefinition.maxPost(),indexDefinition);};/**
     * @param {!NamedNode} endPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */ChildrenNode.prototype.getReverseIteratorFrom=function(endPost,indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getReverseIteratorFrom(endPost,function(key){return key;});}else{var iterator=this.children_.getReverseIteratorFrom(endPost.name,NamedNode.Wrap);var next=iterator.peek();while(next!=null&&indexDefinition.compare(next,endPost)>0){iterator.getNext();next=iterator.peek();}return iterator;}};/**
     * @inheritDoc
     */ChildrenNode.prototype.compareTo=function(other){if(this.isEmpty()){if(other.isEmpty()){return 0;}else{return-1;}}else if(other.isLeafNode()||other.isEmpty()){return 1;}else if(other===MAX_NODE$2){return-1;}else{// Must be another node with children.
return 0;}};/**
     * @inheritDoc
     */ChildrenNode.prototype.withIndex=function(indexDefinition){if(indexDefinition===KEY_INDEX||this.indexMap_.hasIndex(indexDefinition)){return this;}else{var newIndexMap=this.indexMap_.addIndex(indexDefinition,this.children_);return new ChildrenNode(this.children_,this.priorityNode_,newIndexMap);}};/**
     * @inheritDoc
     */ChildrenNode.prototype.isIndexed=function(index){return index===KEY_INDEX||this.indexMap_.hasIndex(index);};/**
     * @inheritDoc
     */ChildrenNode.prototype.equals=function(other){if(other===this){return true;}else if(other.isLeafNode()){return false;}else{var otherChildrenNode=other;if(!this.getPriority().equals(otherChildrenNode.getPriority())){return false;}else if(this.children_.count()===otherChildrenNode.children_.count()){var thisIter=this.getIterator(PRIORITY_INDEX);var otherIter=otherChildrenNode.getIterator(PRIORITY_INDEX);var thisCurrent=thisIter.getNext();var otherCurrent=otherIter.getNext();while(thisCurrent&&otherCurrent){if(thisCurrent.name!==otherCurrent.name||!thisCurrent.node.equals(otherCurrent.node)){return false;}thisCurrent=thisIter.getNext();otherCurrent=otherIter.getNext();}return thisCurrent===null&&otherCurrent===null;}else{return false;}}};/**
     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
     * instead.
     *
     * @private
     * @param {!Index} indexDefinition
     * @return {?SortedMap.<NamedNode, Node>}
     */ChildrenNode.prototype.resolveIndex_=function(indexDefinition){if(indexDefinition===KEY_INDEX){return null;}else{return this.indexMap_.get(indexDefinition.toString());}};/**
     * @private
     * @type {RegExp}
     */ChildrenNode.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/;return ChildrenNode;}();/**
 * @constructor
 * @extends {ChildrenNode}
 * @private
 */var MaxNode=/** @class */function(_super){(0,_tslib.__extends)(MaxNode,_super);function MaxNode(){return _super.call(this,new SortedMap(NAME_COMPARATOR),ChildrenNode.EMPTY_NODE,IndexMap.Default)||this;}MaxNode.prototype.compareTo=function(other){if(other===this){return 0;}else{return 1;}};MaxNode.prototype.equals=function(other){// Not that we every compare it, but MAX_NODE is only ever equal to itself
return other===this;};MaxNode.prototype.getPriority=function(){return this;};MaxNode.prototype.getImmediateChild=function(childName){return ChildrenNode.EMPTY_NODE;};MaxNode.prototype.isEmpty=function(){return false;};return MaxNode;}(ChildrenNode);/**
 * Marker that will sort higher than any other snapshot.
 * @type {!MAX_NODE}
 * @const
 */var MAX_NODE$2=new MaxNode();Object.defineProperties(NamedNode,{MIN:{value:new NamedNode(MIN_NAME,ChildrenNode.EMPTY_NODE)},MAX:{value:new NamedNode(MAX_NAME,MAX_NODE$2)}});/**
 * Reference Extensions
 */KeyIndex.__EMPTY_NODE=ChildrenNode.EMPTY_NODE;LeafNode.__childrenNodeConstructor=ChildrenNode;setMaxNode(MAX_NODE$2);setMaxNode$1(MAX_NODE$2);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var USE_HINZE=true;/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param {*} json JSON to create a node for.
 * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 * @return {!Node}
 */function nodeFromJSON$1(json,priority){if(priority===void 0){priority=null;}if(json===null){return ChildrenNode.EMPTY_NODE;}if(_typeof(json)==='object'&&'.priority'in json){priority=json['.priority'];}(0,_util.assert)(priority===null||typeof priority==='string'||typeof priority==='number'||_typeof(priority)==='object'&&'.sv'in priority,'Invalid priority type found: '+_typeof(priority));if(_typeof(json)==='object'&&'.value'in json&&json['.value']!==null){json=json['.value'];}// Valid leaf nodes include non-objects or server-value wrapper objects
if(_typeof(json)!=='object'||'.sv'in json){var jsonLeaf=json;return new LeafNode(jsonLeaf,nodeFromJSON$1(priority));}if(!(json instanceof Array)&&USE_HINZE){var children_1=[];var childrenHavePriority_1=false;var hinzeJsonObj=json;each(hinzeJsonObj,function(key,child){if(key.substring(0,1)!=='.'){// Ignore metadata nodes
var childNode=nodeFromJSON$1(child);if(!childNode.isEmpty()){childrenHavePriority_1=childrenHavePriority_1||!childNode.getPriority().isEmpty();children_1.push(new NamedNode(key,childNode));}}});if(children_1.length===0){return ChildrenNode.EMPTY_NODE;}var childSet=buildChildSet(children_1,NAME_ONLY_COMPARATOR,function(namedNode){return namedNode.name;},NAME_COMPARATOR);if(childrenHavePriority_1){var sortedChildSet=buildChildSet(children_1,PRIORITY_INDEX.getCompare());return new ChildrenNode(childSet,nodeFromJSON$1(priority),new IndexMap({'.priority':sortedChildSet},{'.priority':PRIORITY_INDEX}));}else{return new ChildrenNode(childSet,nodeFromJSON$1(priority),IndexMap.Default);}}else{var node_1=ChildrenNode.EMPTY_NODE;each(json,function(key,childData){if((0,_util.contains)(json,key)){if(key.substring(0,1)!=='.'){// ignore metadata nodes.
var childNode=nodeFromJSON$1(childData);if(childNode.isLeafNode()||!childNode.isEmpty()){node_1=node_1.updateImmediateChild(key,childNode);}}}});return node_1.updatePriority(nodeFromJSON$1(priority));}}setNodeFromJSON(nodeFromJSON$1);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 * @extends {Index}
 * @private
 */var ValueIndex=/** @class */function(_super){(0,_tslib.__extends)(ValueIndex,_super);function ValueIndex(){return _super!==null&&_super.apply(this,arguments)||this;}/**
     * @inheritDoc
     */ValueIndex.prototype.compare=function(a,b){var indexCmp=a.node.compareTo(b.node);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}};/**
     * @inheritDoc
     */ValueIndex.prototype.isDefinedOn=function(node){return true;};/**
     * @inheritDoc
     */ValueIndex.prototype.indexedValueChanged=function(oldNode,newNode){return!oldNode.equals(newNode);};/**
     * @inheritDoc
     */ValueIndex.prototype.minPost=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;};/**
     * @inheritDoc
     */ValueIndex.prototype.maxPost=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MAX;};/**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */ValueIndex.prototype.makePost=function(indexValue,name){var valueNode=nodeFromJSON$1(indexValue);return new NamedNode(name,valueNode);};/**
     * @return {!string} String representation for inclusion in a query spec
     */ValueIndex.prototype.toString=function(){return'.value';};return ValueIndex;}(Index);var VALUE_INDEX=new ValueIndex();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!Path} indexPath
 * @constructor
 * @extends {Index}
 */var PathIndex=/** @class */function(_super){(0,_tslib.__extends)(PathIndex,_super);function PathIndex(indexPath_){var _this=_super.call(this)||this;_this.indexPath_=indexPath_;(0,_util.assert)(!indexPath_.isEmpty()&&indexPath_.getFront()!=='.priority',"Can't create PathIndex with empty path or .priority key");return _this;}/**
     * @param {!Node} snap
     * @return {!Node}
     * @protected
     */PathIndex.prototype.extractChild=function(snap){return snap.getChild(this.indexPath_);};/**
     * @inheritDoc
     */PathIndex.prototype.isDefinedOn=function(node){return!node.getChild(this.indexPath_).isEmpty();};/**
     * @inheritDoc
     */PathIndex.prototype.compare=function(a,b){var aChild=this.extractChild(a.node);var bChild=this.extractChild(b.node);var indexCmp=aChild.compareTo(bChild);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}};/**
     * @inheritDoc
     */PathIndex.prototype.makePost=function(indexValue,name){var valueNode=nodeFromJSON$1(indexValue);var node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,valueNode);return new NamedNode(name,node);};/**
     * @inheritDoc
     */PathIndex.prototype.maxPost=function(){var node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,MAX_NODE$2);return new NamedNode(MAX_NAME,node);};/**
     * @inheritDoc
     */PathIndex.prototype.toString=function(){return this.indexPath_.slice().join('/');};return PathIndex;}(Index);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
 * surfaces the public methods (val, forEach, etc.) we want to expose.
 */var DataSnapshot=/** @class */function(){/**
     * @param {!Node} node_ A SnapshotNode to wrap.
     * @param {!Reference} ref_ The ref of the location this snapshot came from.
     * @param {!Index} index_ The iteration order for this snapshot
     */function DataSnapshot(node_,ref_,index_){this.node_=node_;this.ref_=ref_;this.index_=index_;}/**
     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
     * empty.
     *
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */DataSnapshot.prototype.val=function(){(0,_util.validateArgCount)('DataSnapshot.val',0,0,arguments.length);return this.node_.val();};/**
     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
     * the entire node contents.
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */DataSnapshot.prototype.exportVal=function(){(0,_util.validateArgCount)('DataSnapshot.exportVal',0,0,arguments.length);return this.node_.val(true);};// Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
// for end-users
DataSnapshot.prototype.toJSON=function(){// Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
(0,_util.validateArgCount)('DataSnapshot.toJSON',0,1,arguments.length);return this.exportVal();};/**
     * Returns whether the snapshot contains a non-null value.
     *
     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
     */DataSnapshot.prototype.exists=function(){(0,_util.validateArgCount)('DataSnapshot.exists',0,0,arguments.length);return!this.node_.isEmpty();};/**
     * Returns a DataSnapshot of the specified child node's contents.
     *
     * @param {!string} childPathString Path to a child.
     * @return {!DataSnapshot} DataSnapshot for child node.
     */DataSnapshot.prototype.child=function(childPathString){(0,_util.validateArgCount)('DataSnapshot.child',0,1,arguments.length);// Ensure the childPath is a string (can be a number)
childPathString=String(childPathString);validatePathString('DataSnapshot.child',1,childPathString,false);var childPath=new Path(childPathString);var childRef=this.ref_.child(childPath);return new DataSnapshot(this.node_.getChild(childPath),childRef,PRIORITY_INDEX);};/**
     * Returns whether the snapshot contains a child at the specified path.
     *
     * @param {!string} childPathString Path to a child.
     * @return {boolean} Whether the child exists.
     */DataSnapshot.prototype.hasChild=function(childPathString){(0,_util.validateArgCount)('DataSnapshot.hasChild',1,1,arguments.length);validatePathString('DataSnapshot.hasChild',1,childPathString,false);var childPath=new Path(childPathString);return!this.node_.getChild(childPath).isEmpty();};/**
     * Returns the priority of the object, or null if no priority was set.
     *
     * @return {string|number|null} The priority.
     */DataSnapshot.prototype.getPriority=function(){(0,_util.validateArgCount)('DataSnapshot.getPriority',0,0,arguments.length);// typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
return this.node_.getPriority().val();};/**
     * Iterates through child nodes and calls the specified action for each one.
     *
     * @param {function(!DataSnapshot)} action Callback function to be called
     * for each child.
     * @return {boolean} True if forEach was canceled by action returning true for
     * one of the child nodes.
     */DataSnapshot.prototype.forEach=function(action){var _this=this;(0,_util.validateArgCount)('DataSnapshot.forEach',1,1,arguments.length);(0,_util.validateCallback)('DataSnapshot.forEach',1,action,false);if(this.node_.isLeafNode()){return false;}var childrenNode=this.node_;// Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
return!!childrenNode.forEachChild(this.index_,function(key,node){return action(new DataSnapshot(node,_this.ref_.child(key),PRIORITY_INDEX));});};/**
     * Returns whether this DataSnapshot has children.
     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
     */DataSnapshot.prototype.hasChildren=function(){(0,_util.validateArgCount)('DataSnapshot.hasChildren',0,0,arguments.length);if(this.node_.isLeafNode()){return false;}else{return!this.node_.isEmpty();}};Object.defineProperty(DataSnapshot.prototype,"key",{get:function get(){return this.ref_.getKey();},enumerable:false,configurable:true});/**
     * Returns the number of children for this DataSnapshot.
     * @return {number} The number of children that this DataSnapshot contains.
     */DataSnapshot.prototype.numChildren=function(){(0,_util.validateArgCount)('DataSnapshot.numChildren',0,0,arguments.length);return this.node_.numChildren();};/**
     * @return {Reference} The Firebase reference for the location this snapshot's data came from.
     */DataSnapshot.prototype.getRef=function(){(0,_util.validateArgCount)('DataSnapshot.ref',0,0,arguments.length);return this.ref_;};Object.defineProperty(DataSnapshot.prototype,"ref",{get:function get(){return this.getRef();},enumerable:false,configurable:true});return DataSnapshot;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encapsulates the data needed to raise an event
 * @implements {Event}
 */exports.DataSnapshot=DataSnapshot;var DataEvent=/** @class */function(){/**
     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
     * @param {!DataSnapshot} snapshot The data backing the event
     * @param {?string=} prevName Optional, the name of the previous child for child_* events.
     */function DataEvent(eventType,eventRegistration,snapshot,prevName){this.eventType=eventType;this.eventRegistration=eventRegistration;this.snapshot=snapshot;this.prevName=prevName;}/**
     * @inheritDoc
     */DataEvent.prototype.getPath=function(){var ref=this.snapshot.getRef();if(this.eventType==='value'){return ref.path;}else{return ref.getParent().path;}};/**
     * @inheritDoc
     */DataEvent.prototype.getEventType=function(){return this.eventType;};/**
     * @inheritDoc
     */DataEvent.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this);};/**
     * @inheritDoc
     */DataEvent.prototype.toString=function(){return this.getPath().toString()+':'+this.eventType+':'+(0,_util.stringify)(this.snapshot.exportVal());};return DataEvent;}();var CancelEvent=/** @class */function(){/**
     * @param {EventRegistration} eventRegistration
     * @param {Error} error
     * @param {!Path} path
     */function CancelEvent(eventRegistration,error,path){this.eventRegistration=eventRegistration;this.error=error;this.path=path;}/**
     * @inheritDoc
     */CancelEvent.prototype.getPath=function(){return this.path;};/**
     * @inheritDoc
     */CancelEvent.prototype.getEventType=function(){return'cancel';};/**
     * @inheritDoc
     */CancelEvent.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this);};/**
     * @inheritDoc
     */CancelEvent.prototype.toString=function(){return this.path.toString()+':cancel';};return CancelEvent;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents registration for 'value' events.
 */var ValueEventRegistration=/** @class */function(){/**
     * @param {?function(!DataSnapshot)} callback_
     * @param {?function(Error)} cancelCallback_
     * @param {?Object} context_
     */function ValueEventRegistration(callback_,cancelCallback_,context_){this.callback_=callback_;this.cancelCallback_=cancelCallback_;this.context_=context_;}/**
     * @inheritDoc
     */ValueEventRegistration.prototype.respondsTo=function(eventType){return eventType==='value';};/**
     * @inheritDoc
     */ValueEventRegistration.prototype.createEvent=function(change,query){var index=query.getQueryParams().getIndex();return new DataEvent('value',this,new DataSnapshot(change.snapshotNode,query.getRef(),index));};/**
     * @inheritDoc
     */ValueEventRegistration.prototype.getEventRunner=function(eventData){var ctx=this.context_;if(eventData.getEventType()==='cancel'){(0,_util.assert)(this.cancelCallback_,'Raising a cancel event on a listener with no cancel callback');var cancelCB_1=this.cancelCallback_;return function(){// We know that error exists, we checked above that this is a cancel event
cancelCB_1.call(ctx,eventData.error);};}else{var cb_1=this.callback_;return function(){cb_1.call(ctx,eventData.snapshot);};}};/**
     * @inheritDoc
     */ValueEventRegistration.prototype.createCancelEvent=function(error,path){if(this.cancelCallback_){return new CancelEvent(this,error,path);}else{return null;}};/**
     * @inheritDoc
     */ValueEventRegistration.prototype.matches=function(other){if(!(other instanceof ValueEventRegistration)){return false;}else if(!other.callback_||!this.callback_){// If no callback specified, we consider it to match any callback.
return true;}else{return other.callback_===this.callback_&&other.context_===this.context_;}};/**
     * @inheritDoc
     */ValueEventRegistration.prototype.hasAnyCallback=function(){return this.callback_!==null;};return ValueEventRegistration;}();/**
 * Represents the registration of 1 or more child_xxx events.
 *
 * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
 * register a group of callbacks together in the future.
 *
 * @constructor
 * @implements {EventRegistration}
 */var ChildEventRegistration=/** @class */function(){/**
     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
     * @param {?function(Error)} cancelCallback_
     * @param {Object=} context_
     */function ChildEventRegistration(callbacks_,cancelCallback_,context_){this.callbacks_=callbacks_;this.cancelCallback_=cancelCallback_;this.context_=context_;}/**
     * @inheritDoc
     */ChildEventRegistration.prototype.respondsTo=function(eventType){var eventToCheck=eventType==='children_added'?'child_added':eventType;eventToCheck=eventToCheck==='children_removed'?'child_removed':eventToCheck;return(0,_util.contains)(this.callbacks_,eventToCheck);};/**
     * @inheritDoc
     */ChildEventRegistration.prototype.createCancelEvent=function(error,path){if(this.cancelCallback_){return new CancelEvent(this,error,path);}else{return null;}};/**
     * @inheritDoc
     */ChildEventRegistration.prototype.createEvent=function(change,query){(0,_util.assert)(change.childName!=null,'Child events should have a childName.');var ref=query.getRef().child(/** @type {!string} */change.childName);var index=query.getQueryParams().getIndex();return new DataEvent(change.type,this,new DataSnapshot(change.snapshotNode,ref,index),change.prevName);};/**
     * @inheritDoc
     */ChildEventRegistration.prototype.getEventRunner=function(eventData){var ctx=this.context_;if(eventData.getEventType()==='cancel'){(0,_util.assert)(this.cancelCallback_,'Raising a cancel event on a listener with no cancel callback');var cancelCB_2=this.cancelCallback_;return function(){// We know that error exists, we checked above that this is a cancel event
cancelCB_2.call(ctx,eventData.error);};}else{var cb_2=this.callbacks_[eventData.eventType];return function(){cb_2.call(ctx,eventData.snapshot,eventData.prevName);};}};/**
     * @inheritDoc
     */ChildEventRegistration.prototype.matches=function(other){var _this=this;if(other instanceof ChildEventRegistration){if(!this.callbacks_||!other.callbacks_){return true;}else if(this.context_===other.context_){var otherKeys=Object.keys(other.callbacks_);var thisKeys=Object.keys(this.callbacks_);var otherCount=otherKeys.length;var thisCount=thisKeys.length;if(otherCount===thisCount){// If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
// If event types don't match, not a match
// If count is not 1, exact match across all
if(otherCount===1){var otherKey=otherKeys[0];var thisKey=thisKeys[0];return thisKey===otherKey&&(!other.callbacks_[otherKey]||!this.callbacks_[thisKey]||other.callbacks_[otherKey]===this.callbacks_[thisKey]);}else{// Exact match on each key.
return thisKeys.every(function(eventType){return other.callbacks_[eventType]===_this.callbacks_[eventType];});}}}}return false;};/**
     * @inheritDoc
     */ChildEventRegistration.prototype.hasAnyCallback=function(){return this.callbacks_!==null;};return ChildEventRegistration;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __referenceConstructor;/**
 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
 *
 * Since every Firebase reference is a query, Firebase inherits from this object.
 */var Query=/** @class */function(){function Query(repo,path,queryParams_,orderByCalled_){this.repo=repo;this.path=path;this.queryParams_=queryParams_;this.orderByCalled_=orderByCalled_;}Object.defineProperty(Query,"__referenceConstructor",{get:function get(){(0,_util.assert)(__referenceConstructor,'Reference.ts has not been loaded');return __referenceConstructor;},set:function set(val){__referenceConstructor=val;},enumerable:false,configurable:true});/**
     * Validates start/end values for queries.
     * @param {!QueryParams} params
     * @private
     */Query.validateQueryEndpoints_=function(params){var startNode=null;var endNode=null;if(params.hasStart()){startNode=params.getIndexStartValue();}if(params.hasEnd()){endNode=params.getIndexEndValue();}if(params.getIndex()===KEY_INDEX){var tooManyArgsError='Query: When ordering by key, you may only pass one argument to '+'startAt(), endAt(), or equalTo().';var wrongArgTypeError='Query: When ordering by key, the argument passed to startAt(), endAt(),'+'or equalTo() must be a string.';if(params.hasStart()){var startName=params.getIndexStartName();if(startName!==MIN_NAME){throw new Error(tooManyArgsError);}else if(typeof startNode!=='string'){throw new Error(wrongArgTypeError);}}if(params.hasEnd()){var endName=params.getIndexEndName();if(endName!==MAX_NAME){throw new Error(tooManyArgsError);}else if(typeof endNode!=='string'){throw new Error(wrongArgTypeError);}}}else if(params.getIndex()===PRIORITY_INDEX){if(startNode!=null&&!isValidPriority(startNode)||endNode!=null&&!isValidPriority(endNode)){throw new Error('Query: When ordering by priority, the first argument passed to startAt(), '+'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');}}else{(0,_util.assert)(params.getIndex()instanceof PathIndex||params.getIndex()===VALUE_INDEX,'unknown index type.');if(startNode!=null&&_typeof(startNode)==='object'||endNode!=null&&_typeof(endNode)==='object'){throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be '+'an object.');}}};/**
     * Validates that limit* has been called with the correct combination of parameters
     * @param {!QueryParams} params
     * @private
     */Query.validateLimit_=function(params){if(params.hasStart()&&params.hasEnd()&&params.hasLimit()&&!params.hasAnchoredLimit()){throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");}};/**
     * Validates that no other order by call has been made
     * @param {!string} fnName
     * @private
     */Query.prototype.validateNoPreviousOrderByCall_=function(fnName){if(this.orderByCalled_===true){throw new Error(fnName+": You can't combine multiple orderBy calls.");}};/**
     * @return {!QueryParams}
     */Query.prototype.getQueryParams=function(){return this.queryParams_;};/**
     * @return {!Reference}
     */Query.prototype.getRef=function(){(0,_util.validateArgCount)('Query.ref',0,0,arguments.length);// This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
// However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
// method gets called.
return new Query.__referenceConstructor(this.repo,this.path);};/**
     * @param {!string} eventType
     * @param {!function(DataSnapshot, string=)} callback
     * @param {(function(Error)|Object)=} cancelCallbackOrContext
     * @param {Object=} context
     * @return {!function(DataSnapshot, string=)}
     */Query.prototype.on=function(eventType,callback,cancelCallbackOrContext,context){(0,_util.validateArgCount)('Query.on',2,4,arguments.length);validateEventType('Query.on',1,eventType,false);(0,_util.validateCallback)('Query.on',2,callback,false);var ret=Query.getCancelAndContextArgs_('Query.on',cancelCallbackOrContext,context);if(eventType==='value'){this.onValueEvent(callback,ret.cancel,ret.context);}else{var callbacks={};callbacks[eventType]=callback;this.onChildEvent(callbacks,ret.cancel,ret.context);}return callback;};/**
     * @param {!function(!DataSnapshot)} callback
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */Query.prototype.onValueEvent=function(callback,cancelCallback,context){var container=new ValueEventRegistration(callback,cancelCallback||null,context||null);this.repo.addEventCallbackForQuery(this,container);};/**
     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */Query.prototype.onChildEvent=function(callbacks,cancelCallback,context){var container=new ChildEventRegistration(callbacks,cancelCallback,context);this.repo.addEventCallbackForQuery(this,container);};/**
     * @param {string=} eventType
     * @param {(function(!DataSnapshot, ?string=))=} callback
     * @param {Object=} context
     */Query.prototype.off=function(eventType,callback,context){(0,_util.validateArgCount)('Query.off',0,3,arguments.length);validateEventType('Query.off',1,eventType,true);(0,_util.validateCallback)('Query.off',2,callback,true);(0,_util.validateContextObject)('Query.off',3,context,true);var container=null;var callbacks=null;if(eventType==='value'){var valueCallback=callback||null;container=new ValueEventRegistration(valueCallback,null,context||null);}else if(eventType){if(callback){callbacks={};callbacks[eventType]=callback;}container=new ChildEventRegistration(callbacks,null,context||null);}this.repo.removeEventCallbackForQuery(this,container);};/**
     * Get the server-value for this query, or return a cached value if not connected.
     */Query.prototype.get=function(){return this.repo.getValue(this);};/**
     * Attaches a listener, waits for the first event, and then removes the listener
     * @param {!string} eventType
     * @param {!function(!DataSnapshot, string=)} userCallback
     * @param failureCallbackOrContext
     * @param context
     * @return {!firebase.Promise}
     */Query.prototype.once=function(eventType,userCallback,failureCallbackOrContext,context){var _this=this;(0,_util.validateArgCount)('Query.once',1,4,arguments.length);validateEventType('Query.once',1,eventType,false);(0,_util.validateCallback)('Query.once',2,userCallback,true);var ret=Query.getCancelAndContextArgs_('Query.once',failureCallbackOrContext,context);// TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
// TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
// because the API currently expects callbacks will be called synchronously if the data is cached, but this is
// against the Promise specification.
var firstCall=true;var deferred=new _util.Deferred();// A dummy error handler in case a user wasn't expecting promises
deferred.promise["catch"](function(){});var onceCallback=function onceCallback(snapshot){// NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
// triggers multiple events (e.g. child_added or child_changed).
if(firstCall){firstCall=false;_this.off(eventType,onceCallback);if(userCallback){userCallback.bind(ret.context)(snapshot);}deferred.resolve(snapshot);}};this.on(eventType,onceCallback,/*cancel=*/function(err){_this.off(eventType,onceCallback);if(ret.cancel){ret.cancel.bind(ret.context)(err);}deferred.reject(err);});return deferred.promise;};/**
     * Set a limit and anchor it to the start of the window.
     * @param {!number} limit
     * @return {!Query}
     */Query.prototype.limitToFirst=function(limit){(0,_util.validateArgCount)('Query.limitToFirst',1,1,arguments.length);if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('Query.limitToFirst: First argument must be a positive integer.');}if(this.queryParams_.hasLimit()){throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, '+'limitToFirst, or limitToLast).');}return new Query(this.repo,this.path,this.queryParams_.limitToFirst(limit),this.orderByCalled_);};/**
     * Set a limit and anchor it to the end of the window.
     * @param {!number} limit
     * @return {!Query}
     */Query.prototype.limitToLast=function(limit){(0,_util.validateArgCount)('Query.limitToLast',1,1,arguments.length);if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('Query.limitToLast: First argument must be a positive integer.');}if(this.queryParams_.hasLimit()){throw new Error('Query.limitToLast: Limit was already set (by another call to limit, '+'limitToFirst, or limitToLast).');}return new Query(this.repo,this.path,this.queryParams_.limitToLast(limit),this.orderByCalled_);};/**
     * Given a child path, return a new query ordered by the specified grandchild path.
     * @param {!string} path
     * @return {!Query}
     */Query.prototype.orderByChild=function(path){(0,_util.validateArgCount)('Query.orderByChild',1,1,arguments.length);if(path==='$key'){throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');}else if(path==='$priority'){throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');}else if(path==='$value'){throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');}validatePathString('Query.orderByChild',1,path,false);this.validateNoPreviousOrderByCall_('Query.orderByChild');var parsedPath=new Path(path);if(parsedPath.isEmpty()){throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');}var index=new PathIndex(parsedPath);var newParams=this.queryParams_.orderBy(index);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);};/**
     * Return a new query ordered by the KeyIndex
     * @return {!Query}
     */Query.prototype.orderByKey=function(){(0,_util.validateArgCount)('Query.orderByKey',0,0,arguments.length);this.validateNoPreviousOrderByCall_('Query.orderByKey');var newParams=this.queryParams_.orderBy(KEY_INDEX);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);};/**
     * Return a new query ordered by the PriorityIndex
     * @return {!Query}
     */Query.prototype.orderByPriority=function(){(0,_util.validateArgCount)('Query.orderByPriority',0,0,arguments.length);this.validateNoPreviousOrderByCall_('Query.orderByPriority');var newParams=this.queryParams_.orderBy(PRIORITY_INDEX);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);};/**
     * Return a new query ordered by the ValueIndex
     * @return {!Query}
     */Query.prototype.orderByValue=function(){(0,_util.validateArgCount)('Query.orderByValue',0,0,arguments.length);this.validateNoPreviousOrderByCall_('Query.orderByValue');var newParams=this.queryParams_.orderBy(VALUE_INDEX);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);};/**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */Query.prototype.startAt=function(value,name){if(value===void 0){value=null;}(0,_util.validateArgCount)('Query.startAt',0,2,arguments.length);validateFirebaseDataArg('Query.startAt',1,value,this.path,true);validateKey('Query.startAt',2,name,true);var newParams=this.queryParams_.startAt(value,name);Query.validateLimit_(newParams);Query.validateQueryEndpoints_(newParams);if(this.queryParams_.hasStart()){throw new Error('Query.startAt: Starting point was already set (by another call to startAt '+'or equalTo).');}// Calling with no params tells us to start at the beginning.
if(value===undefined){value=null;name=null;}return new Query(this.repo,this.path,newParams,this.orderByCalled_);};/**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */Query.prototype.endAt=function(value,name){if(value===void 0){value=null;}(0,_util.validateArgCount)('Query.endAt',0,2,arguments.length);validateFirebaseDataArg('Query.endAt',1,value,this.path,true);validateKey('Query.endAt',2,name,true);var newParams=this.queryParams_.endAt(value,name);Query.validateLimit_(newParams);Query.validateQueryEndpoints_(newParams);if(this.queryParams_.hasEnd()){throw new Error('Query.endAt: Ending point was already set (by another call to endAt or '+'equalTo).');}return new Query(this.repo,this.path,newParams,this.orderByCalled_);};/**
     * Load the selection of children with exactly the specified value, and, optionally,
     * the specified name.
     * @param {number|string|boolean|null} value
     * @param {string=} name
     * @return {!Query}
     */Query.prototype.equalTo=function(value,name){(0,_util.validateArgCount)('Query.equalTo',1,2,arguments.length);validateFirebaseDataArg('Query.equalTo',1,value,this.path,false);validateKey('Query.equalTo',2,name,true);if(this.queryParams_.hasStart()){throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or '+'equalTo).');}if(this.queryParams_.hasEnd()){throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or '+'equalTo).');}return this.startAt(value,name).endAt(value,name);};/**
     * @return {!string} URL for this location.
     */Query.prototype.toString=function(){(0,_util.validateArgCount)('Query.toString',0,0,arguments.length);return this.repo.toString()+this.path.toUrlEncodedString();};// Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
// for end-users.
Query.prototype.toJSON=function(){// An optional spacer argument is unnecessary for a string.
(0,_util.validateArgCount)('Query.toJSON',0,1,arguments.length);return this.toString();};/**
     * An object representation of the query parameters used by this Query.
     * @return {!Object}
     */Query.prototype.queryObject=function(){return this.queryParams_.getQueryObject();};/**
     * @return {!string}
     */Query.prototype.queryIdentifier=function(){var obj=this.queryObject();var id=ObjectToUniqueKey(obj);return id==='{}'?'default':id;};/**
     * Return true if this query and the provided query are equivalent; otherwise, return false.
     * @param {Query} other
     * @return {boolean}
     */Query.prototype.isEqual=function(other){(0,_util.validateArgCount)('Query.isEqual',1,1,arguments.length);if(!(other instanceof Query)){var error='Query.isEqual failed: First argument must be an instance of firebase.database.Query.';throw new Error(error);}var sameRepo=this.repo===other.repo;var samePath=this.path.equals(other.path);var sameQueryIdentifier=this.queryIdentifier()===other.queryIdentifier();return sameRepo&&samePath&&sameQueryIdentifier;};/**
     * Helper used by .on and .once to extract the context and or cancel arguments.
     * @param {!string} fnName The function name (on or once)
     * @param {(function(Error)|Object)=} cancelOrContext
     * @param {Object=} context
     * @return {{cancel: ?function(Error), context: ?Object}}
     * @private
     */Query.getCancelAndContextArgs_=function(fnName,cancelOrContext,context){var ret={cancel:null,context:null};if(cancelOrContext&&context){ret.cancel=cancelOrContext;(0,_util.validateCallback)(fnName,3,ret.cancel,true);ret.context=context;(0,_util.validateContextObject)(fnName,4,ret.context,true);}else if(cancelOrContext){// we have either a cancel callback or a context.
if(_typeof(cancelOrContext)==='object'&&cancelOrContext!==null){// it's a context!
ret.context=cancelOrContext;}else if(typeof cancelOrContext==='function'){ret.cancel=cancelOrContext;}else{throw new Error((0,_util.errorPrefix)(fnName,3,true)+' must either be a cancel callback or a context object.');}}return ret;};Object.defineProperty(Query.prototype,"ref",{get:function get(){return this.getRef();},enumerable:false,configurable:true});return Query;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */exports.Query=Query;var ExistingValueProvider=/** @class */function(){function ExistingValueProvider(node_){this.node_=node_;}ExistingValueProvider.prototype.getImmediateChild=function(childName){var child=this.node_.getImmediateChild(childName);return new ExistingValueProvider(child);};ExistingValueProvider.prototype.node=function(){return this.node_;};return ExistingValueProvider;}();var DeferredValueProvider=/** @class */function(){function DeferredValueProvider(syncTree,path){this.syncTree_=syncTree;this.path_=path;}DeferredValueProvider.prototype.getImmediateChild=function(childName){var childPath=this.path_.child(childName);return new DeferredValueProvider(this.syncTree_,childPath);};DeferredValueProvider.prototype.node=function(){return this.syncTree_.calcCompleteEventCache(this.path_);};return DeferredValueProvider;}();/**
 * Generate placeholders for deferred values.
 * @param {?Object} values
 * @return {!Object}
 */var generateWithValues=function generateWithValues(values){values=values||{};values['timestamp']=values['timestamp']||new Date().getTime();return values;};/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 * @param {(Object|string|number|boolean)} value
 * @param {!Object} serverValues
 * @return {!(string|number|boolean)}
 */var resolveDeferredLeafValue=function resolveDeferredLeafValue(value,existingVal,serverValues){if(!value||_typeof(value)!=='object'){return value;}(0,_util.assert)('.sv'in value,'Unexpected leaf node or priority contents');if(typeof value['.sv']==='string'){return resolveScalarDeferredValue(value['.sv'],existingVal,serverValues);}else if(_typeof(value['.sv'])==='object'){return resolveComplexDeferredValue(value['.sv'],existingVal);}else{(0,_util.assert)(false,'Unexpected server value: '+JSON.stringify(value,null,2));}};var resolveScalarDeferredValue=function resolveScalarDeferredValue(op,existing,serverValues){switch(op){case'timestamp':return serverValues['timestamp'];default:(0,_util.assert)(false,'Unexpected server value: '+op);}};var resolveComplexDeferredValue=function resolveComplexDeferredValue(op,existing,unused){if(!op.hasOwnProperty('increment')){(0,_util.assert)(false,'Unexpected server value: '+JSON.stringify(op,null,2));}var delta=op['increment'];if(typeof delta!=='number'){(0,_util.assert)(false,'Unexpected increment value: '+delta);}var existingNode=existing.node();(0,_util.assert)(existingNode!==null&&typeof existingNode!=='undefined','Expected ChildrenNode.EMPTY_NODE for nulls');// Incrementing a non-number sets the value to the incremented amount
if(!existingNode.isLeafNode()){return delta;}var leaf=existingNode;var existingVal=leaf.getValue();if(typeof existingVal!=='number'){return delta;}// No need to do over/underflow arithmetic here because JS only handles floats under the covers
return existingVal+delta;};/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param {!Path} path path to which write is relative
 * @param {!Node} node new data written at path
 * @param {!SyncTree} syncTree current data
 * @param {!Object} serverValues
 * @return {!SparseSnapshotTree}
 */var resolveDeferredValueTree=function resolveDeferredValueTree(path,node,syncTree,serverValues){return resolveDeferredValue(node,new DeferredValueProvider(syncTree,path),serverValues);};/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 * @param {!Node} node
 * @param {!Object} serverValues
 * @return {!Node}
 */var resolveDeferredValueSnapshot=function resolveDeferredValueSnapshot(node,existing,serverValues){return resolveDeferredValue(node,new ExistingValueProvider(existing),serverValues);};function resolveDeferredValue(node,existingVal,serverValues){var rawPri=node.getPriority().val();var priority=resolveDeferredLeafValue(rawPri,existingVal.getImmediateChild('.priority'),serverValues);var newNode;if(node.isLeafNode()){var leafNode=node;var value=resolveDeferredLeafValue(leafNode.getValue(),existingVal,serverValues);if(value!==leafNode.getValue()||priority!==leafNode.getPriority().val()){return new LeafNode(value,nodeFromJSON$1(priority));}else{return node;}}else{var childrenNode=node;newNode=childrenNode;if(priority!==childrenNode.getPriority().val()){newNode=newNode.updatePriority(new LeafNode(priority));}childrenNode.forEachChild(PRIORITY_INDEX,function(childName,childNode){var newChildNode=resolveDeferredValue(childNode,existingVal.getImmediateChild(childName),serverValues);if(newChildNode!==childNode){newNode=newNode.updateImmediateChild(childName,newChildNode);}});return newNode;}}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper class to store a sparse set of snapshots.
 */var SparseSnapshotTree=/** @class */function(){function SparseSnapshotTree(){this.value=null;this.children=new Map();}/**
     * Gets the node stored at the given path if one exists.
     *
     * @param path Path to look up snapshot for.
     * @return The retrieved node, or null.
     */SparseSnapshotTree.prototype.find=function(path){if(this.value!=null){return this.value.getChild(path);}else if(!path.isEmpty()&&this.children.size>0){var childKey=path.getFront();path=path.popFront();if(this.children.has(childKey)){var childTree=this.children.get(childKey);return childTree.find(path);}else{return null;}}else{return null;}};/**
     * Stores the given node at the specified path. If there is already a node
     * at a shallower path, it merges the new data into that snapshot node.
     *
     * @param path Path to look up snapshot for.
     * @param data The new data, or null.
     */SparseSnapshotTree.prototype.remember=function(path,data){if(path.isEmpty()){this.value=data;this.children.clear();}else if(this.value!==null){this.value=this.value.updateChild(path,data);}else{var childKey=path.getFront();if(!this.children.has(childKey)){this.children.set(childKey,new SparseSnapshotTree());}var child=this.children.get(childKey);path=path.popFront();child.remember(path,data);}};/**
     * Purge the data at path from the cache.
     *
     * @param path Path to look up snapshot for.
     * @return True if this node should now be removed.
     */SparseSnapshotTree.prototype.forget=function(path){if(path.isEmpty()){this.value=null;this.children.clear();return true;}else{if(this.value!==null){if(this.value.isLeafNode()){// We're trying to forget a node that doesn't exist
return false;}else{var value=this.value;this.value=null;var self_1=this;value.forEachChild(PRIORITY_INDEX,function(key,tree){self_1.remember(new Path(key),tree);});return this.forget(path);}}else if(this.children.size>0){var childKey=path.getFront();path=path.popFront();if(this.children.has(childKey)){var safeToRemove=this.children.get(childKey).forget(path);if(safeToRemove){this.children["delete"](childKey);}}return this.children.size===0;}else{return true;}}};/**
     * Recursively iterates through all of the stored tree and calls the
     * callback on each one.
     *
     * @param prefixPath Path to look up node for.
     * @param func The function to invoke for each tree.
     */SparseSnapshotTree.prototype.forEachTree=function(prefixPath,func){if(this.value!==null){func(prefixPath,this.value);}else{this.forEachChild(function(key,tree){var path=new Path(prefixPath.toString()+'/'+key);tree.forEachTree(path,func);});}};/**
     * Iterates through each immediate child and triggers the callback.
     *
     * @param func The function to invoke for each child.
     */SparseSnapshotTree.prototype.forEachChild=function(func){this.children.forEach(function(tree,key){func(key,tree);});};return SparseSnapshotTree;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @enum
 */var OperationType;(function(OperationType){OperationType[OperationType["OVERWRITE"]=0]="OVERWRITE";OperationType[OperationType["MERGE"]=1]="MERGE";OperationType[OperationType["ACK_USER_WRITE"]=2]="ACK_USER_WRITE";OperationType[OperationType["LISTEN_COMPLETE"]=3]="LISTEN_COMPLETE";})(OperationType||(OperationType={}));/**
 * @param {boolean} fromUser
 * @param {boolean} fromServer
 * @param {?string} queryId
 * @param {boolean} tagged
 * @constructor
 */var OperationSource=/** @class */function(){function OperationSource(fromUser,fromServer,queryId,tagged){this.fromUser=fromUser;this.fromServer=fromServer;this.queryId=queryId;this.tagged=tagged;(0,_util.assert)(!tagged||fromServer,'Tagged queries must be from server.');}/**
     * @const
     * @type {!OperationSource}
     */OperationSource.User=new OperationSource(/*fromUser=*/true,false,null,/*tagged=*/false);/**
     * @const
     * @type {!OperationSource}
     */OperationSource.Server=new OperationSource(false,/*fromServer=*/true,null,/*tagged=*/false);/**
     * @param {string} queryId
     * @return {!OperationSource}
     */OperationSource.forServerTaggedQuery=function(queryId){return new OperationSource(false,/*fromServer=*/true,queryId,/*tagged=*/true);};return OperationSource;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var AckUserWrite=/** @class */function(){/**
     *
     * @param {!Path} path
     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
     * @param {!boolean} revert
     */function AckUserWrite(/** @inheritDoc */path,/** @inheritDoc */affectedTree,/** @inheritDoc */revert){this.path=path;this.affectedTree=affectedTree;this.revert=revert;/** @inheritDoc */this.type=OperationType.ACK_USER_WRITE;/** @inheritDoc */this.source=OperationSource.User;}/**
     * @inheritDoc
     */AckUserWrite.prototype.operationForChild=function(childName){if(!this.path.isEmpty()){(0,_util.assert)(this.path.getFront()===childName,'operationForChild called for unrelated child.');return new AckUserWrite(this.path.popFront(),this.affectedTree,this.revert);}else if(this.affectedTree.value!=null){(0,_util.assert)(this.affectedTree.children.isEmpty(),'affectedTree should not have overlapping affected paths.');// All child locations are affected as well; just return same operation.
return this;}else{var childTree=this.affectedTree.subtree(new Path(childName));return new AckUserWrite(Path.Empty,childTree,this.revert);}};return AckUserWrite;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var emptyChildrenSingleton;/**
 * Singleton empty children collection.
 *
 * @const
 * @type {!SortedMap.<string, !ImmutableTree.<?>>}
 */var EmptyChildren=function EmptyChildren(){if(!emptyChildrenSingleton){emptyChildrenSingleton=new SortedMap(stringCompare);}return emptyChildrenSingleton;};/**
 * A tree with immutable elements.
 */var ImmutableTree=/** @class */function(){/**
     * @template T
     * @param {?T} value
     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
     */function ImmutableTree(value,children){if(children===void 0){children=EmptyChildren();}this.value=value;this.children=children;}/**
     * @template T
     * @param {!Object.<string, !T>} obj
     * @return {!ImmutableTree.<!T>}
     */ImmutableTree.fromObject=function(obj){var tree=ImmutableTree.Empty;each(obj,function(childPath,childSnap){tree=tree.set(new Path(childPath),childSnap);});return tree;};/**
     * True if the value is empty and there are no children
     * @return {boolean}
     */ImmutableTree.prototype.isEmpty=function(){return this.value===null&&this.children.isEmpty();};/**
     * Given a path and predicate, return the first node and the path to that node
     * where the predicate returns true.
     *
     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
     * on the way back out, it may be better to pass down a pathSoFar obj.
     *
     * @param {!Path} relativePath The remainder of the path
     * @param {function(T):boolean} predicate The predicate to satisfy to return a
     *   node
     * @return {?{path:!Path, value:!T}}
     */ImmutableTree.prototype.findRootMostMatchingPathAndValue=function(relativePath,predicate){if(this.value!=null&&predicate(this.value)){return{path:Path.Empty,value:this.value};}else{if(relativePath.isEmpty()){return null;}else{var front=relativePath.getFront();var child=this.children.get(front);if(child!==null){var childExistingPathAndValue=child.findRootMostMatchingPathAndValue(relativePath.popFront(),predicate);if(childExistingPathAndValue!=null){var fullPath=new Path(front).child(childExistingPathAndValue.path);return{path:fullPath,value:childExistingPathAndValue.value};}else{return null;}}else{return null;}}}};/**
     * Find, if it exists, the shortest subpath of the given path that points a defined
     * value in the tree
     * @param {!Path} relativePath
     * @return {?{path: !Path, value: !T}}
     */ImmutableTree.prototype.findRootMostValueAndPath=function(relativePath){return this.findRootMostMatchingPathAndValue(relativePath,function(){return true;});};/**
     * @param {!Path} relativePath
     * @return {!ImmutableTree.<T>} The subtree at the given path
     */ImmutableTree.prototype.subtree=function(relativePath){if(relativePath.isEmpty()){return this;}else{var front=relativePath.getFront();var childTree=this.children.get(front);if(childTree!==null){return childTree.subtree(relativePath.popFront());}else{return ImmutableTree.Empty;}}};/**
     * Sets a value at the specified path.
     *
     * @param {!Path} relativePath Path to set value at.
     * @param {?T} toSet Value to set.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */ImmutableTree.prototype.set=function(relativePath,toSet){if(relativePath.isEmpty()){return new ImmutableTree(toSet,this.children);}else{var front=relativePath.getFront();var child=this.children.get(front)||ImmutableTree.Empty;var newChild=child.set(relativePath.popFront(),toSet);var newChildren=this.children.insert(front,newChild);return new ImmutableTree(this.value,newChildren);}};/**
     * Removes the value at the specified path.
     *
     * @param {!Path} relativePath Path to value to remove.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */ImmutableTree.prototype.remove=function(relativePath){if(relativePath.isEmpty()){if(this.children.isEmpty()){return ImmutableTree.Empty;}else{return new ImmutableTree(null,this.children);}}else{var front=relativePath.getFront();var child=this.children.get(front);if(child){var newChild=child.remove(relativePath.popFront());var newChildren=void 0;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}if(this.value===null&&newChildren.isEmpty()){return ImmutableTree.Empty;}else{return new ImmutableTree(this.value,newChildren);}}else{return this;}}};/**
     * Gets a value from the tree.
     *
     * @param {!Path} relativePath Path to get value for.
     * @return {?T} Value at path, or null.
     */ImmutableTree.prototype.get=function(relativePath){if(relativePath.isEmpty()){return this.value;}else{var front=relativePath.getFront();var child=this.children.get(front);if(child){return child.get(relativePath.popFront());}else{return null;}}};/**
     * Replace the subtree at the specified path with the given new tree.
     *
     * @param {!Path} relativePath Path to replace subtree for.
     * @param {!ImmutableTree} newTree New tree.
     * @return {!ImmutableTree} Resulting tree.
     */ImmutableTree.prototype.setTree=function(relativePath,newTree){if(relativePath.isEmpty()){return newTree;}else{var front=relativePath.getFront();var child=this.children.get(front)||ImmutableTree.Empty;var newChild=child.setTree(relativePath.popFront(),newTree);var newChildren=void 0;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}return new ImmutableTree(this.value,newChildren);}};/**
     * Performs a depth first fold on this tree. Transforms a tree into a single
     * value, given a function that operates on the path to a node, an optional
     * current value, and a map of child names to folded subtrees
     * @template V
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     */ImmutableTree.prototype.fold=function(fn){return this.fold_(Path.Empty,fn);};/**
     * Recursive helper for public-facing fold() method
     * @template V
     * @param {!Path} pathSoFar
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     * @private
     */ImmutableTree.prototype.fold_=function(pathSoFar,fn){var accum={};this.children.inorderTraversal(function(childKey,childTree){accum[childKey]=childTree.fold_(pathSoFar.child(childKey),fn);});return fn(pathSoFar,this.value,accum);};/**
     * Find the first matching value on the given path. Return the result of applying f to it.
     * @template V
     * @param {!Path} path
     * @param {!function(!Path, !T):?V} f
     * @return {?V}
     */ImmutableTree.prototype.findOnPath=function(path,f){return this.findOnPath_(path,Path.Empty,f);};ImmutableTree.prototype.findOnPath_=function(pathToFollow,pathSoFar,f){var result=this.value?f(pathSoFar,this.value):false;if(result){return result;}else{if(pathToFollow.isEmpty()){return null;}else{var front=pathToFollow.getFront();var nextChild=this.children.get(front);if(nextChild){return nextChild.findOnPath_(pathToFollow.popFront(),pathSoFar.child(front),f);}else{return null;}}}};/**
     *
     * @param {!Path} path
     * @param {!function(!Path, !T)} f
     * @returns {!ImmutableTree.<T>}
     */ImmutableTree.prototype.foreachOnPath=function(path,f){return this.foreachOnPath_(path,Path.Empty,f);};ImmutableTree.prototype.foreachOnPath_=function(pathToFollow,currentRelativePath,f){if(pathToFollow.isEmpty()){return this;}else{if(this.value){f(currentRelativePath,this.value);}var front=pathToFollow.getFront();var nextChild=this.children.get(front);if(nextChild){return nextChild.foreachOnPath_(pathToFollow.popFront(),currentRelativePath.child(front),f);}else{return ImmutableTree.Empty;}}};/**
     * Calls the given function for each node in the tree that has a value.
     *
     * @param {function(!Path, !T)} f A function to be called with
     *   the path from the root of the tree to a node, and the value at that node.
     *   Called in depth-first order.
     */ImmutableTree.prototype.foreach=function(f){this.foreach_(Path.Empty,f);};ImmutableTree.prototype.foreach_=function(currentRelativePath,f){this.children.inorderTraversal(function(childName,childTree){childTree.foreach_(currentRelativePath.child(childName),f);});if(this.value){f(currentRelativePath,this.value);}};/**
     *
     * @param {function(string, !T)} f
     */ImmutableTree.prototype.foreachChild=function(f){this.children.inorderTraversal(function(childName,childTree){if(childTree.value){f(childName,childTree.value);}});};// eslint-disable-next-line @typescript-eslint/no-explicit-any
ImmutableTree.Empty=new ImmutableTree(null);return ImmutableTree;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @constructor
 * @implements {Operation}
 */var ListenComplete=/** @class */function(){function ListenComplete(source,path){this.source=source;this.path=path;/** @inheritDoc */this.type=OperationType.LISTEN_COMPLETE;}ListenComplete.prototype.operationForChild=function(childName){if(this.path.isEmpty()){return new ListenComplete(this.source,Path.Empty);}else{return new ListenComplete(this.source,this.path.popFront());}};return ListenComplete;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!Node} snap
 * @constructor
 * @implements {Operation}
 */var Overwrite=/** @class */function(){function Overwrite(source,path,snap){this.source=source;this.path=path;this.snap=snap;/** @inheritDoc */this.type=OperationType.OVERWRITE;}Overwrite.prototype.operationForChild=function(childName){if(this.path.isEmpty()){return new Overwrite(this.source,Path.Empty,this.snap.getImmediateChild(childName));}else{return new Overwrite(this.source,this.path.popFront(),this.snap);}};return Overwrite;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!ImmutableTree.<!Node>} children
 * @constructor
 * @implements {Operation}
 */var Merge=/** @class */function(){function Merge(/** @inheritDoc */source,/** @inheritDoc */path,/** @inheritDoc */children){this.source=source;this.path=path;this.children=children;/** @inheritDoc */this.type=OperationType.MERGE;}/**
     * @inheritDoc
     */Merge.prototype.operationForChild=function(childName){if(this.path.isEmpty()){var childTree=this.children.subtree(new Path(childName));if(childTree.isEmpty()){// This child is unaffected
return null;}else if(childTree.value){// We have a snapshot for the child in question.  This becomes an overwrite of the child.
return new Overwrite(this.source,Path.Empty,childTree.value);}else{// This is a merge at a deeper level
return new Merge(this.source,Path.Empty,childTree);}}else{(0,_util.assert)(this.path.getFront()===childName,"Can't get a merge for a child not on the path of the operation");return new Merge(this.source,this.path.popFront(),this.children);}};/**
     * @inheritDoc
     */Merge.prototype.toString=function(){return'Operation('+this.path+': '+this.source.toString()+' merge: '+this.children.toString()+')';};return Merge;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */var CacheNode=/** @class */function(){/**
     * @param {!Node} node_
     * @param {boolean} fullyInitialized_
     * @param {boolean} filtered_
     */function CacheNode(node_,fullyInitialized_,filtered_){this.node_=node_;this.fullyInitialized_=fullyInitialized_;this.filtered_=filtered_;}/**
     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
     * @return {boolean}
     */CacheNode.prototype.isFullyInitialized=function(){return this.fullyInitialized_;};/**
     * Returns whether this node is potentially missing children due to a filter applied to the node
     * @return {boolean}
     */CacheNode.prototype.isFiltered=function(){return this.filtered_;};/**
     * @param {!Path} path
     * @return {boolean}
     */CacheNode.prototype.isCompleteForPath=function(path){if(path.isEmpty()){return this.isFullyInitialized()&&!this.filtered_;}var childKey=path.getFront();return this.isCompleteForChild(childKey);};/**
     * @param {!string} key
     * @return {boolean}
     */CacheNode.prototype.isCompleteForChild=function(key){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(key);};/**
     * @return {!Node}
     */CacheNode.prototype.getNode=function(){return this.node_;};return CacheNode;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Stores the data we have cached for a view.
 *
 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
 *
 * @constructor
 */var ViewCache=/** @class */function(){/**
     *
     * @param {!CacheNode} eventCache_
     * @param {!CacheNode} serverCache_
     */function ViewCache(eventCache_,serverCache_){this.eventCache_=eventCache_;this.serverCache_=serverCache_;}/**
     * @param {!Node} eventSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */ViewCache.prototype.updateEventSnap=function(eventSnap,complete,filtered){return new ViewCache(new CacheNode(eventSnap,complete,filtered),this.serverCache_);};/**
     * @param {!Node} serverSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */ViewCache.prototype.updateServerSnap=function(serverSnap,complete,filtered){return new ViewCache(this.eventCache_,new CacheNode(serverSnap,complete,filtered));};/**
     * @return {!CacheNode}
     */ViewCache.prototype.getEventCache=function(){return this.eventCache_;};/**
     * @return {?Node}
     */ViewCache.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null;};/**
     * @return {!CacheNode}
     */ViewCache.prototype.getServerCache=function(){return this.serverCache_;};/**
     * @return {?Node}
     */ViewCache.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null;};/**
     * @const
     * @type {ViewCache}
     */ViewCache.Empty=new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,/*fullyInitialized=*/false,/*filtered=*/false),new CacheNode(ChildrenNode.EMPTY_NODE,/*fullyInitialized=*/false,/*filtered=*/false));return ViewCache;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 * @struct
 * @param {!string} type The event type
 * @param {!Node} snapshotNode The data
 * @param {string=} childName The name for this child, if it's a child event
 * @param {Node=} oldSnap Used for intermediate processing of child changed events
 * @param {string=} prevName The name for the previous child, if applicable
 */var Change=/** @class */function(){function Change(type,snapshotNode,childName,oldSnap,prevName){this.type=type;this.snapshotNode=snapshotNode;this.childName=childName;this.oldSnap=oldSnap;this.prevName=prevName;}/**
     * @param {!Node} snapshot
     * @return {!Change}
     */Change.valueChange=function(snapshot){return new Change(Change.VALUE,snapshot);};/**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */Change.childAddedChange=function(childKey,snapshot){return new Change(Change.CHILD_ADDED,snapshot,childKey);};/**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */Change.childRemovedChange=function(childKey,snapshot){return new Change(Change.CHILD_REMOVED,snapshot,childKey);};/**
     * @param {string} childKey
     * @param {!Node} newSnapshot
     * @param {!Node} oldSnapshot
     * @return {!Change}
     */Change.childChangedChange=function(childKey,newSnapshot,oldSnapshot){return new Change(Change.CHILD_CHANGED,newSnapshot,childKey,oldSnapshot);};/**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */Change.childMovedChange=function(childKey,snapshot){return new Change(Change.CHILD_MOVED,snapshot,childKey);};//event types
/** Event type for a child added */Change.CHILD_ADDED='child_added';/** Event type for a child removed */Change.CHILD_REMOVED='child_removed';/** Event type for a child changed */Change.CHILD_CHANGED='child_changed';/** Event type for a child moved */Change.CHILD_MOVED='child_moved';/** Event type for a value change */Change.VALUE='value';return Change;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 *
 * @constructor
 * @implements {NodeFilter}
 * @param {!Index} index
 */var IndexedFilter=/** @class */function(){function IndexedFilter(index_){this.index_=index_;}IndexedFilter.prototype.updateChild=function(snap,key,newChild,affectedPath,source,optChangeAccumulator){(0,_util.assert)(snap.isIndexed(this.index_),'A node must be indexed if only a child is updated');var oldChild=snap.getImmediateChild(key);// Check if anything actually changed.
if(oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))){// There's an edge case where a child can enter or leave the view because affectedPath was set to null.
// In this case, affectedPath will appear null in both the old and new snapshots.  So we need
// to avoid treating these cases as "nothing changed."
if(oldChild.isEmpty()===newChild.isEmpty()){// Nothing changed.
// This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
//assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
return snap;}}if(optChangeAccumulator!=null){if(newChild.isEmpty()){if(snap.hasChild(key)){optChangeAccumulator.trackChildChange(Change.childRemovedChange(key,oldChild));}else{(0,_util.assert)(snap.isLeafNode(),'A child remove without an old child only makes sense on a leaf node');}}else if(oldChild.isEmpty()){optChangeAccumulator.trackChildChange(Change.childAddedChange(key,newChild));}else{optChangeAccumulator.trackChildChange(Change.childChangedChange(key,newChild,oldChild));}}if(snap.isLeafNode()&&newChild.isEmpty()){return snap;}else{// Make sure the node is indexed
return snap.updateImmediateChild(key,newChild).withIndex(this.index_);}};/**
     * @inheritDoc
     */IndexedFilter.prototype.updateFullNode=function(oldSnap,newSnap,optChangeAccumulator){if(optChangeAccumulator!=null){if(!oldSnap.isLeafNode()){oldSnap.forEachChild(PRIORITY_INDEX,function(key,childNode){if(!newSnap.hasChild(key)){optChangeAccumulator.trackChildChange(Change.childRemovedChange(key,childNode));}});}if(!newSnap.isLeafNode()){newSnap.forEachChild(PRIORITY_INDEX,function(key,childNode){if(oldSnap.hasChild(key)){var oldChild=oldSnap.getImmediateChild(key);if(!oldChild.equals(childNode)){optChangeAccumulator.trackChildChange(Change.childChangedChange(key,childNode,oldChild));}}else{optChangeAccumulator.trackChildChange(Change.childAddedChange(key,childNode));}});}}return newSnap.withIndex(this.index_);};/**
     * @inheritDoc
     */IndexedFilter.prototype.updatePriority=function(oldSnap,newPriority){if(oldSnap.isEmpty()){return ChildrenNode.EMPTY_NODE;}else{return oldSnap.updatePriority(newPriority);}};/**
     * @inheritDoc
     */IndexedFilter.prototype.filtersNodes=function(){return false;};/**
     * @inheritDoc
     */IndexedFilter.prototype.getIndexedFilter=function(){return this;};/**
     * @inheritDoc
     */IndexedFilter.prototype.getIndex=function(){return this.index_;};return IndexedFilter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ChildChangeAccumulator=/** @class */function(){function ChildChangeAccumulator(){this.changeMap=new Map();}ChildChangeAccumulator.prototype.trackChildChange=function(change){var type=change.type;var childKey=change.childName;(0,_util.assert)(type===Change.CHILD_ADDED||type===Change.CHILD_CHANGED||type===Change.CHILD_REMOVED,'Only child changes supported for tracking');(0,_util.assert)(childKey!=='.priority','Only non-priority child changes can be tracked.');var oldChange=this.changeMap.get(childKey);if(oldChange){var oldType=oldChange.type;if(type===Change.CHILD_ADDED&&oldType===Change.CHILD_REMOVED){this.changeMap.set(childKey,Change.childChangedChange(childKey,change.snapshotNode,oldChange.snapshotNode));}else if(type===Change.CHILD_REMOVED&&oldType===Change.CHILD_ADDED){this.changeMap["delete"](childKey);}else if(type===Change.CHILD_REMOVED&&oldType===Change.CHILD_CHANGED){this.changeMap.set(childKey,Change.childRemovedChange(childKey,oldChange.oldSnap));}else if(type===Change.CHILD_CHANGED&&oldType===Change.CHILD_ADDED){this.changeMap.set(childKey,Change.childAddedChange(childKey,change.snapshotNode));}else if(type===Change.CHILD_CHANGED&&oldType===Change.CHILD_CHANGED){this.changeMap.set(childKey,Change.childChangedChange(childKey,change.snapshotNode,oldChange.oldSnap));}else{throw(0,_util.assertionError)('Illegal combination of changes: '+change+' occurred after '+oldChange);}}else{this.changeMap.set(childKey,change);}};ChildChangeAccumulator.prototype.getChanges=function(){return Array.from(this.changeMap.values());};return ChildChangeAccumulator;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of CompleteChildSource that never returns any additional children
 *
 * @private
 * @constructor
 * @implements CompleteChildSource
 */ // eslint-disable-next-line @typescript-eslint/naming-convention
var NoCompleteChildSource_=/** @class */function(){function NoCompleteChildSource_(){}/**
     * @inheritDoc
     */NoCompleteChildSource_.prototype.getCompleteChild=function(childKey){return null;};/**
     * @inheritDoc
     */NoCompleteChildSource_.prototype.getChildAfterChild=function(index,child,reverse){return null;};return NoCompleteChildSource_;}();/**
 * Singleton instance.
 * @const
 * @type {!CompleteChildSource}
 */var NO_COMPLETE_CHILD_SOURCE=new NoCompleteChildSource_();/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 *
 *
 * @implements CompleteChildSource
 */var WriteTreeCompleteChildSource=/** @class */function(){/**
     * @param {!WriteTreeRef} writes_
     * @param {!ViewCache} viewCache_
     * @param {?Node} optCompleteServerCache_
     */function WriteTreeCompleteChildSource(writes_,viewCache_,optCompleteServerCache_){if(optCompleteServerCache_===void 0){optCompleteServerCache_=null;}this.writes_=writes_;this.viewCache_=viewCache_;this.optCompleteServerCache_=optCompleteServerCache_;}/**
     * @inheritDoc
     */WriteTreeCompleteChildSource.prototype.getCompleteChild=function(childKey){var node=this.viewCache_.getEventCache();if(node.isCompleteForChild(childKey)){return node.getNode().getImmediateChild(childKey);}else{var serverNode=this.optCompleteServerCache_!=null?new CacheNode(this.optCompleteServerCache_,true,false):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(childKey,serverNode);}};/**
     * @inheritDoc
     */WriteTreeCompleteChildSource.prototype.getChildAfterChild=function(index,child,reverse){var completeServerData=this.optCompleteServerCache_!=null?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap();var nodes=this.writes_.calcIndexedSlice(completeServerData,child,1,reverse,index);if(nodes.length===0){return null;}else{return nodes[0];}};return WriteTreeCompleteChildSource;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 * @struct
 */var ProcessorResult=/** @class */function(){/**
     * @param {!ViewCache} viewCache
     * @param {!Array.<!Change>} changes
     */function ProcessorResult(viewCache,changes){this.viewCache=viewCache;this.changes=changes;}return ProcessorResult;}();/**
 * @constructor
 */var ViewProcessor=/** @class */function(){/**
     * @param {!NodeFilter} filter_
     */function ViewProcessor(filter_){this.filter_=filter_;}/**
     * @param {!ViewCache} viewCache
     */ViewProcessor.prototype.assertIndexed=function(viewCache){(0,_util.assert)(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),'Event snap not indexed');(0,_util.assert)(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),'Server snap not indexed');};/**
     * @param {!ViewCache} oldViewCache
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @return {!ProcessorResult}
     */ViewProcessor.prototype.applyOperation=function(oldViewCache,operation,writesCache,completeCache){var accumulator=new ChildChangeAccumulator();var newViewCache,filterServerNode;if(operation.type===OperationType.OVERWRITE){var overwrite=operation;if(overwrite.source.fromUser){newViewCache=this.applyUserOverwrite_(oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,accumulator);}else{(0,_util.assert)(overwrite.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered  and the
// update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
// again
filterServerNode=overwrite.source.tagged||oldViewCache.getServerCache().isFiltered()&&!overwrite.path.isEmpty();newViewCache=this.applyServerOverwrite_(oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.MERGE){var merge=operation;if(merge.source.fromUser){newViewCache=this.applyUserMerge_(oldViewCache,merge.path,merge.children,writesCache,completeCache,accumulator);}else{(0,_util.assert)(merge.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered
filterServerNode=merge.source.tagged||oldViewCache.getServerCache().isFiltered();newViewCache=this.applyServerMerge_(oldViewCache,merge.path,merge.children,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.ACK_USER_WRITE){var ackUserWrite=operation;if(!ackUserWrite.revert){newViewCache=this.ackUserWrite_(oldViewCache,ackUserWrite.path,ackUserWrite.affectedTree,writesCache,completeCache,accumulator);}else{newViewCache=this.revertUserWrite_(oldViewCache,ackUserWrite.path,writesCache,completeCache,accumulator);}}else if(operation.type===OperationType.LISTEN_COMPLETE){newViewCache=this.listenComplete_(oldViewCache,operation.path,writesCache,accumulator);}else{throw(0,_util.assertionError)('Unknown operation type: '+operation.type);}var changes=accumulator.getChanges();ViewProcessor.maybeAddValueEvent_(oldViewCache,newViewCache,changes);return new ProcessorResult(newViewCache,changes);};/**
     * @param {!ViewCache} oldViewCache
     * @param {!ViewCache} newViewCache
     * @param {!Array.<!Change>} accumulator
     * @private
     */ViewProcessor.maybeAddValueEvent_=function(oldViewCache,newViewCache,accumulator){var eventSnap=newViewCache.getEventCache();if(eventSnap.isFullyInitialized()){var isLeafOrEmpty=eventSnap.getNode().isLeafNode()||eventSnap.getNode().isEmpty();var oldCompleteSnap=oldViewCache.getCompleteEventSnap();if(accumulator.length>0||!oldViewCache.getEventCache().isFullyInitialized()||isLeafOrEmpty&&!eventSnap.getNode().equals(/** @type {!Node} */oldCompleteSnap)||!eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())){accumulator.push(Change.valueChange(/** @type {!Node} */newViewCache.getCompleteEventSnap()));}}};/**
     * @param {!ViewCache} viewCache
     * @param {!Path} changePath
     * @param {!WriteTreeRef} writesCache
     * @param {!CompleteChildSource} source
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.generateEventCacheAfterServerEvent_=function(viewCache,changePath,writesCache,source,accumulator){var oldEventSnap=viewCache.getEventCache();if(writesCache.shadowingWrite(changePath)!=null){// we have a shadowing write, ignore changes
return viewCache;}else{var newEventCache=void 0,serverNode=void 0;if(changePath.isEmpty()){// TODO: figure out how this plays with "sliding ack windows"
(0,_util.assert)(viewCache.getServerCache().isFullyInitialized(),'If change path is empty, we must have complete server data');if(viewCache.getServerCache().isFiltered()){// We need to special case this, because we need to only apply writes to complete children, or
// we might end up raising events for incomplete children. If the server data is filtered deep
// writes cannot be guaranteed to be complete
var serverCache=viewCache.getCompleteServerSnap();var completeChildren=serverCache instanceof ChildrenNode?serverCache:ChildrenNode.EMPTY_NODE;var completeEventChildren=writesCache.calcCompleteEventChildren(completeChildren);newEventCache=this.filter_.updateFullNode(viewCache.getEventCache().getNode(),completeEventChildren,accumulator);}else{var completeNode=writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());newEventCache=this.filter_.updateFullNode(viewCache.getEventCache().getNode(),completeNode,accumulator);}}else{var childKey=changePath.getFront();if(childKey==='.priority'){(0,_util.assert)(changePath.getLength()===1,"Can't have a priority with additional path components");var oldEventNode=oldEventSnap.getNode();serverNode=viewCache.getServerCache().getNode();// we might have overwrites for this priority
var updatedPriority=writesCache.calcEventCacheAfterServerOverwrite(changePath,oldEventNode,serverNode);if(updatedPriority!=null){newEventCache=this.filter_.updatePriority(oldEventNode,updatedPriority);}else{// priority didn't change, keep old node
newEventCache=oldEventSnap.getNode();}}else{var childChangePath=changePath.popFront();// update child
var newEventChild=void 0;if(oldEventSnap.isCompleteForChild(childKey)){serverNode=viewCache.getServerCache().getNode();var eventChildUpdate=writesCache.calcEventCacheAfterServerOverwrite(changePath,oldEventSnap.getNode(),serverNode);if(eventChildUpdate!=null){newEventChild=oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath,eventChildUpdate);}else{// Nothing changed, just keep the old child
newEventChild=oldEventSnap.getNode().getImmediateChild(childKey);}}else{newEventChild=writesCache.calcCompleteChild(childKey,viewCache.getServerCache());}if(newEventChild!=null){newEventCache=this.filter_.updateChild(oldEventSnap.getNode(),childKey,newEventChild,childChangePath,source,accumulator);}else{// no complete child available or no change
newEventCache=oldEventSnap.getNode();}}}return viewCache.updateEventSnap(newEventCache,oldEventSnap.isFullyInitialized()||changePath.isEmpty(),this.filter_.filtersNodes());}};/**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.applyServerOverwrite_=function(oldViewCache,changePath,changedSnap,writesCache,completeCache,filterServerNode,accumulator){var oldServerSnap=oldViewCache.getServerCache();var newServerCache;var serverFilter=filterServerNode?this.filter_:this.filter_.getIndexedFilter();if(changePath.isEmpty()){newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),changedSnap,null);}else if(serverFilter.filtersNodes()&&!oldServerSnap.isFiltered()){// we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
var newServerNode=oldServerSnap.getNode().updateChild(changePath,changedSnap);newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),newServerNode,null);}else{var childKey=changePath.getFront();if(!oldServerSnap.isCompleteForPath(changePath)&&changePath.getLength()>1){// We don't update incomplete nodes with updates intended for other listeners
return oldViewCache;}var childChangePath=changePath.popFront();var childNode=oldServerSnap.getNode().getImmediateChild(childKey);var newChildNode=childNode.updateChild(childChangePath,changedSnap);if(childKey==='.priority'){newServerCache=serverFilter.updatePriority(oldServerSnap.getNode(),newChildNode);}else{newServerCache=serverFilter.updateChild(oldServerSnap.getNode(),childKey,newChildNode,childChangePath,NO_COMPLETE_CHILD_SOURCE,null);}}var newViewCache=oldViewCache.updateServerSnap(newServerCache,oldServerSnap.isFullyInitialized()||changePath.isEmpty(),serverFilter.filtersNodes());var source=new WriteTreeCompleteChildSource(writesCache,newViewCache,completeCache);return this.generateEventCacheAfterServerEvent_(newViewCache,changePath,writesCache,source,accumulator);};/**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.applyUserOverwrite_=function(oldViewCache,changePath,changedSnap,writesCache,completeCache,accumulator){var oldEventSnap=oldViewCache.getEventCache();var newViewCache,newEventCache;var source=new WriteTreeCompleteChildSource(writesCache,oldViewCache,completeCache);if(changePath.isEmpty()){newEventCache=this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(),changedSnap,accumulator);newViewCache=oldViewCache.updateEventSnap(newEventCache,true,this.filter_.filtersNodes());}else{var childKey=changePath.getFront();if(childKey==='.priority'){newEventCache=this.filter_.updatePriority(oldViewCache.getEventCache().getNode(),changedSnap);newViewCache=oldViewCache.updateEventSnap(newEventCache,oldEventSnap.isFullyInitialized(),oldEventSnap.isFiltered());}else{var childChangePath=changePath.popFront();var oldChild=oldEventSnap.getNode().getImmediateChild(childKey);var newChild=void 0;if(childChangePath.isEmpty()){// Child overwrite, we can replace the child
newChild=changedSnap;}else{var childNode=source.getCompleteChild(childKey);if(childNode!=null){if(childChangePath.getBack()==='.priority'&&childNode.getChild(childChangePath.parent()).isEmpty()){// This is a priority update on an empty node. If this node exists on the server, the
// server will send down the priority in the update, so ignore for now
newChild=childNode;}else{newChild=childNode.updateChild(childChangePath,changedSnap);}}else{// There is no complete child node available
newChild=ChildrenNode.EMPTY_NODE;}}if(!oldChild.equals(newChild)){var newEventSnap=this.filter_.updateChild(oldEventSnap.getNode(),childKey,newChild,childChangePath,source,accumulator);newViewCache=oldViewCache.updateEventSnap(newEventSnap,oldEventSnap.isFullyInitialized(),this.filter_.filtersNodes());}else{newViewCache=oldViewCache;}}}return newViewCache;};/**
     * @param {!ViewCache} viewCache
     * @param {string} childKey
     * @return {boolean}
     * @private
     */ViewProcessor.cacheHasChild_=function(viewCache,childKey){return viewCache.getEventCache().isCompleteForChild(childKey);};/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.applyUserMerge_=function(viewCache,path,changedChildren,writesCache,serverCache,accumulator){var _this=this;// HACK: In the case of a limit query, there may be some changes that bump things out of the
// window leaving room for new items.  It's important we process these changes first, so we
// iterate the changes twice, first processing any that affect items currently in view.
// TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
// and event snap.  I'm not sure if this will result in edge cases when a child is in one but
// not the other.
var curViewCache=viewCache;changedChildren.foreach(function(relativePath,childNode){var writePath=path.child(relativePath);if(ViewProcessor.cacheHasChild_(viewCache,writePath.getFront())){curViewCache=_this.applyUserOverwrite_(curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});changedChildren.foreach(function(relativePath,childNode){var writePath=path.child(relativePath);if(!ViewProcessor.cacheHasChild_(viewCache,writePath.getFront())){curViewCache=_this.applyUserOverwrite_(curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});return curViewCache;};/**
     * @param {!Node} node
     * @param {ImmutableTree.<!Node>} merge
     * @return {!Node}
     * @private
     */ViewProcessor.prototype.applyMerge_=function(node,merge){merge.foreach(function(relativePath,childNode){node=node.updateChild(relativePath,childNode);});return node;};/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.applyServerMerge_=function(viewCache,path,changedChildren,writesCache,serverCache,filterServerNode,accumulator){var _this=this;// If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
// wait for the complete data update coming soon.
if(viewCache.getServerCache().getNode().isEmpty()&&!viewCache.getServerCache().isFullyInitialized()){return viewCache;}// HACK: In the case of a limit query, there may be some changes that bump things out of the
// window leaving room for new items.  It's important we process these changes first, so we
// iterate the changes twice, first processing any that affect items currently in view.
// TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
// and event snap.  I'm not sure if this will result in edge cases when a child is in one but
// not the other.
var curViewCache=viewCache;var viewMergeTree;if(path.isEmpty()){viewMergeTree=changedChildren;}else{viewMergeTree=ImmutableTree.Empty.setTree(path,changedChildren);}var serverNode=viewCache.getServerCache().getNode();viewMergeTree.children.inorderTraversal(function(childKey,childTree){if(serverNode.hasChild(childKey)){var serverChild=viewCache.getServerCache().getNode().getImmediateChild(childKey);var newChild=_this.applyMerge_(serverChild,childTree);curViewCache=_this.applyServerOverwrite_(curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});viewMergeTree.children.inorderTraversal(function(childKey,childMergeTree){var isUnknownDeepMerge=!viewCache.getServerCache().isCompleteForChild(childKey)&&childMergeTree.value==null;if(!serverNode.hasChild(childKey)&&!isUnknownDeepMerge){var serverChild=viewCache.getServerCache().getNode().getImmediateChild(childKey);var newChild=_this.applyMerge_(serverChild,childMergeTree);curViewCache=_this.applyServerOverwrite_(curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});return curViewCache;};/**
     * @param {!ViewCache} viewCache
     * @param {!Path} ackPath
     * @param {!ImmutableTree<!boolean>} affectedTree
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.ackUserWrite_=function(viewCache,ackPath,affectedTree,writesCache,completeCache,accumulator){if(writesCache.shadowingWrite(ackPath)!=null){return viewCache;}// Only filter server node if it is currently filtered
var filterServerNode=viewCache.getServerCache().isFiltered();// Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
// now that it won't be shadowed.
var serverCache=viewCache.getServerCache();if(affectedTree.value!=null){// This is an overwrite.
if(ackPath.isEmpty()&&serverCache.isFullyInitialized()||serverCache.isCompleteForPath(ackPath)){return this.applyServerOverwrite_(viewCache,ackPath,serverCache.getNode().getChild(ackPath),writesCache,completeCache,filterServerNode,accumulator);}else if(ackPath.isEmpty()){// This is a goofy edge case where we are acking data at this location but don't have full data.  We
// should just re-apply whatever we have in our cache as a merge.
var changedChildren_1=ImmutableTree.Empty;serverCache.getNode().forEachChild(KEY_INDEX,function(name,node){changedChildren_1=changedChildren_1.set(new Path(name),node);});return this.applyServerMerge_(viewCache,ackPath,changedChildren_1,writesCache,completeCache,filterServerNode,accumulator);}else{return viewCache;}}else{// This is a merge.
var changedChildren_2=ImmutableTree.Empty;affectedTree.foreach(function(mergePath,value){var serverCachePath=ackPath.child(mergePath);if(serverCache.isCompleteForPath(serverCachePath)){changedChildren_2=changedChildren_2.set(mergePath,serverCache.getNode().getChild(serverCachePath));}});return this.applyServerMerge_(viewCache,ackPath,changedChildren_2,writesCache,completeCache,filterServerNode,accumulator);}};/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.listenComplete_=function(viewCache,path,writesCache,accumulator){var oldServerNode=viewCache.getServerCache();var newViewCache=viewCache.updateServerSnap(oldServerNode.getNode(),oldServerNode.isFullyInitialized()||path.isEmpty(),oldServerNode.isFiltered());return this.generateEventCacheAfterServerEvent_(newViewCache,path,writesCache,NO_COMPLETE_CHILD_SOURCE,accumulator);};/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */ViewProcessor.prototype.revertUserWrite_=function(viewCache,path,writesCache,completeServerCache,accumulator){var complete;if(writesCache.shadowingWrite(path)!=null){return viewCache;}else{var source=new WriteTreeCompleteChildSource(writesCache,viewCache,completeServerCache);var oldEventCache=viewCache.getEventCache().getNode();var newEventCache=void 0;if(path.isEmpty()||path.getFront()==='.priority'){var newNode=void 0;if(viewCache.getServerCache().isFullyInitialized()){newNode=writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());}else{var serverChildren=viewCache.getServerCache().getNode();(0,_util.assert)(serverChildren instanceof ChildrenNode,'serverChildren would be complete if leaf node');newNode=writesCache.calcCompleteEventChildren(serverChildren);}newNode=newNode;newEventCache=this.filter_.updateFullNode(oldEventCache,newNode,accumulator);}else{var childKey=path.getFront();var newChild=writesCache.calcCompleteChild(childKey,viewCache.getServerCache());if(newChild==null&&viewCache.getServerCache().isCompleteForChild(childKey)){newChild=oldEventCache.getImmediateChild(childKey);}if(newChild!=null){newEventCache=this.filter_.updateChild(oldEventCache,childKey,newChild,path.popFront(),source,accumulator);}else if(viewCache.getEventCache().getNode().hasChild(childKey)){// No complete child available, delete the existing one, if any
newEventCache=this.filter_.updateChild(oldEventCache,childKey,ChildrenNode.EMPTY_NODE,path.popFront(),source,accumulator);}else{newEventCache=oldEventCache;}if(newEventCache.isEmpty()&&viewCache.getServerCache().isFullyInitialized()){// We might have reverted all child writes. Maybe the old event was a leaf node
complete=writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());if(complete.isLeafNode()){newEventCache=this.filter_.updateFullNode(newEventCache,complete,accumulator);}}}complete=viewCache.getServerCache().isFullyInitialized()||writesCache.shadowingWrite(Path.Empty)!=null;return viewCache.updateEventSnap(newEventCache,complete,this.filter_.filtersNodes());}};return ViewProcessor;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 * @constructor
 */var EventGenerator=/** @class */function(){/**
     *
     * @param {!Query} query_
     */function EventGenerator(query_){this.query_=query_;/**
         * @private
         * @type {!Index}
         */this.index_=this.query_.getQueryParams().getIndex();}/**
     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
     *
     * Notes:
     *  - child_moved events will be synthesized at this time for any child_changed events that affect
     *    our index.
     *  - prevName will be calculated based on the index ordering.
     *
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {!Array.<!EventRegistration>} eventRegistrations
     * @return {!Array.<!Event>}
     */EventGenerator.prototype.generateEventsForChanges=function(changes,eventCache,eventRegistrations){var _this=this;var events=[];var moves=[];changes.forEach(function(change){if(change.type===Change.CHILD_CHANGED&&_this.index_.indexedValueChanged(change.oldSnap,change.snapshotNode)){moves.push(Change.childMovedChange(change.childName,change.snapshotNode));}});this.generateEventsForType_(events,Change.CHILD_REMOVED,changes,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.CHILD_ADDED,changes,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.CHILD_MOVED,moves,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.CHILD_CHANGED,changes,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.VALUE,changes,eventRegistrations,eventCache);return events;};/**
     * Given changes of a single change type, generate the corresponding events.
     *
     * @param {!Array.<!Event>} events
     * @param {!string} eventType
     * @param {!Array.<!Change>} changes
     * @param {!Array.<!EventRegistration>} registrations
     * @param {!Node} eventCache
     * @private
     */EventGenerator.prototype.generateEventsForType_=function(events,eventType,changes,registrations,eventCache){var _this=this;var filteredChanges=changes.filter(function(change){return change.type===eventType;});filteredChanges.sort(this.compareChanges_.bind(this));filteredChanges.forEach(function(change){var materializedChange=_this.materializeSingleChange_(change,eventCache);registrations.forEach(function(registration){if(registration.respondsTo(change.type)){events.push(registration.createEvent(materializedChange,_this.query_));}});});};/**
     * @param {!Change} change
     * @param {!Node} eventCache
     * @return {!Change}
     * @private
     */EventGenerator.prototype.materializeSingleChange_=function(change,eventCache){if(change.type==='value'||change.type==='child_removed'){return change;}else{change.prevName=eventCache.getPredecessorChildName(/** @type {!string} */change.childName,change.snapshotNode,this.index_);return change;}};/**
     * @param {!Change} a
     * @param {!Change} b
     * @return {number}
     * @private
     */EventGenerator.prototype.compareChanges_=function(a,b){if(a.childName==null||b.childName==null){throw(0,_util.assertionError)('Should only compare child_ events.');}var aWrapped=new NamedNode(a.childName,a.snapshotNode);var bWrapped=new NamedNode(b.childName,b.snapshotNode);return this.index_.compare(aWrapped,bWrapped);};return EventGenerator;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 * @constructor
 */var View=/** @class */function(){/**
     *
     * @param {!Query} query_
     * @param {!ViewCache} initialViewCache
     */function View(query_,initialViewCache){this.query_=query_;this.eventRegistrations_=[];var params=this.query_.getQueryParams();var indexFilter=new IndexedFilter(params.getIndex());var filter=params.getNodeFilter();/**
         * @type {ViewProcessor}
         * @private
         */this.processor_=new ViewProcessor(filter);var initialServerCache=initialViewCache.getServerCache();var initialEventCache=initialViewCache.getEventCache();// Don't filter server node with other filter than index, wait for tagged listen
var serverSnap=indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE,initialServerCache.getNode(),null);var eventSnap=filter.updateFullNode(ChildrenNode.EMPTY_NODE,initialEventCache.getNode(),null);var newServerCache=new CacheNode(serverSnap,initialServerCache.isFullyInitialized(),indexFilter.filtersNodes());var newEventCache=new CacheNode(eventSnap,initialEventCache.isFullyInitialized(),filter.filtersNodes());/**
         * @type {!ViewCache}
         * @private
         */this.viewCache_=new ViewCache(newEventCache,newServerCache);/**
         * @type {!EventGenerator}
         * @private
         */this.eventGenerator_=new EventGenerator(this.query_);}/**
     * @return {!Query}
     */View.prototype.getQuery=function(){return this.query_;};/**
     * @return {?Node}
     */View.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode();};/**
     * @param {!Path} path
     * @return {?Node}
     */View.prototype.getCompleteServerCache=function(path){var cache=this.viewCache_.getCompleteServerSnap();if(cache){// If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
// we need to see if it contains the child we're interested in.
if(this.query_.getQueryParams().loadsAllData()||!path.isEmpty()&&!cache.getImmediateChild(path.getFront()).isEmpty()){return cache.getChild(path);}}return null;};/**
     * @return {boolean}
     */View.prototype.isEmpty=function(){return this.eventRegistrations_.length===0;};/**
     * @param {!EventRegistration} eventRegistration
     */View.prototype.addEventRegistration=function(eventRegistration){this.eventRegistrations_.push(eventRegistration);};/**
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
     */View.prototype.removeEventRegistration=function(eventRegistration,cancelError){var cancelEvents=[];if(cancelError){(0,_util.assert)(eventRegistration==null,'A cancel should cancel all event registrations.');var path_1=this.query_.path;this.eventRegistrations_.forEach(function(registration){cancelError/** @type {!Error} */=cancelError;var maybeEvent=registration.createCancelEvent(cancelError,path_1);if(maybeEvent){cancelEvents.push(maybeEvent);}});}if(eventRegistration){var remaining=[];for(var i=0;i<this.eventRegistrations_.length;++i){var existing=this.eventRegistrations_[i];if(!existing.matches(eventRegistration)){remaining.push(existing);}else if(eventRegistration.hasAnyCallback()){// We're removing just this one
remaining=remaining.concat(this.eventRegistrations_.slice(i+1));break;}}this.eventRegistrations_=remaining;}else{this.eventRegistrations_=[];}return cancelEvents;};/**
     * Applies the given Operation, updates our cache, and returns the appropriate events.
     *
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @return {!Array.<!Event>}
     */View.prototype.applyOperation=function(operation,writesCache,completeServerCache){if(operation.type===OperationType.MERGE&&operation.source.queryId!==null){(0,_util.assert)(this.viewCache_.getCompleteServerSnap(),'We should always have a full cache before handling merges');(0,_util.assert)(this.viewCache_.getCompleteEventSnap(),'Missing event cache, even though we have a server cache');}var oldViewCache=this.viewCache_;var result=this.processor_.applyOperation(oldViewCache,operation,writesCache,completeServerCache);this.processor_.assertIndexed(result.viewCache);(0,_util.assert)(result.viewCache.getServerCache().isFullyInitialized()||!oldViewCache.getServerCache().isFullyInitialized(),'Once a server snap is complete, it should never go back');this.viewCache_=result.viewCache;return this.generateEventsForChanges_(result.changes,result.viewCache.getEventCache().getNode(),null);};/**
     * @param {!EventRegistration} registration
     * @return {!Array.<!Event>}
     */View.prototype.getInitialEvents=function(registration){var eventSnap=this.viewCache_.getEventCache();var initialChanges=[];if(!eventSnap.getNode().isLeafNode()){var eventNode=eventSnap.getNode();eventNode.forEachChild(PRIORITY_INDEX,function(key,childNode){initialChanges.push(Change.childAddedChange(key,childNode));});}if(eventSnap.isFullyInitialized()){initialChanges.push(Change.valueChange(eventSnap.getNode()));}return this.generateEventsForChanges_(initialChanges,eventSnap.getNode(),registration);};/**
     * @private
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {EventRegistration=} eventRegistration
     * @return {!Array.<!Event>}
     */View.prototype.generateEventsForChanges_=function(changes,eventCache,eventRegistration){var registrations=eventRegistration?[eventRegistration]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(changes,eventCache,registrations);};return View;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __referenceConstructor$1;/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */var SyncPoint=/** @class */function(){function SyncPoint(){/**
         * The Views being tracked at this location in the tree, stored as a map where the key is a
         * queryId and the value is the View for that query.
         *
         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
         */this.views=new Map();}Object.defineProperty(SyncPoint,"__referenceConstructor",{get:function get(){(0,_util.assert)(__referenceConstructor$1,'Reference.ts has not been loaded');return __referenceConstructor$1;},set:function set(val){(0,_util.assert)(!__referenceConstructor$1,'__referenceConstructor has already been defined');__referenceConstructor$1=val;},enumerable:false,configurable:true});SyncPoint.prototype.isEmpty=function(){return this.views.size===0;};SyncPoint.prototype.applyOperation=function(operation,writesCache,optCompleteServerCache){var e_1,_a;var queryId=operation.source.queryId;if(queryId!==null){var view=this.views.get(queryId);(0,_util.assert)(view!=null,'SyncTree gave us an op for an invalid query.');return view.applyOperation(operation,writesCache,optCompleteServerCache);}else{var events=[];try{for(var _b=(0,_tslib.__values)(this.views.values()),_c=_b.next();!_c.done;_c=_b.next()){var view=_c.value;events=events.concat(view.applyOperation(operation,writesCache,optCompleteServerCache));}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b["return"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}return events;}};/**
     * Add an event callback for the specified query.
     *
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache Complete server cache, if we have it.
     * @param {boolean} serverCacheComplete
     * @return {!Array.<!Event>} Events to raise.
     */SyncPoint.prototype.addEventRegistration=function(query,eventRegistration,writesCache,serverCache,serverCacheComplete){var queryId=query.queryIdentifier();var view=this.views.get(queryId);if(!view){// TODO: make writesCache take flag for complete server node
var eventCache=writesCache.calcCompleteEventCache(serverCacheComplete?serverCache:null);var eventCacheComplete=false;if(eventCache){eventCacheComplete=true;}else if(serverCache instanceof ChildrenNode){eventCache=writesCache.calcCompleteEventChildren(serverCache);eventCacheComplete=false;}else{eventCache=ChildrenNode.EMPTY_NODE;eventCacheComplete=false;}var viewCache=new ViewCache(new CacheNode(/** @type {!Node} */eventCache,eventCacheComplete,false),new CacheNode(/** @type {!Node} */serverCache,serverCacheComplete,false));view=new View(query,viewCache);this.views.set(queryId,view);}// This is guaranteed to exist now, we just created anything that was missing
view.addEventRegistration(eventRegistration);return view.getInitialEvents(eventRegistration);};/**
     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
     *
     * If query is the default query, we'll check all views for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
     *
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
     */SyncPoint.prototype.removeEventRegistration=function(query,eventRegistration,cancelError){var e_2,_a;var queryId=query.queryIdentifier();var removed=[];var cancelEvents=[];var hadCompleteView=this.hasCompleteView();if(queryId==='default'){try{// When you do ref.off(...), we search all views for the registration to remove.
for(var _b=(0,_tslib.__values)(this.views.entries()),_c=_b.next();!_c.done;_c=_b.next()){var _d=(0,_tslib.__read)(_c.value,2),viewQueryId=_d[0],view=_d[1];cancelEvents=cancelEvents.concat(view.removeEventRegistration(eventRegistration,cancelError));if(view.isEmpty()){this.views["delete"](viewQueryId);// We'll deal with complete views later.
if(!view.getQuery().getQueryParams().loadsAllData()){removed.push(view.getQuery());}}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_c&&!_c.done&&(_a=_b["return"]))_a.call(_b);}finally{if(e_2)throw e_2.error;}}}else{// remove the callback from the specific view.
var view=this.views.get(queryId);if(view){cancelEvents=cancelEvents.concat(view.removeEventRegistration(eventRegistration,cancelError));if(view.isEmpty()){this.views["delete"](queryId);// We'll deal with complete views later.
if(!view.getQuery().getQueryParams().loadsAllData()){removed.push(view.getQuery());}}}}if(hadCompleteView&&!this.hasCompleteView()){// We removed our last complete view.
removed.push(new SyncPoint.__referenceConstructor(query.repo,query.path));}return{removed:removed,events:cancelEvents};};SyncPoint.prototype.getQueryViews=function(){var e_3,_a;var result=[];try{for(var _b=(0,_tslib.__values)(this.views.values()),_c=_b.next();!_c.done;_c=_b.next()){var view=_c.value;if(!view.getQuery().getQueryParams().loadsAllData()){result.push(view);}}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_c&&!_c.done&&(_a=_b["return"]))_a.call(_b);}finally{if(e_3)throw e_3.error;}}return result;};/**
     * @param path The path to the desired complete snapshot
     * @return A complete cache, if it exists
     */SyncPoint.prototype.getCompleteServerCache=function(path){var e_4,_a;var serverCache=null;try{for(var _b=(0,_tslib.__values)(this.views.values()),_c=_b.next();!_c.done;_c=_b.next()){var view=_c.value;serverCache=serverCache||view.getCompleteServerCache(path);}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_c&&!_c.done&&(_a=_b["return"]))_a.call(_b);}finally{if(e_4)throw e_4.error;}}return serverCache;};SyncPoint.prototype.viewForQuery=function(query){var params=query.getQueryParams();if(params.loadsAllData()){return this.getCompleteView();}else{var queryId=query.queryIdentifier();return this.views.get(queryId);}};SyncPoint.prototype.viewExistsForQuery=function(query){return this.viewForQuery(query)!=null;};SyncPoint.prototype.hasCompleteView=function(){return this.getCompleteView()!=null;};SyncPoint.prototype.getCompleteView=function(){var e_5,_a;try{for(var _b=(0,_tslib.__values)(this.views.values()),_c=_b.next();!_c.done;_c=_b.next()){var view=_c.value;if(view.getQuery().getQueryParams().loadsAllData()){return view;}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(_c&&!_c.done&&(_a=_b["return"]))_a.call(_b);}finally{if(e_5)throw e_5.error;}}return null;};return SyncPoint;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 */var CompoundWrite=/** @class */function(){function CompoundWrite(writeTree_){this.writeTree_=writeTree_;}CompoundWrite.prototype.addWrite=function(path,node){if(path.isEmpty()){return new CompoundWrite(new ImmutableTree(node));}else{var rootmost=this.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){var rootMostPath=rootmost.path;var value=rootmost.value;var relativePath=Path.relativePath(rootMostPath,path);value=value.updateChild(relativePath,node);return new CompoundWrite(this.writeTree_.set(rootMostPath,value));}else{var subtree=new ImmutableTree(node);var newWriteTree=this.writeTree_.setTree(path,subtree);return new CompoundWrite(newWriteTree);}}};CompoundWrite.prototype.addWrites=function(path,updates){var newWrite=this;each(updates,function(childKey,node){newWrite=newWrite.addWrite(path.child(childKey),node);});return newWrite;};/**
     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
     * location, which must be removed by calling this method with that path.
     *
     * @param path The path at which a write and all deeper writes should be removed
     * @return {!CompoundWrite} The new CompoundWrite with the removed path
     */CompoundWrite.prototype.removeWrite=function(path){if(path.isEmpty()){return CompoundWrite.Empty;}else{var newWriteTree=this.writeTree_.setTree(path,ImmutableTree.Empty);return new CompoundWrite(newWriteTree);}};/**
     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
     * considered "complete".
     *
     * @param path The path to check for
     * @return Whether there is a complete write at that path
     */CompoundWrite.prototype.hasCompleteWrite=function(path){return this.getCompleteNode(path)!=null;};/**
     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
     * writes from deeper paths, but will return child nodes from a more shallow path.
     *
     * @param path The path to get a complete write
     * @return The node if complete at that path, or null otherwise.
     */CompoundWrite.prototype.getCompleteNode=function(path){var rootmost=this.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path,path));}else{return null;}};/**
     * Returns all children that are guaranteed to be a complete overwrite.
     *
     * @return A list of all complete children.
     */CompoundWrite.prototype.getCompleteChildren=function(){var children=[];var node=this.writeTree_.value;if(node!=null){// If it's a leaf node, it has no children; so nothing to do.
if(!node.isLeafNode()){node.forEachChild(PRIORITY_INDEX,function(childName,childNode){children.push(new NamedNode(childName,childNode));});}}else{this.writeTree_.children.inorderTraversal(function(childName,childTree){if(childTree.value!=null){children.push(new NamedNode(childName,childTree.value));}});}return children;};CompoundWrite.prototype.childCompoundWrite=function(path){if(path.isEmpty()){return this;}else{var shadowingNode=this.getCompleteNode(path);if(shadowingNode!=null){return new CompoundWrite(new ImmutableTree(shadowingNode));}else{return new CompoundWrite(this.writeTree_.subtree(path));}}};/**
     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
     * @return Whether this CompoundWrite is empty
     */CompoundWrite.prototype.isEmpty=function(){return this.writeTree_.isEmpty();};/**
     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
     * node
     * @param node The node to apply this CompoundWrite to
     * @return The node with all writes applied
     */CompoundWrite.prototype.apply=function(node){return applySubtreeWrite(Path.Empty,this.writeTree_,node);};CompoundWrite.Empty=new CompoundWrite(new ImmutableTree(null));return CompoundWrite;}();function applySubtreeWrite(relativePath,writeTree,node){if(writeTree.value!=null){// Since there a write is always a leaf, we're done here
return node.updateChild(relativePath,writeTree.value);}else{var priorityWrite_1=null;writeTree.children.inorderTraversal(function(childKey,childTree){if(childKey==='.priority'){// Apply priorities at the end so we don't update priorities for either empty nodes or forget
// to apply priorities to empty nodes that are later filled
(0,_util.assert)(childTree.value!==null,'Priority writes must always be leaf nodes');priorityWrite_1=childTree.value;}else{node=applySubtreeWrite(relativePath.child(childKey),childTree,node);}});// If there was a priority write, we only apply it if the node is not empty
if(!node.getChild(relativePath).isEmpty()&&priorityWrite_1!==null){node=node.updateChild(relativePath.child('.priority'),priorityWrite_1);}return node;}}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
 * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
 * and addMerge(), and removed with removeWrite().
 *
 * @constructor
 */var WriteTree=/** @class */function(){function WriteTree(){/**
         * A tree tracking the result of applying all visible writes.  This does not include transactions with
         * applyLocally=false or writes that are completely shadowed by other writes.
         *
         * @type {!CompoundWrite}
         * @private
         */this.visibleWrites_=CompoundWrite.Empty;/**
         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
         * used by transactions).
         *
         * @type {!Array.<!WriteRecord>}
         * @private
         */this.allWrites_=[];this.lastWriteId_=-1;}/**
     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
     *
     * @param {!Path} path
     * @return {!WriteTreeRef}
     */WriteTree.prototype.childWrites=function(path){return new WriteTreeRef(path,this);};/**
     * Record a new overwrite from user code.
     *
     * @param {!Path} path
     * @param {!Node} snap
     * @param {!number} writeId
     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
     */WriteTree.prototype.addOverwrite=function(path,snap,writeId,visible){(0,_util.assert)(writeId>this.lastWriteId_,'Stacking an older write on top of newer ones');if(visible===undefined){visible=true;}this.allWrites_.push({path:path,snap:snap,writeId:writeId,visible:visible});if(visible){this.visibleWrites_=this.visibleWrites_.addWrite(path,snap);}this.lastWriteId_=writeId;};/**
     * Record a new merge from user code.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} writeId
     */WriteTree.prototype.addMerge=function(path,changedChildren,writeId){(0,_util.assert)(writeId>this.lastWriteId_,'Stacking an older merge on top of newer ones');this.allWrites_.push({path:path,children:changedChildren,writeId:writeId,visible:true});this.visibleWrites_=this.visibleWrites_.addWrites(path,changedChildren);this.lastWriteId_=writeId;};/**
     * @param {!number} writeId
     * @return {?WriteRecord}
     */WriteTree.prototype.getWrite=function(writeId){for(var i=0;i<this.allWrites_.length;i++){var record=this.allWrites_[i];if(record.writeId===writeId){return record;}}return null;};/**
     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
     *
     * @param {!number} writeId
     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
     * events as a result).
     */WriteTree.prototype.removeWrite=function(writeId){// Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
// out of order.
//const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
//assert(validClear, "Either we don't have this write, or it's the first one in the queue");
var _this=this;var idx=this.allWrites_.findIndex(function(s){return s.writeId===writeId;});(0,_util.assert)(idx>=0,'removeWrite called with nonexistent writeId.');var writeToRemove=this.allWrites_[idx];this.allWrites_.splice(idx,1);var removedWriteWasVisible=writeToRemove.visible;var removedWriteOverlapsWithOtherWrites=false;var i=this.allWrites_.length-1;while(removedWriteWasVisible&&i>=0){var currentWrite=this.allWrites_[i];if(currentWrite.visible){if(i>=idx&&this.recordContainsPath_(currentWrite,writeToRemove.path)){// The removed write was completely shadowed by a subsequent write.
removedWriteWasVisible=false;}else if(writeToRemove.path.contains(currentWrite.path)){// Either we're covering some writes or they're covering part of us (depending on which came first).
removedWriteOverlapsWithOtherWrites=true;}}i--;}if(!removedWriteWasVisible){return false;}else if(removedWriteOverlapsWithOtherWrites){// There's some shadowing going on. Just rebuild the visible writes from scratch.
this.resetTree_();return true;}else{// There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
if(writeToRemove.snap){this.visibleWrites_=this.visibleWrites_.removeWrite(writeToRemove.path);}else{var children=writeToRemove.children;each(children,function(childName){_this.visibleWrites_=_this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));});}return true;}};/**
     * Return a complete snapshot for the given path if there's visible write data at that path, else null.
     * No server data is considered.
     *
     * @param {!Path} path
     * @return {?Node}
     */WriteTree.prototype.getCompleteWriteData=function(path){return this.visibleWrites_.getCompleteNode(path);};/**
     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
     * writes), attempt to calculate a complete snapshot for the given path
     *
     * @param {!Path} treePath
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */WriteTree.prototype.calcCompleteEventCache=function(treePath,completeServerCache,writeIdsToExclude,includeHiddenWrites){if(!writeIdsToExclude&&!includeHiddenWrites){var shadowingNode=this.visibleWrites_.getCompleteNode(treePath);if(shadowingNode!=null){return shadowingNode;}else{var subMerge=this.visibleWrites_.childCompoundWrite(treePath);if(subMerge.isEmpty()){return completeServerCache;}else if(completeServerCache==null&&!subMerge.hasCompleteWrite(Path.Empty)){// We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
return null;}else{var layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return subMerge.apply(layeredCache);}}}else{var merge=this.visibleWrites_.childCompoundWrite(treePath);if(!includeHiddenWrites&&merge.isEmpty()){return completeServerCache;}else{// If the server cache is null, and we don't have a complete cache, we need to return null
if(!includeHiddenWrites&&completeServerCache==null&&!merge.hasCompleteWrite(Path.Empty)){return null;}else{var filter=function filter(write){return(write.visible||includeHiddenWrites)&&(!writeIdsToExclude||!~writeIdsToExclude.indexOf(write.writeId))&&(write.path.contains(treePath)||treePath.contains(write.path));};var mergeAtPath=WriteTree.layerTree_(this.allWrites_,filter,treePath);var layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return mergeAtPath.apply(layeredCache);}}}};/**
     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
     * Used when creating new views, to pre-fill their complete event children snapshot.
     *
     * @param {!Path} treePath
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */WriteTree.prototype.calcCompleteEventChildren=function(treePath,completeServerChildren){var completeChildren=ChildrenNode.EMPTY_NODE;var topLevelSet=this.visibleWrites_.getCompleteNode(treePath);if(topLevelSet){if(!topLevelSet.isLeafNode()){// we're shadowing everything. Return the children.
topLevelSet.forEachChild(PRIORITY_INDEX,function(childName,childSnap){completeChildren=completeChildren.updateImmediateChild(childName,childSnap);});}return completeChildren;}else if(completeServerChildren){// Layer any children we have on top of this
// We know we don't have a top-level set, so just enumerate existing children
var merge_1=this.visibleWrites_.childCompoundWrite(treePath);completeServerChildren.forEachChild(PRIORITY_INDEX,function(childName,childNode){var node=merge_1.childCompoundWrite(new Path(childName)).apply(childNode);completeChildren=completeChildren.updateImmediateChild(childName,node);});// Add any complete children we have from the set
merge_1.getCompleteChildren().forEach(function(namedNode){completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}else{// We don't have anything to layer on top of. Layer on any children we have
// Note that we can return an empty snap if we have a defined delete
var merge=this.visibleWrites_.childCompoundWrite(treePath);merge.getCompleteChildren().forEach(function(namedNode){completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}};/**
     * Given that the underlying server data has updated, determine what, if anything, needs to be
     * applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events
     *
     * Either existingEventSnap or existingServerSnap must exist
     *
     * @param {!Path} treePath
     * @param {!Path} childPath
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */WriteTree.prototype.calcEventCacheAfterServerOverwrite=function(treePath,childPath,existingEventSnap,existingServerSnap){(0,_util.assert)(existingEventSnap||existingServerSnap,'Either existingEventSnap or existingServerSnap must exist');var path=treePath.child(childPath);if(this.visibleWrites_.hasCompleteWrite(path)){// At this point we can probably guarantee that we're in case 2, meaning no events
// May need to check visibility while doing the findRootMostValueAndPath call
return null;}else{// No complete shadowing. We're either partially shadowing or not shadowing at all.
var childMerge=this.visibleWrites_.childCompoundWrite(path);if(childMerge.isEmpty()){// We're not shadowing at all. Case 1
return existingServerSnap.getChild(childPath);}else{// This could be more efficient if the serverNode + updates doesn't change the eventSnap
// However this is tricky to find out, since user updates don't necessary change the server
// snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
// adds nodes, but doesn't change any existing writes. It is therefore not enough to
// only check if the updates change the serverNode.
// Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
return childMerge.apply(existingServerSnap.getChild(childPath));}}};/**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!Path} treePath
     * @param {!string} childKey
     * @param {!CacheNode} existingServerSnap
     * @return {?Node}
     */WriteTree.prototype.calcCompleteChild=function(treePath,childKey,existingServerSnap){var path=treePath.child(childKey);var shadowingNode=this.visibleWrites_.getCompleteNode(path);if(shadowingNode!=null){return shadowingNode;}else{if(existingServerSnap.isCompleteForChild(childKey)){var childMerge=this.visibleWrites_.childCompoundWrite(path);return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));}else{return null;}}};/**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     */WriteTree.prototype.shadowingWrite=function(path){return this.visibleWrites_.getCompleteNode(path);};/**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window.
     */WriteTree.prototype.calcIndexedSlice=function(treePath,completeServerData,startPost,count,reverse,index){var toIterate;var merge=this.visibleWrites_.childCompoundWrite(treePath);var shadowingNode=merge.getCompleteNode(Path.Empty);if(shadowingNode!=null){toIterate=shadowingNode;}else if(completeServerData!=null){toIterate=merge.apply(completeServerData);}else{// no children to iterate on
return[];}toIterate=toIterate.withIndex(index);if(!toIterate.isEmpty()&&!toIterate.isLeafNode()){var nodes=[];var cmp=index.getCompare();var iter=reverse?toIterate.getReverseIteratorFrom(startPost,index):toIterate.getIteratorFrom(startPost,index);var next=iter.getNext();while(next&&nodes.length<count){if(cmp(next,startPost)!==0){nodes.push(next);}next=iter.getNext();}return nodes;}else{return[];}};WriteTree.prototype.recordContainsPath_=function(writeRecord,path){if(writeRecord.snap){return writeRecord.path.contains(path);}else{for(var childName in writeRecord.children){if(writeRecord.children.hasOwnProperty(childName)&&writeRecord.path.child(childName).contains(path)){return true;}}return false;}};/**
     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
     */WriteTree.prototype.resetTree_=function(){this.visibleWrites_=WriteTree.layerTree_(this.allWrites_,WriteTree.DefaultFilter_,Path.Empty);if(this.allWrites_.length>0){this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId;}else{this.lastWriteId_=-1;}};/**
     * The default filter used when constructing the tree. Keep everything that's visible.
     */WriteTree.DefaultFilter_=function(write){return write.visible;};/**
     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
     * event data at that path.
     */WriteTree.layerTree_=function(writes,filter,treeRoot){var compoundWrite=CompoundWrite.Empty;for(var i=0;i<writes.length;++i){var write=writes[i];// Theory, a later set will either:
// a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
// b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
if(filter(write)){var writePath=write.path;var relativePath=void 0;if(write.snap){if(treeRoot.contains(writePath)){relativePath=Path.relativePath(treeRoot,writePath);compoundWrite=compoundWrite.addWrite(relativePath,write.snap);}else if(writePath.contains(treeRoot)){relativePath=Path.relativePath(writePath,treeRoot);compoundWrite=compoundWrite.addWrite(Path.Empty,write.snap.getChild(relativePath));}else;}else if(write.children){if(treeRoot.contains(writePath)){relativePath=Path.relativePath(treeRoot,writePath);compoundWrite=compoundWrite.addWrites(relativePath,write.children);}else if(writePath.contains(treeRoot)){relativePath=Path.relativePath(writePath,treeRoot);if(relativePath.isEmpty()){compoundWrite=compoundWrite.addWrites(Path.Empty,write.children);}else{var child=(0,_util.safeGet)(write.children,relativePath.getFront());if(child){// There exists a child in this node that matches the root path
var deepNode=child.getChild(relativePath.popFront());compoundWrite=compoundWrite.addWrite(Path.Empty,deepNode);}}}else;}else{throw(0,_util.assertionError)('WriteRecord should have .snap or .children');}}}return compoundWrite;};return WriteTree;}();/**
 * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
 * just proxy to the underlying WriteTree.
 *
 * @constructor
 */var WriteTreeRef=/** @class */function(){/**
     * @param {!Path} path
     * @param {!WriteTree} writeTree
     */function WriteTreeRef(path,writeTree){this.treePath_=path;this.writeTree_=writeTree;}/**
     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
     * can lead to a more expensive calculation.
     *
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */WriteTreeRef.prototype.calcCompleteEventCache=function(completeServerCache,writeIdsToExclude,includeHiddenWrites){return this.writeTree_.calcCompleteEventCache(this.treePath_,completeServerCache,writeIdsToExclude,includeHiddenWrites);};/**
     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
     * mix of the given server data and write data.
     *
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */WriteTreeRef.prototype.calcCompleteEventChildren=function(completeServerChildren){return this.writeTree_.calcCompleteEventChildren(this.treePath_,completeServerChildren);};/**
     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
     * if anything, needs to be applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events should be raised
     *
     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
     *
     * @param {!Path} path
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite=function(path,existingEventSnap,existingServerSnap){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,path,existingEventSnap,existingServerSnap);};/**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     *
     * @param {!Path} path
     * @return {?Node}
     */WriteTreeRef.prototype.shadowingWrite=function(path){return this.writeTree_.shadowingWrite(this.treePath_.child(path));};/**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window
     *
     * @param {?Node} completeServerData
     * @param {!NamedNode} startPost
     * @param {!number} count
     * @param {boolean} reverse
     * @param {!Index} index
     * @return {!Array.<!NamedNode>}
     */WriteTreeRef.prototype.calcIndexedSlice=function(completeServerData,startPost,count,reverse,index){return this.writeTree_.calcIndexedSlice(this.treePath_,completeServerData,startPost,count,reverse,index);};/**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!string} childKey
     * @param {!CacheNode} existingServerCache
     * @return {?Node}
     */WriteTreeRef.prototype.calcCompleteChild=function(childKey,existingServerCache){return this.writeTree_.calcCompleteChild(this.treePath_,childKey,existingServerCache);};/**
     * Return a WriteTreeRef for a child.
     *
     * @param {string} childName
     * @return {!WriteTreeRef}
     */WriteTreeRef.prototype.child=function(childName){return new WriteTreeRef(this.treePath_.child(childName),this.writeTree_);};return WriteTreeRef;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 * @constructor
 */var SyncTree=/** @class */function(){/**
     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
     *   to server data.
     */function SyncTree(listenProvider_){this.listenProvider_=listenProvider_;/**
         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
         */this.syncPointTree_=ImmutableTree.Empty;/**
         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
         */this.pendingWriteTree_=new WriteTree();this.tagToQueryMap=new Map();this.queryToTagMap=new Map();}/**
     * Apply the data changes for a user-generated set() or transaction() call.
     *
     * @return Events to raise.
     */SyncTree.prototype.applyUserOverwrite=function(path,newData,writeId,visible){// Record pending write.
this.pendingWriteTree_.addOverwrite(path,newData,writeId,visible);if(!visible){return[];}else{return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User,path,newData));}};/**
     * Apply the data from a user-generated update() call
     *
     * @return Events to raise.
     */SyncTree.prototype.applyUserMerge=function(path,changedChildren,writeId){// Record pending merge.
this.pendingWriteTree_.addMerge(path,changedChildren,writeId);var changeTree=ImmutableTree.fromObject(changedChildren);return this.applyOperationToSyncPoints_(new Merge(OperationSource.User,path,changeTree));};/**
     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
     *
     * @param revert True if the given write failed and needs to be reverted
     * @return Events to raise.
     */SyncTree.prototype.ackUserWrite=function(writeId,revert){if(revert===void 0){revert=false;}var write=this.pendingWriteTree_.getWrite(writeId);var needToReevaluate=this.pendingWriteTree_.removeWrite(writeId);if(!needToReevaluate){return[];}else{var affectedTree_1=ImmutableTree.Empty;if(write.snap!=null){// overwrite
affectedTree_1=affectedTree_1.set(Path.Empty,true);}else{each(write.children,function(pathString,node){affectedTree_1=affectedTree_1.set(new Path(pathString),node);});}return this.applyOperationToSyncPoints_(new AckUserWrite(write.path,affectedTree_1,revert));}};/**
     * Apply new server data for the specified path..
     *
     * @return Events to raise.
     */SyncTree.prototype.applyServerOverwrite=function(path,newData){return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server,path,newData));};/**
     * Apply new server data to be merged in at the specified path.
     *
     * @return Events to raise.
     */SyncTree.prototype.applyServerMerge=function(path,changedChildren){var changeTree=ImmutableTree.fromObject(changedChildren);return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server,path,changeTree));};/**
     * Apply a listen complete for a query
     *
     * @return Events to raise.
     */SyncTree.prototype.applyListenComplete=function(path){return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server,path));};/**
     * Apply new server data for the specified tagged query.
     *
     * @return Events to raise.
     */SyncTree.prototype.applyTaggedQueryOverwrite=function(path,snap,tag){var queryKey=this.queryKeyForTag_(tag);if(queryKey!=null){var r=SyncTree.parseQueryKey_(queryKey);var queryPath=r.path,queryId=r.queryId;var relativePath=Path.relativePath(queryPath,path);var op=new Overwrite(OperationSource.forServerTaggedQuery(queryId),relativePath,snap);return this.applyTaggedOperation_(queryPath,op);}else{// Query must have been removed already
return[];}};/**
     * Apply server data to be merged in for the specified tagged query.
     *
     * @return Events to raise.
     */SyncTree.prototype.applyTaggedQueryMerge=function(path,changedChildren,tag){var queryKey=this.queryKeyForTag_(tag);if(queryKey){var r=SyncTree.parseQueryKey_(queryKey);var queryPath=r.path,queryId=r.queryId;var relativePath=Path.relativePath(queryPath,path);var changeTree=ImmutableTree.fromObject(changedChildren);var op=new Merge(OperationSource.forServerTaggedQuery(queryId),relativePath,changeTree);return this.applyTaggedOperation_(queryPath,op);}else{// We've already removed the query. No big deal, ignore the update
return[];}};/**
     * Apply a listen complete for a tagged query
     *
     * @return Events to raise.
     */SyncTree.prototype.applyTaggedListenComplete=function(path,tag){var queryKey=this.queryKeyForTag_(tag);if(queryKey){var r=SyncTree.parseQueryKey_(queryKey);var queryPath=r.path,queryId=r.queryId;var relativePath=Path.relativePath(queryPath,path);var op=new ListenComplete(OperationSource.forServerTaggedQuery(queryId),relativePath);return this.applyTaggedOperation_(queryPath,op);}else{// We've already removed the query. No big deal, ignore the update
return[];}};/**
     * Add an event callback for the specified query.
     *
     * @return Events to raise.
     */SyncTree.prototype.addEventRegistration=function(query,eventRegistration){var path=query.path;var serverCache=null;var foundAncestorDefaultView=false;// Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
// Consider optimizing this once there's a better understanding of what actual behavior will be.
this.syncPointTree_.foreachOnPath(path,function(pathToSyncPoint,sp){var relativePath=Path.relativePath(pathToSyncPoint,path);serverCache=serverCache||sp.getCompleteServerCache(relativePath);foundAncestorDefaultView=foundAncestorDefaultView||sp.hasCompleteView();});var syncPoint=this.syncPointTree_.get(path);if(!syncPoint){syncPoint=new SyncPoint();this.syncPointTree_=this.syncPointTree_.set(path,syncPoint);}else{foundAncestorDefaultView=foundAncestorDefaultView||syncPoint.hasCompleteView();serverCache=serverCache||syncPoint.getCompleteServerCache(Path.Empty);}var serverCacheComplete;if(serverCache!=null){serverCacheComplete=true;}else{serverCacheComplete=false;serverCache=ChildrenNode.EMPTY_NODE;var subtree=this.syncPointTree_.subtree(path);subtree.foreachChild(function(childName,childSyncPoint){var completeCache=childSyncPoint.getCompleteServerCache(Path.Empty);if(completeCache){serverCache=serverCache.updateImmediateChild(childName,completeCache);}});}var viewAlreadyExists=syncPoint.viewExistsForQuery(query);if(!viewAlreadyExists&&!query.getQueryParams().loadsAllData()){// We need to track a tag for this query
var queryKey=SyncTree.makeQueryKey_(query);(0,_util.assert)(!this.queryToTagMap.has(queryKey),'View does not exist, but we have a tag');var tag=SyncTree.getNextQueryTag_();this.queryToTagMap.set(queryKey,tag);this.tagToQueryMap.set(tag,queryKey);}var writesCache=this.pendingWriteTree_.childWrites(path);var events=syncPoint.addEventRegistration(query,eventRegistration,writesCache,serverCache,serverCacheComplete);if(!viewAlreadyExists&&!foundAncestorDefaultView){var view/** @type !View */=syncPoint.viewForQuery(query);events=events.concat(this.setupListener_(query,view));}return events;};/**
     * Remove event callback(s).
     *
     * If query is the default query, we'll check all queries for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
     *
     * @param eventRegistration If null, all callbacks are removed.
     * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return Cancel events, if cancelError was provided.
     */SyncTree.prototype.removeEventRegistration=function(query,eventRegistration,cancelError){var _this=this;// Find the syncPoint first. Then deal with whether or not it has matching listeners
var path=query.path;var maybeSyncPoint=this.syncPointTree_.get(path);var cancelEvents=[];// A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
// other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
// not loadsAllData().
if(maybeSyncPoint&&(query.queryIdentifier()==='default'||maybeSyncPoint.viewExistsForQuery(query))){/**
             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
             */var removedAndEvents=maybeSyncPoint.removeEventRegistration(query,eventRegistration,cancelError);if(maybeSyncPoint.isEmpty()){this.syncPointTree_=this.syncPointTree_.remove(path);}var removed=removedAndEvents.removed;cancelEvents=removedAndEvents.events;// We may have just removed one of many listeners and can short-circuit this whole process
// We may also not have removed a default listener, in which case all of the descendant listeners should already be
// properly set up.
//
// Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
// queryId === 'default'
var removingDefault=-1!==removed.findIndex(function(query){return query.getQueryParams().loadsAllData();});var covered=this.syncPointTree_.findOnPath(path,function(relativePath,parentSyncPoint){return parentSyncPoint.hasCompleteView();});if(removingDefault&&!covered){var subtree=this.syncPointTree_.subtree(path);// There are potentially child listeners. Determine what if any listens we need to send before executing the
// removal
if(!subtree.isEmpty()){// We need to fold over our subtree and collect the listeners to send
var newViews=this.collectDistinctViewsForSubTree_(subtree);// Ok, we've collected all the listens we need. Set them up.
for(var i=0;i<newViews.length;++i){var view=newViews[i],newQuery=view.getQuery();var listener=this.createListenerForView_(view);this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery),this.tagForQuery_(newQuery),listener.hashFn,listener.onComplete);}}}// If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
// The above block has us covered in terms of making sure we're set up on listens lower in the tree.
// Also, note that if we have a cancelError, it's already been removed at the provider level.
if(!covered&&removed.length>0&&!cancelError){// If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
// default. Otherwise, we need to iterate through and cancel each individual query
if(removingDefault){// We don't tag default listeners
var defaultTag=null;this.listenProvider_.stopListening(SyncTree.queryForListening_(query),defaultTag);}else{removed.forEach(function(queryToRemove){var tagToRemove=_this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));_this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove),tagToRemove);});}}// Now, clear all of the tags we're tracking for the removed listens
this.removeTags_(removed);}return cancelEvents;};/**
     * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
     * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
     * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
     *     <incremented total> as the write is applied locally and then acknowledged at the server.
     *
     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
     *
     * @param path The path to the data we want
     * @param writeIdsToExclude A specific set to be excluded
     */SyncTree.prototype.calcCompleteEventCache=function(path,writeIdsToExclude){var includeHiddenSets=true;var writeTree=this.pendingWriteTree_;var serverCache=this.syncPointTree_.findOnPath(path,function(pathSoFar,syncPoint){var relativePath=Path.relativePath(pathSoFar,path);var serverCache=syncPoint.getCompleteServerCache(relativePath);if(serverCache){return serverCache;}});return writeTree.calcCompleteEventCache(path,serverCache,writeIdsToExclude,includeHiddenSets);};/**
     * This collapses multiple unfiltered views into a single view, since we only need a single
     * listener for them.
     */SyncTree.prototype.collectDistinctViewsForSubTree_=function(subtree){return subtree.fold(function(relativePath,maybeChildSyncPoint,childMap){if(maybeChildSyncPoint&&maybeChildSyncPoint.hasCompleteView()){var completeView=maybeChildSyncPoint.getCompleteView();return[completeView];}else{// No complete view here, flatten any deeper listens into an array
var views_1=[];if(maybeChildSyncPoint){views_1=maybeChildSyncPoint.getQueryViews();}each(childMap,function(_key,childViews){views_1=views_1.concat(childViews);});return views_1;}});};SyncTree.prototype.removeTags_=function(queries){for(var j=0;j<queries.length;++j){var removedQuery=queries[j];if(!removedQuery.getQueryParams().loadsAllData()){// We should have a tag for this
var removedQueryKey=SyncTree.makeQueryKey_(removedQuery);var removedQueryTag=this.queryToTagMap.get(removedQueryKey);this.queryToTagMap["delete"](removedQueryKey);this.tagToQueryMap["delete"](removedQueryTag);}}};/**
     * Normalizes a query to a query we send the server for listening
     *
     * @return The normalized query
     */SyncTree.queryForListening_=function(query){if(query.getQueryParams().loadsAllData()&&!query.getQueryParams().isDefault()){// We treat queries that load all data as default queries
// Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
// from Query
return query.getRef();}else{return query;}};/**
     * For a given new listen, manage the de-duplication of outstanding subscriptions.
     *
     * @return This method can return events to support synchronous data sources
     */SyncTree.prototype.setupListener_=function(query,view){var path=query.path;var tag=this.tagForQuery_(query);var listener=this.createListenerForView_(view);var events=this.listenProvider_.startListening(SyncTree.queryForListening_(query),tag,listener.hashFn,listener.onComplete);var subtree=this.syncPointTree_.subtree(path);// The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
// may need to shadow other listens as well.
if(tag){(0,_util.assert)(!subtree.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");}else{// Shadow everything at or below this location, this is a default listener.
var queriesToStop=subtree.fold(function(relativePath,maybeChildSyncPoint,childMap){if(!relativePath.isEmpty()&&maybeChildSyncPoint&&maybeChildSyncPoint.hasCompleteView()){return[maybeChildSyncPoint.getCompleteView().getQuery()];}else{// No default listener here, flatten any deeper queries into an array
var queries_1=[];if(maybeChildSyncPoint){queries_1=queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function(view){return view.getQuery();}));}each(childMap,function(_key,childQueries){queries_1=queries_1.concat(childQueries);});return queries_1;}});for(var i=0;i<queriesToStop.length;++i){var queryToStop=queriesToStop[i];this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop),this.tagForQuery_(queryToStop));}}return events;};SyncTree.prototype.createListenerForView_=function(view){var _this=this;var query=view.getQuery();var tag=this.tagForQuery_(query);return{hashFn:function hashFn(){var cache=view.getServerCache()||ChildrenNode.EMPTY_NODE;return cache.hash();},onComplete:function onComplete(status){if(status==='ok'){if(tag){return _this.applyTaggedListenComplete(query.path,tag);}else{return _this.applyListenComplete(query.path);}}else{// If a listen failed, kill all of the listeners here, not just the one that triggered the error.
// Note that this may need to be scoped to just this listener if we change permissions on filtered children
var error=errorForServerCode(status,query);return _this.removeEventRegistration(query,/*eventRegistration*/null,error);}}};};/**
     * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
     */SyncTree.makeQueryKey_=function(query){return query.path.toString()+'$'+query.queryIdentifier();};/**
     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
     */SyncTree.parseQueryKey_=function(queryKey){var splitIndex=queryKey.indexOf('$');(0,_util.assert)(splitIndex!==-1&&splitIndex<queryKey.length-1,'Bad queryKey.');return{queryId:queryKey.substr(splitIndex+1),path:new Path(queryKey.substr(0,splitIndex))};};/**
     * Return the query associated with the given tag, if we have one
     */SyncTree.prototype.queryKeyForTag_=function(tag){return this.tagToQueryMap.get(tag);};/**
     * Return the tag associated with the given query.
     */SyncTree.prototype.tagForQuery_=function(query){var queryKey=SyncTree.makeQueryKey_(query);return this.queryToTagMap.get(queryKey);};/**
     * Static accessor for query tags.
     */SyncTree.getNextQueryTag_=function(){return SyncTree.nextQueryTag_++;};/**
     * A helper method to apply tagged operations
     */SyncTree.prototype.applyTaggedOperation_=function(queryPath,operation){var syncPoint=this.syncPointTree_.get(queryPath);(0,_util.assert)(syncPoint,"Missing sync point for query tag that we're tracking");var writesCache=this.pendingWriteTree_.childWrites(queryPath);return syncPoint.applyOperation(operation,writesCache,/*serverCache=*/null);};/**
     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
     *
     * NOTES:
     * - Descendant SyncPoints will be visited first (since we raise events depth-first).
     *
     * - We call applyOperation() on each SyncPoint passing three things:
     *   1. A version of the Operation that has been made relative to the SyncPoint location.
     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
     *   3. A snapshot Node with cached server data, if we have it.
     *
     * - We concatenate all of the events returned by each SyncPoint and return the result.
     */SyncTree.prototype.applyOperationToSyncPoints_=function(operation){return this.applyOperationHelper_(operation,this.syncPointTree_,/*serverCache=*/null,this.pendingWriteTree_.childWrites(Path.Empty));};/**
     * Recursive helper for applyOperationToSyncPoints_
     */SyncTree.prototype.applyOperationHelper_=function(operation,syncPointTree,serverCache,writesCache){if(operation.path.isEmpty()){return this.applyOperationDescendantsHelper_(operation,syncPointTree,serverCache,writesCache);}else{var syncPoint=syncPointTree.get(Path.Empty);// If we don't have cached server data, see if we can get it from this SyncPoint.
if(serverCache==null&&syncPoint!=null){serverCache=syncPoint.getCompleteServerCache(Path.Empty);}var events=[];var childName=operation.path.getFront();var childOperation=operation.operationForChild(childName);var childTree=syncPointTree.children.get(childName);if(childTree&&childOperation){var childServerCache=serverCache?serverCache.getImmediateChild(childName):null;var childWritesCache=writesCache.child(childName);events=events.concat(this.applyOperationHelper_(childOperation,childTree,childServerCache,childWritesCache));}if(syncPoint){events=events.concat(syncPoint.applyOperation(operation,writesCache,serverCache));}return events;}};/**
     * Recursive helper for applyOperationToSyncPoints_
     */SyncTree.prototype.applyOperationDescendantsHelper_=function(operation,syncPointTree,serverCache,writesCache){var _this=this;var syncPoint=syncPointTree.get(Path.Empty);// If we don't have cached server data, see if we can get it from this SyncPoint.
if(serverCache==null&&syncPoint!=null){serverCache=syncPoint.getCompleteServerCache(Path.Empty);}var events=[];syncPointTree.children.inorderTraversal(function(childName,childTree){var childServerCache=serverCache?serverCache.getImmediateChild(childName):null;var childWritesCache=writesCache.child(childName);var childOperation=operation.operationForChild(childName);if(childOperation){events=events.concat(_this.applyOperationDescendantsHelper_(childOperation,childTree,childServerCache,childWritesCache));}});if(syncPoint){events=events.concat(syncPoint.applyOperation(operation,writesCache,serverCache));}return events;};/**
     * Static tracker for next query tag.
     */SyncTree.nextQueryTag_=1;return SyncTree;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 *
 * @constructor
 */var SnapshotHolder=/** @class */function(){function SnapshotHolder(){this.rootNode_=ChildrenNode.EMPTY_NODE;}SnapshotHolder.prototype.getNode=function(path){return this.rootNode_.getChild(path);};SnapshotHolder.prototype.updateSnapshot=function(path,newSnapshotNode){this.rootNode_=this.rootNode_.updateChild(path,newSnapshotNode);};return SnapshotHolder;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Tracks a collection of stats.
 *
 * @constructor
 */var StatsCollection=/** @class */function(){function StatsCollection(){this.counters_={};}StatsCollection.prototype.incrementCounter=function(name,amount){if(amount===void 0){amount=1;}if(!(0,_util.contains)(this.counters_,name)){this.counters_[name]=0;}this.counters_[name]+=amount;};StatsCollection.prototype.get=function(){return(0,_util.deepCopy)(this.counters_);};return StatsCollection;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var StatsManager=/** @class */function(){function StatsManager(){}StatsManager.getCollection=function(repoInfo){var hashString=repoInfo.toString();if(!this.collections_[hashString]){this.collections_[hashString]=new StatsCollection();}return this.collections_[hashString];};StatsManager.getOrCreateReporter=function(repoInfo,creatorFunction){var hashString=repoInfo.toString();if(!this.reporters_[hashString]){this.reporters_[hashString]=creatorFunction();}return this.reporters_[hashString];};StatsManager.collections_={};StatsManager.reporters_={};return StatsManager;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ The collection to "listen" to.
 * @constructor
 */var StatsListener=/** @class */function(){function StatsListener(collection_){this.collection_=collection_;this.last_=null;}StatsListener.prototype.get=function(){var newStats=this.collection_.get();var delta=(0,_tslib.__assign)({},newStats);if(this.last_){each(this.last_,function(stat,value){delta[stat]=delta[stat]-value;});}this.last_=newStats;return delta;};return StatsListener;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.
var FIRST_STATS_MIN_TIME=10*1000;var FIRST_STATS_MAX_TIME=30*1000;// We'll continue to report stats on average every 5 minutes.
var REPORT_STATS_INTERVAL=5*60*1000;/**
 * @constructor
 */var StatsReporter=/** @class */function(){/**
     * @param collection
     * @param server_
     */function StatsReporter(collection,server_){this.server_=server_;this.statsToReport_={};this.statsListener_=new StatsListener(collection);var timeout=FIRST_STATS_MIN_TIME+(FIRST_STATS_MAX_TIME-FIRST_STATS_MIN_TIME)*Math.random();setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(timeout));}StatsReporter.prototype.includeStat=function(stat){this.statsToReport_[stat]=true;};StatsReporter.prototype.reportStats_=function(){var _this=this;var stats=this.statsListener_.get();var reportedStats={};var haveStatsToReport=false;each(stats,function(stat,value){if(value>0&&(0,_util.contains)(_this.statsToReport_,stat)){reportedStats[stat]=value;haveStatsToReport=true;}});if(haveStatsToReport){this.server_.reportStats(reportedStats);}// queue our next run.
setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(Math.random()*2*REPORT_STATS_INTERVAL));};return StatsReporter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 * @constructor
 */var EventQueue=/** @class */function(){function EventQueue(){/**
         * @private
         * @type {!Array.<EventList>}
         */this.eventLists_=[];/**
         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
         * @private
         * @type {!number}
         */this.recursionDepth_=0;}/**
     * @param {!Array.<Event>} eventDataList The new events to queue.
     */EventQueue.prototype.queueEvents=function(eventDataList){// We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
var currList=null;for(var i=0;i<eventDataList.length;i++){var eventData=eventDataList[i];var eventPath=eventData.getPath();if(currList!==null&&!eventPath.equals(currList.getPath())){this.eventLists_.push(currList);currList=null;}if(currList===null){currList=new EventList(eventPath);}currList.add(eventData);}if(currList){this.eventLists_.push(currList);}};/**
     * Queues the specified events and synchronously raises all events (including previously queued ones)
     * for the specified path.
     *
     * It is assumed that the new events are all for the specified path.
     *
     * @param {!Path} path The path to raise events for.
     * @param {!Array.<Event>} eventDataList The new events to raise.
     */EventQueue.prototype.raiseEventsAtPath=function(path,eventDataList){this.queueEvents(eventDataList);this.raiseQueuedEventsMatchingPredicate_(function(eventPath){return eventPath.equals(path);});};/**
     * Queues the specified events and synchronously raises all events (including previously queued ones) for
     * locations related to the specified change path (i.e. all ancestors and descendants).
     *
     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
     *
     * @param {!Path} changedPath The path to raise events for.
     * @param {!Array.<!Event>} eventDataList The events to raise
     */EventQueue.prototype.raiseEventsForChangedPath=function(changedPath,eventDataList){this.queueEvents(eventDataList);this.raiseQueuedEventsMatchingPredicate_(function(eventPath){return eventPath.contains(changedPath)||changedPath.contains(eventPath);});};/**
     * @param {!function(!Path):boolean} predicate
     * @private
     */EventQueue.prototype.raiseQueuedEventsMatchingPredicate_=function(predicate){this.recursionDepth_++;var sentAll=true;for(var i=0;i<this.eventLists_.length;i++){var eventList=this.eventLists_[i];if(eventList){var eventPath=eventList.getPath();if(predicate(eventPath)){this.eventLists_[i].raise();this.eventLists_[i]=null;}else{sentAll=false;}}}if(sentAll){this.eventLists_=[];}this.recursionDepth_--;};return EventQueue;}();/**
 * @param {!Path} path
 * @constructor
 */var EventList=/** @class */function(){function EventList(path_){this.path_=path_;/**
         * @type {!Array.<Event>}
         * @private
         */this.events_=[];}/**
     * @param {!Event} eventData
     */EventList.prototype.add=function(eventData){this.events_.push(eventData);};/**
     * Iterates through the list and raises each event
     */EventList.prototype.raise=function(){for(var i=0;i<this.events_.length;i++){var eventData=this.events_[i];if(eventData!==null){this.events_[i]=null;var eventFn=eventData.getEventRunner();if(logger){log('event: '+eventData.toString());}exceptionGuard(eventFn);}}};/**
     * @return {!Path}
     */EventList.prototype.getPath=function(){return this.path_;};return EventList;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */var EventEmitter=/** @class */function(){/**
     * @param {!Array.<string>} allowedEvents_
     */function EventEmitter(allowedEvents_){this.allowedEvents_=allowedEvents_;this.listeners_={};(0,_util.assert)(Array.isArray(allowedEvents_)&&allowedEvents_.length>0,'Requires a non-empty array');}/**
     * To be called by derived classes to trigger events.
     * @param {!string} eventType
     * @param {...*} varArgs
     */EventEmitter.prototype.trigger=function(eventType){var varArgs=[];for(var _i=1;_i<arguments.length;_i++){varArgs[_i-1]=arguments[_i];}if(Array.isArray(this.listeners_[eventType])){// Clone the list, since callbacks could add/remove listeners.
var listeners=(0,_tslib.__spread)(this.listeners_[eventType]);for(var i=0;i<listeners.length;i++){listeners[i].callback.apply(listeners[i].context,varArgs);}}};EventEmitter.prototype.on=function(eventType,callback,context){this.validateEventType_(eventType);this.listeners_[eventType]=this.listeners_[eventType]||[];this.listeners_[eventType].push({callback:callback,context:context});var eventData=this.getInitialEvent(eventType);if(eventData){callback.apply(context,eventData);}};EventEmitter.prototype.off=function(eventType,callback,context){this.validateEventType_(eventType);var listeners=this.listeners_[eventType]||[];for(var i=0;i<listeners.length;i++){if(listeners[i].callback===callback&&(!context||context===listeners[i].context)){listeners.splice(i,1);return;}}};EventEmitter.prototype.validateEventType_=function(eventType){(0,_util.assert)(this.allowedEvents_.find(function(et){return et===eventType;}),'Unknown event: '+eventType);};return EventEmitter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @extends {EventEmitter}
 */var VisibilityMonitor=/** @class */function(_super){(0,_tslib.__extends)(VisibilityMonitor,_super);function VisibilityMonitor(){var _this=_super.call(this,['visible'])||this;var hidden;var visibilityChange;if(typeof document!=='undefined'&&typeof document.addEventListener!=='undefined'){if(typeof document['hidden']!=='undefined'){// Opera 12.10 and Firefox 18 and later support
visibilityChange='visibilitychange';hidden='hidden';}else if(typeof document['mozHidden']!=='undefined'){visibilityChange='mozvisibilitychange';hidden='mozHidden';}else if(typeof document['msHidden']!=='undefined'){visibilityChange='msvisibilitychange';hidden='msHidden';}else if(typeof document['webkitHidden']!=='undefined'){visibilityChange='webkitvisibilitychange';hidden='webkitHidden';}}// Initially, we always assume we are visible. This ensures that in browsers
// without page visibility support or in cases where we are never visible
// (e.g. chrome extension), we act as if we are visible, i.e. don't delay
// reconnects
_this.visible_=true;if(visibilityChange){document.addEventListener(visibilityChange,function(){var visible=!document[hidden];if(visible!==_this.visible_){_this.visible_=visible;_this.trigger('visible',visible);}},false);}return _this;}VisibilityMonitor.getInstance=function(){return new VisibilityMonitor();};/**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */VisibilityMonitor.prototype.getInitialEvent=function(eventType){(0,_util.assert)(eventType==='visible','Unknown event type: '+eventType);return[this.visible_];};return VisibilityMonitor;}(EventEmitter);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 *
 * @extends {EventEmitter}
 */var OnlineMonitor=/** @class */function(_super){(0,_tslib.__extends)(OnlineMonitor,_super);function OnlineMonitor(){var _this=_super.call(this,['online'])||this;_this.online_=true;// We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
// https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
// It would seem that the 'online' event does not always fire consistently. So we disable it
// for Cordova.
if(typeof window!=='undefined'&&typeof window.addEventListener!=='undefined'&&!(0,_util.isMobileCordova)()){window.addEventListener('online',function(){if(!_this.online_){_this.online_=true;_this.trigger('online',true);}},false);window.addEventListener('offline',function(){if(_this.online_){_this.online_=false;_this.trigger('online',false);}},false);}return _this;}OnlineMonitor.getInstance=function(){return new OnlineMonitor();};/**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */OnlineMonitor.prototype.getInitialEvent=function(eventType){(0,_util.assert)(eventType==='online','Unknown event type: '+eventType);return[this.online_];};/**
     * @return {boolean}
     */OnlineMonitor.prototype.currentlyOnline=function(){return this.online_;};return OnlineMonitor;}(EventEmitter);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 * @constructor
 */var PacketReceiver=/** @class */function(){/**
     * @param onMessage_
     */function PacketReceiver(onMessage_){this.onMessage_=onMessage_;this.pendingResponses=[];this.currentResponseNum=0;this.closeAfterResponse=-1;this.onClose=null;}PacketReceiver.prototype.closeAfter=function(responseNum,callback){this.closeAfterResponse=responseNum;this.onClose=callback;if(this.closeAfterResponse<this.currentResponseNum){this.onClose();this.onClose=null;}};/**
     * Each message from the server comes with a response number, and an array of data. The responseNumber
     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
     * browsers will respond in the same order as the requests we sent
     * @param {number} requestNum
     * @param {Array} data
     */PacketReceiver.prototype.handleResponse=function(requestNum,data){var _this=this;this.pendingResponses[requestNum]=data;var _loop_1=function _loop_1(){var toProcess=this_1.pendingResponses[this_1.currentResponseNum];delete this_1.pendingResponses[this_1.currentResponseNum];var _loop_2=function _loop_2(i){if(toProcess[i]){exceptionGuard(function(){_this.onMessage_(toProcess[i]);});}};for(var i=0;i<toProcess.length;++i){_loop_2(i);}if(this_1.currentResponseNum===this_1.closeAfterResponse){if(this_1.onClose){this_1.onClose();this_1.onClose=null;}return"break";}this_1.currentResponseNum++;};var this_1=this;while(this.pendingResponses[this.currentResponseNum]){var state_1=_loop_1();if(state_1==="break")break;}};return PacketReceiver;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // URL query parameters associated with longpolling
var FIREBASE_LONGPOLL_START_PARAM='start';var FIREBASE_LONGPOLL_CLOSE_COMMAND='close';var FIREBASE_LONGPOLL_COMMAND_CB_NAME='pLPCommand';var FIREBASE_LONGPOLL_DATA_CB_NAME='pRTLPCB';var FIREBASE_LONGPOLL_ID_PARAM='id';var FIREBASE_LONGPOLL_PW_PARAM='pw';var FIREBASE_LONGPOLL_SERIAL_PARAM='ser';var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM='cb';var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM='seg';var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET='ts';var FIREBASE_LONGPOLL_DATA_PARAM='d';var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM='dframe';//Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.
var MAX_URL_DATA_SIZE=1870;var SEG_HEADER_SIZE=30;//ie: &seg=8299234&ts=982389123&d=
var MAX_PAYLOAD_SIZE=MAX_URL_DATA_SIZE-SEG_HEADER_SIZE;/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 * @const
 * @type {number}
 */var KEEPALIVE_REQUEST_INTERVAL=25000;/**
 * How long to wait before aborting a long-polling connection attempt.
 * @const
 * @type {number}
 */var LP_CONNECT_TIMEOUT=30000;/**
 * This class manages a single long-polling connection.
 *
 * @constructor
 * @implements {Transport}
 */var BrowserPollConnection=/** @class */function(){/**
     * @param connId An identifier for this connection, used for logging
     * @param repoInfo The info for the endpoint to send data to.
     * @param applicationId The Firebase App ID for this project.
     * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing
     *                                         transport session
     * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a
     *                                     connection previously
     */function BrowserPollConnection(connId,repoInfo,applicationId,transportSessionId,lastSessionId){this.connId=connId;this.repoInfo=repoInfo;this.applicationId=applicationId;this.transportSessionId=transportSessionId;this.lastSessionId=lastSessionId;this.bytesSent=0;this.bytesReceived=0;this.everConnected_=false;this.log_=logWrapper(connId);this.stats_=StatsManager.getCollection(repoInfo);this.urlFn=function(params){return repoInfo.connectionURL(LONG_POLLING,params);};}/**
     *
     * @param {function(Object)} onMessage Callback when messages arrive
     * @param {function()} onDisconnect Callback with connection lost.
     */BrowserPollConnection.prototype.open=function(onMessage,onDisconnect){var _this=this;this.curSegmentNum=0;this.onDisconnect_=onDisconnect;this.myPacketOrderer=new PacketReceiver(onMessage);this.isClosed_=false;this.connectTimeoutTimer_=setTimeout(function(){_this.log_('Timed out trying to connect.');// Make sure we clear the host cache
_this.onClosed_();_this.connectTimeoutTimer_=null;// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(LP_CONNECT_TIMEOUT));// Ensure we delay the creation of the iframe until the DOM is loaded.
executeWhenDOMReady(function(){if(_this.isClosed_){return;}//Set up a callback that gets triggered once a connection is set up.
_this.scriptTagHolder=new FirebaseIFrameScriptHolder(function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}var _a=(0,_tslib.__read)(args,5),command=_a[0],arg1=_a[1],arg2=_a[2],arg3=_a[3],arg4=_a[4];_this.incrementIncomingBytes_(args);if(!_this.scriptTagHolder){return;// we closed the connection.
}if(_this.connectTimeoutTimer_){clearTimeout(_this.connectTimeoutTimer_);_this.connectTimeoutTimer_=null;}_this.everConnected_=true;if(command===FIREBASE_LONGPOLL_START_PARAM){_this.id=arg1;_this.password=arg2;}else if(command===FIREBASE_LONGPOLL_CLOSE_COMMAND){// Don't clear the host cache. We got a response from the server, so we know it's reachable
if(arg1){// We aren't expecting any more data (other than what the server's already in the process of sending us
// through our already open polls), so don't send any more.
_this.scriptTagHolder.sendNewPolls=false;// arg1 in this case is the last response number sent by the server. We should try to receive
// all of the responses up to this one before closing
_this.myPacketOrderer.closeAfter(arg1,function(){_this.onClosed_();});}else{_this.onClosed_();}}else{throw new Error('Unrecognized command received: '+command);}},function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}var _a=(0,_tslib.__read)(args,2),pN=_a[0],data=_a[1];_this.incrementIncomingBytes_(args);_this.myPacketOrderer.handleResponse(pN,data);},function(){_this.onClosed_();},_this.urlFn);//Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
//from cache.
var urlParams={};urlParams[FIREBASE_LONGPOLL_START_PARAM]='t';urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=Math.floor(Math.random()*100000000);if(_this.scriptTagHolder.uniqueCallbackIdentifier){urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM]=_this.scriptTagHolder.uniqueCallbackIdentifier;}urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(_this.transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=_this.transportSessionId;}if(_this.lastSessionId){urlParams[LAST_SESSION_PARAM]=_this.lastSessionId;}if(_this.applicationId){urlParams[APPLICATION_ID_PARAM]=_this.applicationId;}if(typeof location!=='undefined'&&location.hostname&&FORGE_DOMAIN_RE.test(location.hostname)){urlParams[REFERER_PARAM]=FORGE_REF;}var connectURL=_this.urlFn(urlParams);_this.log_('Connecting via long-poll to '+connectURL);_this.scriptTagHolder.addTag(connectURL,function(){/* do nothing */});});};/**
     * Call this when a handshake has completed successfully and we want to consider the connection established
     */BrowserPollConnection.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password);this.addDisconnectPingFrame(this.id,this.password);};/**
     * Forces long polling to be considered as a potential transport
     */BrowserPollConnection.forceAllow=function(){BrowserPollConnection.forceAllow_=true;};/**
     * Forces longpolling to not be considered as a potential transport
     */BrowserPollConnection.forceDisallow=function(){BrowserPollConnection.forceDisallow_=true;};// Static method, use string literal so it can be accessed in a generic way
BrowserPollConnection.isAvailable=function(){if((0,_util.isNodeSdk)()){return false;}else if(BrowserPollConnection.forceAllow_){return true;}else{// NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
// the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
return!BrowserPollConnection.forceDisallow_&&typeof document!=='undefined'&&document.createElement!=null&&!isChromeExtensionContentScript()&&!isWindowsStoreApp();}};/**
     * No-op for polling
     */BrowserPollConnection.prototype.markConnectionHealthy=function(){};/**
     * Stops polling and cleans up the iframe
     * @private
     */BrowserPollConnection.prototype.shutdown_=function(){this.isClosed_=true;if(this.scriptTagHolder){this.scriptTagHolder.close();this.scriptTagHolder=null;}//remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
if(this.myDisconnFrame){document.body.removeChild(this.myDisconnFrame);this.myDisconnFrame=null;}if(this.connectTimeoutTimer_){clearTimeout(this.connectTimeoutTimer_);this.connectTimeoutTimer_=null;}};/**
     * Triggered when this transport is closed
     * @private
     */BrowserPollConnection.prototype.onClosed_=function(){if(!this.isClosed_){this.log_('Longpoll is closing itself');this.shutdown_();if(this.onDisconnect_){this.onDisconnect_(this.everConnected_);this.onDisconnect_=null;}}};/**
     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
     * that we've left.
     */BrowserPollConnection.prototype.close=function(){if(!this.isClosed_){this.log_('Longpoll is being closed.');this.shutdown_();}};/**
     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
     * broken into chunks (since URLs have a small maximum length).
     * @param {!Object} data The JSON data to transmit.
     */BrowserPollConnection.prototype.send=function(data){var dataStr=(0,_util.stringify)(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//first, lets get the base64-encoded data
var base64data=(0,_util.base64Encode)(dataStr);//We can only fit a certain amount in each URL, so we need to split this request
//up into multiple pieces if it doesn't fit in one request.
var dataSegs=splitStringBySize(base64data,MAX_PAYLOAD_SIZE);//Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
//of segments so that we can reassemble the packet on the server.
for(var i=0;i<dataSegs.length;i++){this.scriptTagHolder.enqueueSegment(this.curSegmentNum,dataSegs.length,dataSegs[i]);this.curSegmentNum++;}};/**
     * This is how we notify the server that we're leaving.
     * We aren't able to send requests with DHTML on a window close event, but we can
     * trigger XHR requests in some browsers (everything but Opera basically).
     * @param {!string} id
     * @param {!string} pw
     */BrowserPollConnection.prototype.addDisconnectPingFrame=function(id,pw){if((0,_util.isNodeSdk)()){return;}this.myDisconnFrame=document.createElement('iframe');var urlParams={};urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM]='t';urlParams[FIREBASE_LONGPOLL_ID_PARAM]=id;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=pw;this.myDisconnFrame.src=this.urlFn(urlParams);this.myDisconnFrame.style.display='none';document.body.appendChild(this.myDisconnFrame);};/**
     * Used to track the bytes received by this client
     * @param {*} args
     * @private
     */BrowserPollConnection.prototype.incrementIncomingBytes_=function(args){// TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
var bytesReceived=(0,_util.stringify)(args).length;this.bytesReceived+=bytesReceived;this.stats_.incrementCounter('bytes_received',bytesReceived);};return BrowserPollConnection;}();/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 * @constructor
 *********************************************************************************************/var FirebaseIFrameScriptHolder=/** @class */function(){/**
     * @param commandCB - The callback to be called when control commands are recevied from the server.
     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
     * @param onDisconnect - The callback to be triggered when this tag holder is closed
     * @param urlFn - A function that provides the URL of the endpoint to send data to.
     */function FirebaseIFrameScriptHolder(commandCB,onMessageCB,onDisconnect,urlFn){this.onDisconnect=onDisconnect;this.urlFn=urlFn;//We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
//problems in some browsers.
this.outstandingRequests=new Set();//A queue of the pending segments waiting for transmission to the server.
this.pendingSegs=[];//A serial number. We use this for two things:
// 1) A way to ensure the browser doesn't cache responses to polls
// 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
//    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
//    JSONP code in the order it was added to the iframe.
this.currentSerial=Math.floor(Math.random()*100000000);// This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
// incoming data from the server that we're waiting for).
this.sendNewPolls=true;if(!(0,_util.isNodeSdk)()){//Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
//iframes where we put the long-polling script tags. We have two callbacks:
//   1) Command Callback - Triggered for control issues, like starting a connection.
//   2) Message Callback - Triggered when new data arrives.
this.uniqueCallbackIdentifier=LUIDGenerator();window[FIREBASE_LONGPOLL_COMMAND_CB_NAME+this.uniqueCallbackIdentifier]=commandCB;window[FIREBASE_LONGPOLL_DATA_CB_NAME+this.uniqueCallbackIdentifier]=onMessageCB;//Create an iframe for us to add script tags to.
this.myIFrame=FirebaseIFrameScriptHolder.createIFrame_();// Set the iframe's contents.
var script='';// if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
// for ie9, but ie8 needs to do it again in the document itself.
if(this.myIFrame.src&&this.myIFrame.src.substr(0,'javascript:'.length)==='javascript:'){var currentDomain=document.domain;script='<script>document.domain="'+currentDomain+'";</script>';}var iframeContents='<html><body>'+script+'</body></html>';try{this.myIFrame.doc.open();this.myIFrame.doc.write(iframeContents);this.myIFrame.doc.close();}catch(e){log('frame writing exception');if(e.stack){log(e.stack);}log(e);}}else{this.commandCB=commandCB;this.onMessageCB=onMessageCB;}}/**
     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
     * actually use.
     * @private
     * @return {Element}
     */FirebaseIFrameScriptHolder.createIFrame_=function(){var iframe=document.createElement('iframe');iframe.style.display='none';// This is necessary in order to initialize the document inside the iframe
if(document.body){document.body.appendChild(iframe);try{// If document.domain has been modified in IE, this will throw an error, and we need to set the
// domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
// Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
var a=iframe.contentWindow.document;if(!a){// Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
log('No IE domain setting required');}}catch(e){var domain=document.domain;iframe.src="javascript:void((function(){document.open();document.domain='"+domain+"';document.close();})())";}}else{// LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
// never gets hit.
throw'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';}// Get the document of the iframe in a browser-specific way.
if(iframe.contentDocument){iframe.doc=iframe.contentDocument;// Firefox, Opera, Safari
}else if(iframe.contentWindow){iframe.doc=iframe.contentWindow.document;// Internet Explorer
// eslint-disable-next-line @typescript-eslint/no-explicit-any
}else if(iframe.document){// eslint-disable-next-line @typescript-eslint/no-explicit-any
iframe.doc=iframe.document;//others?
}return iframe;};/**
     * Cancel all outstanding queries and remove the frame.
     */FirebaseIFrameScriptHolder.prototype.close=function(){var _this=this;//Mark this iframe as dead, so no new requests are sent.
this.alive=false;if(this.myIFrame){//We have to actually remove all of the html inside this iframe before removing it from the
//window, or IE will continue loading and executing the script tags we've already added, which
//can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
this.myIFrame.doc.body.innerHTML='';setTimeout(function(){if(_this.myIFrame!==null){document.body.removeChild(_this.myIFrame);_this.myIFrame=null;}},Math.floor(0));}// Protect from being called recursively.
var onDisconnect=this.onDisconnect;if(onDisconnect){this.onDisconnect=null;onDisconnect();}};/**
     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
     * @param {!string} id - The ID of this connection
     * @param {!string} pw - The password for this connection
     */FirebaseIFrameScriptHolder.prototype.startLongPoll=function(id,pw){this.myID=id;this.myPW=pw;this.alive=true;//send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
while(this.newRequest_()){}};/**
     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
     * too many outstanding requests and we are still alive.
     *
     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
     * needed.
     */FirebaseIFrameScriptHolder.prototype.newRequest_=function(){// We keep one outstanding request open all the time to receive data, but if we need to send data
// (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
// close the old request.
if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){//construct our url
this.currentSerial++;var urlParams={};urlParams[FIREBASE_LONGPOLL_ID_PARAM]=this.myID;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=this.myPW;urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=this.currentSerial;var theURL=this.urlFn(urlParams);//Now add as much data as we can.
var curDataString='';var i=0;while(this.pendingSegs.length>0){//first, lets see if the next segment will fit.
var nextSeg=this.pendingSegs[0];if(nextSeg.d.length+SEG_HEADER_SIZE+curDataString.length<=MAX_URL_DATA_SIZE){//great, the segment will fit. Lets append it.
var theSeg=this.pendingSegs.shift();curDataString=curDataString+'&'+FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM+i+'='+theSeg.seg+'&'+FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET+i+'='+theSeg.ts+'&'+FIREBASE_LONGPOLL_DATA_PARAM+i+'='+theSeg.d;i++;}else{break;}}theURL=theURL+curDataString;this.addLongPollTag_(theURL,this.currentSerial);return true;}else{return false;}};/**
     * Queue a packet for transmission to the server.
     * @param segnum - A sequential id for this packet segment used for reassembly
     * @param totalsegs - The total number of segments in this packet
     * @param data - The data for this segment.
     */FirebaseIFrameScriptHolder.prototype.enqueueSegment=function(segnum,totalsegs,data){//add this to the queue of segments to send.
this.pendingSegs.push({seg:segnum,ts:totalsegs,d:data});//send the data immediately if there isn't already data being transmitted, unless
//startLongPoll hasn't been called yet.
if(this.alive){this.newRequest_();}};/**
     * Add a script tag for a regular long-poll request.
     * @param {!string} url - The URL of the script tag.
     * @param {!number} serial - The serial number of the request.
     * @private
     */FirebaseIFrameScriptHolder.prototype.addLongPollTag_=function(url,serial){var _this=this;//remember that we sent this request.
this.outstandingRequests.add(serial);var doNewRequest=function doNewRequest(){_this.outstandingRequests["delete"](serial);_this.newRequest_();};// If this request doesn't return on its own accord (by the server sending us some data), we'll
// create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
var keepaliveTimeout=setTimeout(doNewRequest,Math.floor(KEEPALIVE_REQUEST_INTERVAL));var readyStateCB=function readyStateCB(){// Request completed.  Cancel the keepalive.
clearTimeout(keepaliveTimeout);// Trigger a new request so we can continue receiving data.
doNewRequest();};this.addTag(url,readyStateCB);};/**
     * Add an arbitrary script tag to the iframe.
     * @param {!string} url - The URL for the script tag source.
     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
     */FirebaseIFrameScriptHolder.prototype.addTag=function(url,loadCB){var _this=this;if((0,_util.isNodeSdk)()){// eslint-disable-next-line @typescript-eslint/no-explicit-any
this.doNodeLongPoll(url,loadCB);}else{setTimeout(function(){try{// if we're already closed, don't add this poll
if(!_this.sendNewPolls){return;}var newScript_1=_this.myIFrame.doc.createElement('script');newScript_1.type='text/javascript';newScript_1.async=true;newScript_1.src=url;// eslint-disable-next-line @typescript-eslint/no-explicit-any
newScript_1.onload=newScript_1.onreadystatechange=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
var rstate=newScript_1.readyState;if(!rstate||rstate==='loaded'||rstate==='complete'){// eslint-disable-next-line @typescript-eslint/no-explicit-any
newScript_1.onload=newScript_1.onreadystatechange=null;if(newScript_1.parentNode){newScript_1.parentNode.removeChild(newScript_1);}loadCB();}};newScript_1.onerror=function(){log('Long-poll script failed to load: '+url);_this.sendNewPolls=false;_this.close();};_this.myIFrame.doc.body.appendChild(newScript_1);}catch(e){// TODO: we should make this error visible somehow
}},Math.floor(1));}};return FirebaseIFrameScriptHolder;}();/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The semver (www.semver.org) version of the SDK. */var SDK_VERSION='';// SDK_VERSION should be set before any database instance is created
function setSDKVersion(version){SDK_VERSION=version;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var WEBSOCKET_MAX_FRAME_SIZE=16384;var WEBSOCKET_KEEPALIVE_INTERVAL=45000;var WebSocketImpl=null;if(typeof MozWebSocket!=='undefined'){WebSocketImpl=MozWebSocket;}else if(typeof WebSocket!=='undefined'){WebSocketImpl=WebSocket;}/**
 * Create a new websocket connection with the given callbacks.
 * @constructor
 * @implements {Transport}
 */var WebSocketConnection=/** @class */function(){/**
     * @param connId identifier for this transport
     * @param repoInfo The info for the websocket endpoint.
     * @param applicationId The Firebase App ID for this project.
     * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param lastSessionId Optional lastSessionId if there was a previous connection
     */function WebSocketConnection(connId,repoInfo,applicationId,transportSessionId,lastSessionId){this.connId=connId;this.applicationId=applicationId;this.keepaliveTimer=null;this.frames=null;this.totalFrames=0;this.bytesSent=0;this.bytesReceived=0;this.log_=logWrapper(this.connId);this.stats_=StatsManager.getCollection(repoInfo);this.connURL=WebSocketConnection.connectionURL_(repoInfo,transportSessionId,lastSessionId);this.nodeAdmin=repoInfo.nodeAdmin;}/**
     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
     * @return {string} connection url
     * @private
     */WebSocketConnection.connectionURL_=function(repoInfo,transportSessionId,lastSessionId){var urlParams={};urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(!(0,_util.isNodeSdk)()&&typeof location!=='undefined'&&location.hostname&&FORGE_DOMAIN_RE.test(location.hostname)){urlParams[REFERER_PARAM]=FORGE_REF;}if(transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=transportSessionId;}if(lastSessionId){urlParams[LAST_SESSION_PARAM]=lastSessionId;}return repoInfo.connectionURL(WEBSOCKET,urlParams);};/**
     *
     * @param onMessage Callback when messages arrive
     * @param onDisconnect Callback with connection lost.
     */WebSocketConnection.prototype.open=function(onMessage,onDisconnect){var _this=this;this.onDisconnect=onDisconnect;this.onMessage=onMessage;this.log_('Websocket connecting to '+this.connURL);this.everConnected_=false;// Assume failure until proven otherwise.
PersistentStorage.set('previous_websocket_failure',true);try{if((0,_util.isNodeSdk)()){var device=this.nodeAdmin?'AdminNode':'Node';// UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
var options={headers:{'User-Agent':"Firebase/"+PROTOCOL_VERSION+"/"+SDK_VERSION+"/"+process.platform+"/"+device,'X-Firebase-GMPID':this.applicationId||''}};// Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
var env=process['env'];var proxy=this.connURL.indexOf('wss://')===0?env['HTTPS_PROXY']||env['https_proxy']:env['HTTP_PROXY']||env['http_proxy'];if(proxy){options['proxy']={origin:proxy};}this.mySock=new WebSocketImpl(this.connURL,[],options);}else{var options={headers:{'X-Firebase-GMPID':this.applicationId||''}};this.mySock=new WebSocketImpl(this.connURL,[],options);}}catch(e){this.log_('Error instantiating WebSocket.');var error=e.message||e.data;if(error){this.log_(error);}this.onClosed_();return;}this.mySock.onopen=function(){_this.log_('Websocket connected.');_this.everConnected_=true;};this.mySock.onclose=function(){_this.log_('Websocket connection was disconnected.');_this.mySock=null;_this.onClosed_();};this.mySock.onmessage=function(m){_this.handleIncomingFrame(m);};this.mySock.onerror=function(e){_this.log_('WebSocket error.  Closing connection.');// eslint-disable-next-line @typescript-eslint/no-explicit-any
var error=e.message||e.data;if(error){_this.log_(error);}_this.onClosed_();};};/**
     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
     */WebSocketConnection.prototype.start=function(){};WebSocketConnection.forceDisallow=function(){WebSocketConnection.forceDisallow_=true;};WebSocketConnection.isAvailable=function(){var isOldAndroid=false;if(typeof navigator!=='undefined'&&navigator.userAgent){var oldAndroidRegex=/Android ([0-9]{0,}\.[0-9]{0,})/;var oldAndroidMatch=navigator.userAgent.match(oldAndroidRegex);if(oldAndroidMatch&&oldAndroidMatch.length>1){if(parseFloat(oldAndroidMatch[1])<4.4){isOldAndroid=true;}}}return!isOldAndroid&&WebSocketImpl!==null&&!WebSocketConnection.forceDisallow_;};/**
     * Returns true if we previously failed to connect with this transport.
     * @return {boolean}
     */WebSocketConnection.previouslyFailed=function(){// If our persistent storage is actually only in-memory storage,
// we default to assuming that it previously failed to be safe.
return PersistentStorage.isInMemoryStorage||PersistentStorage.get('previous_websocket_failure')===true;};WebSocketConnection.prototype.markConnectionHealthy=function(){PersistentStorage.remove('previous_websocket_failure');};WebSocketConnection.prototype.appendFrame_=function(data){this.frames.push(data);if(this.frames.length===this.totalFrames){var fullMess=this.frames.join('');this.frames=null;var jsonMess=(0,_util.jsonEval)(fullMess);//handle the message
this.onMessage(jsonMess);}};/**
     * @param {number} frameCount The number of frames we are expecting from the server
     * @private
     */WebSocketConnection.prototype.handleNewFrameCount_=function(frameCount){this.totalFrames=frameCount;this.frames=[];};/**
     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
     * @param {!String} data
     * @return {?String} Any remaining data to be process, or null if there is none
     * @private
     */WebSocketConnection.prototype.extractFrameCount_=function(data){(0,_util.assert)(this.frames===null,'We already have a frame buffer');// TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
// currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
if(data.length<=6){var frameCount=Number(data);if(!isNaN(frameCount)){this.handleNewFrameCount_(frameCount);return null;}}this.handleNewFrameCount_(1);return data;};/**
     * Process a websocket frame that has arrived from the server.
     * @param mess The frame data
     */WebSocketConnection.prototype.handleIncomingFrame=function(mess){if(this.mySock===null){return;// Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
}var data=mess['data'];this.bytesReceived+=data.length;this.stats_.incrementCounter('bytes_received',data.length);this.resetKeepAlive();if(this.frames!==null){// we're buffering
this.appendFrame_(data);}else{// try to parse out a frame count, otherwise, assume 1 and process it
var remainingData=this.extractFrameCount_(data);if(remainingData!==null){this.appendFrame_(remainingData);}}};/**
     * Send a message to the server
     * @param {Object} data The JSON object to transmit
     */WebSocketConnection.prototype.send=function(data){this.resetKeepAlive();var dataStr=(0,_util.stringify)(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//We can only fit a certain amount in each websocket frame, so we need to split this request
//up into multiple pieces if it doesn't fit in one request.
var dataSegs=splitStringBySize(dataStr,WEBSOCKET_MAX_FRAME_SIZE);//Send the length header
if(dataSegs.length>1){this.sendString_(String(dataSegs.length));}//Send the actual data in segments.
for(var i=0;i<dataSegs.length;i++){this.sendString_(dataSegs[i]);}};WebSocketConnection.prototype.shutdown_=function(){this.isClosed_=true;if(this.keepaliveTimer){clearInterval(this.keepaliveTimer);this.keepaliveTimer=null;}if(this.mySock){this.mySock.close();this.mySock=null;}};WebSocketConnection.prototype.onClosed_=function(){if(!this.isClosed_){this.log_('WebSocket is closing itself');this.shutdown_();// since this is an internal close, trigger the close listener
if(this.onDisconnect){this.onDisconnect(this.everConnected_);this.onDisconnect=null;}}};/**
     * External-facing close handler.
     * Close the websocket and kill the connection.
     */WebSocketConnection.prototype.close=function(){if(!this.isClosed_){this.log_('WebSocket is being closed');this.shutdown_();}};/**
     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
     * the last activity.
     */WebSocketConnection.prototype.resetKeepAlive=function(){var _this=this;clearInterval(this.keepaliveTimer);this.keepaliveTimer=setInterval(function(){//If there has been no websocket activity for a while, send a no-op
if(_this.mySock){_this.sendString_('0');}_this.resetKeepAlive();// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));};/**
     * Send a string over the websocket.
     *
     * @param {string} str String to send.
     * @private
     */WebSocketConnection.prototype.sendString_=function(str){// Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
// calls for some unknown reason.  We treat these as an error and disconnect.
// See https://app.asana.com/0/58926111402292/68021340250410
try{this.mySock.send(str);}catch(e){this.log_('Exception thrown from WebSocket.send():',e.message||e.data,'Closing connection.');setTimeout(this.onClosed_.bind(this),0);}};/**
     * Number of response before we consider the connection "healthy."
     * @type {number}
     */WebSocketConnection.responsesRequiredToBeHealthy=2;/**
     * Time to wait for the connection te become healthy before giving up.
     * @type {number}
     */WebSocketConnection.healthyTimeout=30000;return WebSocketConnection;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 * @constructor
 */var TransportManager=/** @class */function(){/**
     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
     */function TransportManager(repoInfo){this.initTransports_(repoInfo);}Object.defineProperty(TransportManager,"ALL_TRANSPORTS",{/**
         * @const
         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
         */get:function get(){return[BrowserPollConnection,WebSocketConnection];},enumerable:false,configurable:true});/**
     * @param {!RepoInfo} repoInfo
     * @private
     */TransportManager.prototype.initTransports_=function(repoInfo){var e_1,_a;var isWebSocketsAvailable=WebSocketConnection&&WebSocketConnection['isAvailable']();var isSkipPollConnection=isWebSocketsAvailable&&!WebSocketConnection.previouslyFailed();if(repoInfo.webSocketOnly){if(!isWebSocketsAvailable){warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");}isSkipPollConnection=true;}if(isSkipPollConnection){this.transports_=[WebSocketConnection];}else{var transports=this.transports_=[];try{for(var _b=(0,_tslib.__values)(TransportManager.ALL_TRANSPORTS),_c=_b.next();!_c.done;_c=_b.next()){var transport=_c.value;if(transport&&transport['isAvailable']()){transports.push(transport);}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b["return"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}}};/**
     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
     * initial transport to use
     */TransportManager.prototype.initialTransport=function(){if(this.transports_.length>0){return this.transports_[0];}else{throw new Error('No transports available');}};/**
     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
     * transport, or null
     */TransportManager.prototype.upgradeTransport=function(){if(this.transports_.length>1){return this.transports_[1];}else{return null;}};return TransportManager;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Abort upgrade attempt if it takes longer than 60s.
var UPGRADE_TIMEOUT=60000;// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
var DELAY_BEFORE_SENDING_EXTRA_REQUESTS=5000;// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.
var BYTES_SENT_HEALTHY_OVERRIDE=10*1024;var BYTES_RECEIVED_HEALTHY_OVERRIDE=100*1024;var MESSAGE_TYPE='t';var MESSAGE_DATA='d';var CONTROL_SHUTDOWN='s';var CONTROL_RESET='r';var CONTROL_ERROR='e';var CONTROL_PONG='o';var SWITCH_ACK='a';var END_TRANSMISSION='n';var PING='p';var SERVER_HELLO='h';/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 *
 * @constructor
 */var Connection=/** @class */function(){/**
     * @param id - an id for this connection
     * @param repoInfo_ - the info for the endpoint to connect to
     * @param applicationId_ - the Firebase App ID for this project
     * @param onMessage_ - the callback to be triggered when a server-push message arrives
     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
     * @param onDisconnect_ - the callback to be triggered when a connection was lost
     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
     */function Connection(id,repoInfo_,applicationId_,onMessage_,onReady_,onDisconnect_,onKill_,lastSessionId){this.id=id;this.repoInfo_=repoInfo_;this.applicationId_=applicationId_;this.onMessage_=onMessage_;this.onReady_=onReady_;this.onDisconnect_=onDisconnect_;this.onKill_=onKill_;this.lastSessionId=lastSessionId;this.connectionCount=0;this.pendingDataMessages=[];this.state_=0/* CONNECTING */;this.log_=logWrapper('c:'+this.id+':');this.transportManager_=new TransportManager(repoInfo_);this.log_('Connection created');this.start_();}/**
     * Starts a connection attempt
     * @private
     */Connection.prototype.start_=function(){var _this=this;var conn=this.transportManager_.initialTransport();this.conn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,undefined,this.lastSessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we
// can consider the transport healthy.
this.primaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;var onMessageReceived=this.connReceiver_(this.conn_);var onConnectionLost=this.disconnReceiver_(this.conn_);this.tx_=this.conn_;this.rx_=this.conn_;this.secondaryConn_=null;this.isHealthy_=false;/*
         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
         * still have the context of your originating frame.
         */setTimeout(function(){// this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
_this.conn_&&_this.conn_.open(onMessageReceived,onConnectionLost);},Math.floor(0));var healthyTimeoutMS=conn['healthyTimeout']||0;if(healthyTimeoutMS>0){this.healthyTimeout_=setTimeoutNonBlocking(function(){_this.healthyTimeout_=null;if(!_this.isHealthy_){if(_this.conn_&&_this.conn_.bytesReceived>BYTES_RECEIVED_HEALTHY_OVERRIDE){_this.log_('Connection exceeded healthy timeout but has received '+_this.conn_.bytesReceived+' bytes.  Marking connection healthy.');_this.isHealthy_=true;_this.conn_.markConnectionHealthy();}else if(_this.conn_&&_this.conn_.bytesSent>BYTES_SENT_HEALTHY_OVERRIDE){_this.log_('Connection exceeded healthy timeout but has sent '+_this.conn_.bytesSent+' bytes.  Leaving connection alive.');// NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
// the server.
}else{_this.log_('Closing unhealthy connection after timeout.');_this.close();}}// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(healthyTimeoutMS));}};/**
     * @return {!string}
     * @private
     */Connection.prototype.nextTransportId_=function(){return'c:'+this.id+':'+this.connectionCount++;};Connection.prototype.disconnReceiver_=function(conn){var _this=this;return function(everConnected){if(conn===_this.conn_){_this.onConnectionLost_(everConnected);}else if(conn===_this.secondaryConn_){_this.log_('Secondary connection lost.');_this.onSecondaryConnectionLost_();}else{_this.log_('closing an old connection');}};};Connection.prototype.connReceiver_=function(conn){var _this=this;return function(message){if(_this.state_!==2/* DISCONNECTED */){if(conn===_this.rx_){_this.onPrimaryMessageReceived_(message);}else if(conn===_this.secondaryConn_){_this.onSecondaryMessageReceived_(message);}else{_this.log_('message on old connection');}}};};/**
     *
     * @param {Object} dataMsg An arbitrary data message to be sent to the server
     */Connection.prototype.sendRequest=function(dataMsg){// wrap in a data message envelope and send it on
var msg={t:'d',d:dataMsg};this.sendData_(msg);};Connection.prototype.tryCleanupConnection=function(){if(this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_){this.log_('cleaning up and promoting a connection: '+this.secondaryConn_.connId);this.conn_=this.secondaryConn_;this.secondaryConn_=null;// the server will shutdown the old connection
}};Connection.prototype.onSecondaryControl_=function(controlData){if(MESSAGE_TYPE in controlData){var cmd=controlData[MESSAGE_TYPE];if(cmd===SWITCH_ACK){this.upgradeIfSecondaryHealthy_();}else if(cmd===CONTROL_RESET){// Most likely the session wasn't valid. Abandon the switch attempt
this.log_('Got a reset on secondary, closing it');this.secondaryConn_.close();// If we were already using this connection for something, than we need to fully close
if(this.tx_===this.secondaryConn_||this.rx_===this.secondaryConn_){this.close();}}else if(cmd===CONTROL_PONG){this.log_('got pong on secondary.');this.secondaryResponsesRequired_--;this.upgradeIfSecondaryHealthy_();}}};Connection.prototype.onSecondaryMessageReceived_=function(parsedData){var layer=requireKey('t',parsedData);var data=requireKey('d',parsedData);if(layer==='c'){this.onSecondaryControl_(data);}else if(layer==='d'){// got a data message, but we're still second connection. Need to buffer it up
this.pendingDataMessages.push(data);}else{throw new Error('Unknown protocol layer: '+layer);}};Connection.prototype.upgradeIfSecondaryHealthy_=function(){if(this.secondaryResponsesRequired_<=0){this.log_('Secondary connection is healthy.');this.isHealthy_=true;this.secondaryConn_.markConnectionHealthy();this.proceedWithUpgrade_();}else{// Send a ping to make sure the connection is healthy.
this.log_('sending ping on secondary.');this.secondaryConn_.send({t:'c',d:{t:PING,d:{}}});}};Connection.prototype.proceedWithUpgrade_=function(){// tell this connection to consider itself open
this.secondaryConn_.start();// send ack
this.log_('sending client ack on secondary');this.secondaryConn_.send({t:'c',d:{t:SWITCH_ACK,d:{}}});// send end packet on primary transport, switch to sending on this one
// can receive on this one, buffer responses until end received on primary transport
this.log_('Ending transmission on primary');this.conn_.send({t:'c',d:{t:END_TRANSMISSION,d:{}}});this.tx_=this.secondaryConn_;this.tryCleanupConnection();};Connection.prototype.onPrimaryMessageReceived_=function(parsedData){// Must refer to parsedData properties in quotes, so closure doesn't touch them.
var layer=requireKey('t',parsedData);var data=requireKey('d',parsedData);if(layer==='c'){this.onControl_(data);}else if(layer==='d'){this.onDataMessage_(data);}};Connection.prototype.onDataMessage_=function(message){this.onPrimaryResponse_();// We don't do anything with data messages, just kick them up a level
this.onMessage_(message);};Connection.prototype.onPrimaryResponse_=function(){if(!this.isHealthy_){this.primaryResponsesRequired_--;if(this.primaryResponsesRequired_<=0){this.log_('Primary connection is healthy.');this.isHealthy_=true;this.conn_.markConnectionHealthy();}}};Connection.prototype.onControl_=function(controlData){var cmd=requireKey(MESSAGE_TYPE,controlData);if(MESSAGE_DATA in controlData){var payload=controlData[MESSAGE_DATA];if(cmd===SERVER_HELLO){this.onHandshake_(payload);}else if(cmd===END_TRANSMISSION){this.log_('recvd end transmission on primary');this.rx_=this.secondaryConn_;for(var i=0;i<this.pendingDataMessages.length;++i){this.onDataMessage_(this.pendingDataMessages[i]);}this.pendingDataMessages=[];this.tryCleanupConnection();}else if(cmd===CONTROL_SHUTDOWN){// This was previously the 'onKill' callback passed to the lower-level connection
// payload in this case is the reason for the shutdown. Generally a human-readable error
this.onConnectionShutdown_(payload);}else if(cmd===CONTROL_RESET){// payload in this case is the host we should contact
this.onReset_(payload);}else if(cmd===CONTROL_ERROR){error('Server Error: '+payload);}else if(cmd===CONTROL_PONG){this.log_('got pong on primary.');this.onPrimaryResponse_();this.sendPingOnPrimaryIfNecessary_();}else{error('Unknown control packet command: '+cmd);}}};/**
     *
     * @param {Object} handshake The handshake data returned from the server
     * @private
     */Connection.prototype.onHandshake_=function(handshake){var timestamp=handshake.ts;var version=handshake.v;var host=handshake.h;this.sessionId=handshake.s;this.repoInfo_.updateHost(host);// if we've already closed the connection, then don't bother trying to progress further
if(this.state_===0/* CONNECTING */){this.conn_.start();this.onConnectionEstablished_(this.conn_,timestamp);if(PROTOCOL_VERSION!==version){warn('Protocol version mismatch detected');}// TODO: do we want to upgrade? when? maybe a delay?
this.tryStartUpgrade_();}};Connection.prototype.tryStartUpgrade_=function(){var conn=this.transportManager_.upgradeTransport();if(conn){this.startUpgrade_(conn);}};Connection.prototype.startUpgrade_=function(conn){var _this=this;this.secondaryConn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.sessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we
// can consider the transport healthy.
this.secondaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;var onMessage=this.connReceiver_(this.secondaryConn_);var onDisconnect=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(onMessage,onDisconnect);// If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
setTimeoutNonBlocking(function(){if(_this.secondaryConn_){_this.log_('Timed out trying to upgrade.');_this.secondaryConn_.close();}},Math.floor(UPGRADE_TIMEOUT));};Connection.prototype.onReset_=function(host){this.log_('Reset packet received.  New host: '+host);this.repoInfo_.updateHost(host);// TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
// We don't currently support resets after the connection has already been established
if(this.state_===1/* CONNECTED */){this.close();}else{// Close whatever connections we have open and start again.
this.closeConnections_();this.start_();}};Connection.prototype.onConnectionEstablished_=function(conn,timestamp){var _this=this;this.log_('Realtime connection established.');this.conn_=conn;this.state_=1/* CONNECTED */;if(this.onReady_){this.onReady_(timestamp,this.sessionId);this.onReady_=null;}// If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
// send some pings.
if(this.primaryResponsesRequired_===0){this.log_('Primary connection is healthy.');this.isHealthy_=true;}else{setTimeoutNonBlocking(function(){_this.sendPingOnPrimaryIfNecessary_();},Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));}};Connection.prototype.sendPingOnPrimaryIfNecessary_=function(){// If the connection isn't considered healthy yet, we'll send a noop ping packet request.
if(!this.isHealthy_&&this.state_===1/* CONNECTED */){this.log_('sending ping on primary.');this.sendData_({t:'c',d:{t:PING,d:{}}});}};Connection.prototype.onSecondaryConnectionLost_=function(){var conn=this.secondaryConn_;this.secondaryConn_=null;if(this.tx_===conn||this.rx_===conn){// we are relying on this connection already in some capacity. Therefore, a failure is real
this.close();}};/**
     *
     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
     * we should flush the host cache
     * @private
     */Connection.prototype.onConnectionLost_=function(everConnected){this.conn_=null;// NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
// called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
if(!everConnected&&this.state_===0/* CONNECTING */){this.log_('Realtime connection failed.');// Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
if(this.repoInfo_.isCacheableHost()){PersistentStorage.remove('host:'+this.repoInfo_.host);// reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
this.repoInfo_.internalHost=this.repoInfo_.host;}}else if(this.state_===1/* CONNECTED */){this.log_('Realtime connection lost.');}this.close();};/**
     *
     * @param {string} reason
     * @private
     */Connection.prototype.onConnectionShutdown_=function(reason){this.log_('Connection shutdown command received. Shutting down...');if(this.onKill_){this.onKill_(reason);this.onKill_=null;}// We intentionally don't want to fire onDisconnect (kill is a different case),
// so clear the callback.
this.onDisconnect_=null;this.close();};Connection.prototype.sendData_=function(data){if(this.state_!==1/* CONNECTED */){throw'Connection is not connected';}else{this.tx_.send(data);}};/**
     * Cleans up this connection, calling the appropriate callbacks
     */Connection.prototype.close=function(){if(this.state_!==2/* DISCONNECTED */){this.log_('Closing realtime connection.');this.state_=2/* DISCONNECTED */;this.closeConnections_();if(this.onDisconnect_){this.onDisconnect_();this.onDisconnect_=null;}}};/**
     *
     * @private
     */Connection.prototype.closeConnections_=function(){this.log_('Shutting down all connections');if(this.conn_){this.conn_.close();this.conn_=null;}if(this.secondaryConn_){this.secondaryConn_.close();this.secondaryConn_=null;}if(this.healthyTimeout_){clearTimeout(this.healthyTimeout_);this.healthyTimeout_=null;}};return Connection;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */var ServerActions=/** @class */function(){function ServerActions(){}/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     * @param {string=} hash
     */ServerActions.prototype.put=function(pathString,data,onComplete,hash){};/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, ?string)} onComplete
     * @param {string=} hash
     */ServerActions.prototype.merge=function(pathString,data,onComplete,hash){};/**
     * Refreshes the auth token for the current connection.
     * @param {string} token The authentication token
     */ServerActions.prototype.refreshAuthToken=function(token){};/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */ServerActions.prototype.onDisconnectPut=function(pathString,data,onComplete){};/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */ServerActions.prototype.onDisconnectMerge=function(pathString,data,onComplete){};/**
     * @param {string} pathString
     * @param {function(string, string)=} onComplete
     */ServerActions.prototype.onDisconnectCancel=function(pathString,onComplete){};/**
     * @param {Object.<string, *>} stats
     */ServerActions.prototype.reportStats=function(stats){};return ServerActions;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var RECONNECT_MIN_DELAY=1000;var RECONNECT_MAX_DELAY_DEFAULT=60*5*1000;// 5 minutes in milliseconds (Case: 1858)
var GET_CONNECT_TIMEOUT=3*1000;var RECONNECT_MAX_DELAY_FOR_ADMINS=30*1000;// 30 seconds for admin clients (likely to be a backend server)
var RECONNECT_DELAY_MULTIPLIER=1.3;var RECONNECT_DELAY_RESET_TIMEOUT=30000;// Reset delay back to MIN_DELAY after being connected for 30sec.
var SERVER_KILL_INTERRUPT_REASON='server_kill';// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
var INVALID_AUTH_TOKEN_THRESHOLD=3;/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */var PersistentConnection=/** @class */function(_super){(0,_tslib.__extends)(PersistentConnection,_super);/**
     * @implements {ServerActions}
     * @param repoInfo_ Data about the namespace we are connecting to
     * @param applicationId_ The Firebase App ID for this project
     * @param onDataUpdate_ A callback for new data from the server
     */function PersistentConnection(repoInfo_,applicationId_,onDataUpdate_,onConnectStatus_,onServerInfoUpdate_,authTokenProvider_,authOverride_){var _this=_super.call(this)||this;_this.repoInfo_=repoInfo_;_this.applicationId_=applicationId_;_this.onDataUpdate_=onDataUpdate_;_this.onConnectStatus_=onConnectStatus_;_this.onServerInfoUpdate_=onServerInfoUpdate_;_this.authTokenProvider_=authTokenProvider_;_this.authOverride_=authOverride_;// Used for diagnostic logging.
_this.id=PersistentConnection.nextPersistentConnectionId_++;_this.log_=logWrapper('p:'+_this.id+':');_this.interruptReasons_={};/** Map<path, Map<queryId, ListenSpec>> */_this.listens=new Map();_this.outstandingPuts_=[];_this.outstandingGets_=[];_this.outstandingPutCount_=0;_this.outstandingGetCount_=0;_this.onDisconnectRequestQueue_=[];_this.connected_=false;_this.reconnectDelay_=RECONNECT_MIN_DELAY;_this.maxReconnectDelay_=RECONNECT_MAX_DELAY_DEFAULT;_this.securityDebugCallback_=null;_this.lastSessionId=null;_this.establishConnectionTimer_=null;_this.visible_=false;// Before we get connected, we keep a queue of pending messages to send.
_this.requestCBHash_={};_this.requestNumber_=0;_this.realtime_=null;_this.authToken_=null;_this.forceTokenRefresh_=false;_this.invalidAuthTokenCount_=0;_this.firstConnection_=true;_this.lastConnectionAttemptTime_=null;_this.lastConnectionEstablishedTime_=null;if(authOverride_&&!(0,_util.isNodeSdk)()){throw new Error('Auth override specified in options, but not supported on non Node.js platforms');}_this.scheduleConnect_(0);VisibilityMonitor.getInstance().on('visible',_this.onVisible_,_this);if(repoInfo_.host.indexOf('fblocal')===-1){OnlineMonitor.getInstance().on('online',_this.onOnline_,_this);}return _this;}PersistentConnection.prototype.sendRequest=function(action,body,onResponse){var curReqNum=++this.requestNumber_;var msg={r:curReqNum,a:action,b:body};this.log_((0,_util.stringify)(msg));(0,_util.assert)(this.connected_,"sendRequest call when we're not connected not allowed.");this.realtime_.sendRequest(msg);if(onResponse){this.requestCBHash_[curReqNum]=onResponse;}};PersistentConnection.prototype.get=function(query){var _this=this;var deferred=new _util.Deferred();var request={p:query.path.toString(),q:query.queryObject()};var outstandingGet={action:'g',request:request,onComplete:function onComplete(message){var payload=message['d'];if(message['s']==='ok'){_this.onDataUpdate_(request['p'],payload,/*isMerge*/false,/*tag*/null);deferred.resolve(payload);}else{deferred.reject(payload);}}};this.outstandingGets_.push(outstandingGet);this.outstandingGetCount_++;var index=this.outstandingGets_.length-1;if(!this.connected_){setTimeout(function(){var get=_this.outstandingGets_[index];if(get===undefined||outstandingGet!==get){return;}delete _this.outstandingGets_[index];_this.outstandingGetCount_--;if(_this.outstandingGetCount_===0){_this.outstandingGets_=[];}_this.log_('get '+index+' timed out on connection');deferred.reject(new Error('Client is offline.'));},GET_CONNECT_TIMEOUT);}if(this.connected_){this.sendGet_(index);}return deferred.promise;};/**
     * @inheritDoc
     */PersistentConnection.prototype.listen=function(query,currentHashFn,tag,onComplete){var queryId=query.queryIdentifier();var pathString=query.path.toString();this.log_('Listen called for '+pathString+' '+queryId);if(!this.listens.has(pathString)){this.listens.set(pathString,new Map());}(0,_util.assert)(query.getQueryParams().isDefault()||!query.getQueryParams().loadsAllData(),'listen() called for non-default but complete query');(0,_util.assert)(!this.listens.get(pathString).has(queryId),'listen() called twice for same path/queryId.');var listenSpec={onComplete:onComplete,hashFn:currentHashFn,query:query,tag:tag};this.listens.get(pathString).set(queryId,listenSpec);if(this.connected_){this.sendListen_(listenSpec);}};PersistentConnection.prototype.sendGet_=function(index){var _this=this;var get=this.outstandingGets_[index];this.sendRequest('g',get.request,function(message){delete _this.outstandingGets_[index];_this.outstandingGetCount_--;if(_this.outstandingGetCount_===0){_this.outstandingGets_=[];}if(get.onComplete){get.onComplete(message);}});};PersistentConnection.prototype.sendListen_=function(listenSpec){var _this=this;var query=listenSpec.query;var pathString=query.path.toString();var queryId=query.queryIdentifier();this.log_('Listen on '+pathString+' for '+queryId);var req={/*path*/p:pathString};var action='q';// Only bother to send query if it's non-default.
if(listenSpec.tag){req['q']=query.queryObject();req['t']=listenSpec.tag;}req[/*hash*/'h']=listenSpec.hashFn();this.sendRequest(action,req,function(message){var payload=message[/*data*/'d'];var status=message[/*status*/'s'];// print warnings in any case...
PersistentConnection.warnOnListenWarnings_(payload,query);var currentListenSpec=_this.listens.get(pathString)&&_this.listens.get(pathString).get(queryId);// only trigger actions if the listen hasn't been removed and readded
if(currentListenSpec===listenSpec){_this.log_('listen response',message);if(status!=='ok'){_this.removeListen_(pathString,queryId);}if(listenSpec.onComplete){listenSpec.onComplete(status,payload);}}});};PersistentConnection.warnOnListenWarnings_=function(payload,query){if(payload&&_typeof(payload)==='object'&&(0,_util.contains)(payload,'w')){// eslint-disable-next-line @typescript-eslint/no-explicit-any
var warnings=(0,_util.safeGet)(payload,'w');if(Array.isArray(warnings)&&~warnings.indexOf('no_index')){var indexSpec='".indexOn": "'+query.getQueryParams().getIndex().toString()+'"';var indexPath=query.path.toString();warn("Using an unspecified index. Your data will be downloaded and "+("filtered on the client. Consider adding "+indexSpec+" at ")+(indexPath+" to your security rules for better performance."));}}};/**
     * @inheritDoc
     */PersistentConnection.prototype.refreshAuthToken=function(token){this.authToken_=token;this.log_('Auth token refreshed');if(this.authToken_){this.tryAuth();}else{//If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
//the credential so we dont become authenticated next time we connect.
if(this.connected_){this.sendRequest('unauth',{},function(){});}}this.reduceReconnectDelayIfAdminCredential_(token);};PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_=function(credential){// NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
// Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
var isFirebaseSecret=credential&&credential.length===40;if(isFirebaseSecret||(0,_util.isAdmin)(credential)){this.log_('Admin auth credential detected.  Reducing max reconnect time.');this.maxReconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;}};/**
     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
     * a auth revoked (the connection is closed).
     */PersistentConnection.prototype.tryAuth=function(){var _this=this;if(this.connected_&&this.authToken_){var token_1=this.authToken_;var authMethod=(0,_util.isValidFormat)(token_1)?'auth':'gauth';var requestData={cred:token_1};if(this.authOverride_===null){requestData['noauth']=true;}else if(_typeof(this.authOverride_)==='object'){requestData['authvar']=this.authOverride_;}this.sendRequest(authMethod,requestData,function(res){var status=res[/*status*/'s'];var data=res[/*data*/'d']||'error';if(_this.authToken_===token_1){if(status==='ok'){_this.invalidAuthTokenCount_=0;}else{// Triggers reconnect and force refresh for auth token
_this.onAuthRevoked_(status,data);}}});}};/**
     * @inheritDoc
     */PersistentConnection.prototype.unlisten=function(query,tag){var pathString=query.path.toString();var queryId=query.queryIdentifier();this.log_('Unlisten called for '+pathString+' '+queryId);(0,_util.assert)(query.getQueryParams().isDefault()||!query.getQueryParams().loadsAllData(),'unlisten() called for non-default but complete query');var listen=this.removeListen_(pathString,queryId);if(listen&&this.connected_){this.sendUnlisten_(pathString,queryId,query.queryObject(),tag);}};PersistentConnection.prototype.sendUnlisten_=function(pathString,queryId,queryObj,tag){this.log_('Unlisten on '+pathString+' for '+queryId);var req={/*path*/p:pathString};var action='n';// Only bother sending queryId if it's non-default.
if(tag){req['q']=queryObj;req['t']=tag;}this.sendRequest(action,req);};/**
     * @inheritDoc
     */PersistentConnection.prototype.onDisconnectPut=function(pathString,data,onComplete){if(this.connected_){this.sendOnDisconnect_('o',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString:pathString,action:'o',data:data,onComplete:onComplete});}};/**
     * @inheritDoc
     */PersistentConnection.prototype.onDisconnectMerge=function(pathString,data,onComplete){if(this.connected_){this.sendOnDisconnect_('om',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString:pathString,action:'om',data:data,onComplete:onComplete});}};/**
     * @inheritDoc
     */PersistentConnection.prototype.onDisconnectCancel=function(pathString,onComplete){if(this.connected_){this.sendOnDisconnect_('oc',pathString,null,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString:pathString,action:'oc',data:null,onComplete:onComplete});}};PersistentConnection.prototype.sendOnDisconnect_=function(action,pathString,data,onComplete){var request={/*path*/p:pathString,/*data*/d:data};this.log_('onDisconnect '+action,request);this.sendRequest(action,request,function(response){if(onComplete){setTimeout(function(){onComplete(response[/*status*/'s'],response[/* data */'d']);},Math.floor(0));}});};/**
     * @inheritDoc
     */PersistentConnection.prototype.put=function(pathString,data,onComplete,hash){this.putInternal('p',pathString,data,onComplete,hash);};/**
     * @inheritDoc
     */PersistentConnection.prototype.merge=function(pathString,data,onComplete,hash){this.putInternal('m',pathString,data,onComplete,hash);};PersistentConnection.prototype.putInternal=function(action,pathString,data,onComplete,hash){var request={/*path*/p:pathString,/*data*/d:data};if(hash!==undefined){request[/*hash*/'h']=hash;}// TODO: Only keep track of the most recent put for a given path?
this.outstandingPuts_.push({action:action,request:request,onComplete:onComplete});this.outstandingPutCount_++;var index=this.outstandingPuts_.length-1;if(this.connected_){this.sendPut_(index);}else{this.log_('Buffering put: '+pathString);}};PersistentConnection.prototype.sendPut_=function(index){var _this=this;var action=this.outstandingPuts_[index].action;var request=this.outstandingPuts_[index].request;var onComplete=this.outstandingPuts_[index].onComplete;this.outstandingPuts_[index].queued=this.connected_;this.sendRequest(action,request,function(message){_this.log_(action+' response',message);delete _this.outstandingPuts_[index];_this.outstandingPutCount_--;// Clean up array occasionally.
if(_this.outstandingPutCount_===0){_this.outstandingPuts_=[];}if(onComplete){onComplete(message[/*status*/'s'],message[/* data */'d']);}});};/**
     * @inheritDoc
     */PersistentConnection.prototype.reportStats=function(stats){var _this=this;// If we're not connected, we just drop the stats.
if(this.connected_){var request={/*counters*/c:stats};this.log_('reportStats',request);this.sendRequest(/*stats*/'s',request,function(result){var status=result[/*status*/'s'];if(status!=='ok'){var errorReason=result[/* data */'d'];_this.log_('reportStats','Error sending stats: '+errorReason);}});}};PersistentConnection.prototype.onDataMessage_=function(message){if('r'in message){// this is a response
this.log_('from server: '+(0,_util.stringify)(message));var reqNum=message['r'];var onResponse=this.requestCBHash_[reqNum];if(onResponse){delete this.requestCBHash_[reqNum];onResponse(message[/*body*/'b']);}}else if('error'in message){throw'A server-side error has occurred: '+message['error'];}else if('a'in message){// a and b are action and body, respectively
this.onDataPush_(message['a'],message['b']);}};PersistentConnection.prototype.onDataPush_=function(action,body){this.log_('handleServerMessage',action,body);if(action==='d'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge*/false,body['t']);}else if(action==='m'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge=*/true,body['t']);}else if(action==='c'){this.onListenRevoked_(body[/*path*/'p'],body[/*query*/'q']);}else if(action==='ac'){this.onAuthRevoked_(body[/*status code*/'s'],body[/* explanation */'d']);}else if(action==='sd'){this.onSecurityDebugPacket_(body);}else{error('Unrecognized action received from server: '+(0,_util.stringify)(action)+'\nAre you using the latest client?');}};PersistentConnection.prototype.onReady_=function(timestamp,sessionId){this.log_('connection ready');this.connected_=true;this.lastConnectionEstablishedTime_=new Date().getTime();this.handleTimestamp_(timestamp);this.lastSessionId=sessionId;if(this.firstConnection_){this.sendConnectStats_();}this.restoreState_();this.firstConnection_=false;this.onConnectStatus_(true);};PersistentConnection.prototype.scheduleConnect_=function(timeout){var _this=this;(0,_util.assert)(!this.realtime_,"Scheduling a connect when we're already connected/ing?");if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);}// NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
// Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
this.establishConnectionTimer_=setTimeout(function(){_this.establishConnectionTimer_=null;_this.establishConnection_();// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(timeout));};PersistentConnection.prototype.onVisible_=function(visible){// NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
if(visible&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_){this.log_('Window became visible.  Reducing delay.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}this.visible_=visible;};PersistentConnection.prototype.onOnline_=function(online){if(online){this.log_('Browser went online.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}else{this.log_('Browser went offline.  Killing connection.');if(this.realtime_){this.realtime_.close();}}};PersistentConnection.prototype.onRealtimeDisconnect_=function(){this.log_('data client disconnected');this.connected_=false;this.realtime_=null;// Since we don't know if our sent transactions succeeded or not, we need to cancel them.
this.cancelSentTransactions_();// Clear out the pending requests.
this.requestCBHash_={};if(this.shouldReconnect_()){if(!this.visible_){this.log_("Window isn't visible.  Delaying reconnect.");this.reconnectDelay_=this.maxReconnectDelay_;this.lastConnectionAttemptTime_=new Date().getTime();}else if(this.lastConnectionEstablishedTime_){// If we've been connected long enough, reset reconnect delay to minimum.
var timeSinceLastConnectSucceeded=new Date().getTime()-this.lastConnectionEstablishedTime_;if(timeSinceLastConnectSucceeded>RECONNECT_DELAY_RESET_TIMEOUT){this.reconnectDelay_=RECONNECT_MIN_DELAY;}this.lastConnectionEstablishedTime_=null;}var timeSinceLastConnectAttempt=new Date().getTime()-this.lastConnectionAttemptTime_;var reconnectDelay=Math.max(0,this.reconnectDelay_-timeSinceLastConnectAttempt);reconnectDelay=Math.random()*reconnectDelay;this.log_('Trying to reconnect in '+reconnectDelay+'ms');this.scheduleConnect_(reconnectDelay);// Adjust reconnect delay for next time.
this.reconnectDelay_=Math.min(this.maxReconnectDelay_,this.reconnectDelay_*RECONNECT_DELAY_MULTIPLIER);}this.onConnectStatus_(false);};PersistentConnection.prototype.establishConnection_=function(){var _this=this;if(this.shouldReconnect_()){this.log_('Making a connection attempt');this.lastConnectionAttemptTime_=new Date().getTime();this.lastConnectionEstablishedTime_=null;var onDataMessage_1=this.onDataMessage_.bind(this);var onReady_1=this.onReady_.bind(this);var onDisconnect_1=this.onRealtimeDisconnect_.bind(this);var connId_1=this.id+':'+PersistentConnection.nextConnectionId_++;var self_1=this;var lastSessionId_1=this.lastSessionId;var canceled_1=false;var connection_1=null;var closeFn_1=function closeFn_1(){if(connection_1){connection_1.close();}else{canceled_1=true;onDisconnect_1();}};var sendRequestFn=function sendRequestFn(msg){(0,_util.assert)(connection_1,"sendRequest call when we're not connected not allowed.");connection_1.sendRequest(msg);};this.realtime_={close:closeFn_1,sendRequest:sendRequestFn};var forceRefresh=this.forceTokenRefresh_;this.forceTokenRefresh_=false;// First fetch auth token, and establish connection after fetching the token was successful
this.authTokenProvider_.getToken(forceRefresh).then(function(result){if(!canceled_1){log('getToken() completed. Creating connection.');self_1.authToken_=result&&result.accessToken;connection_1=new Connection(connId_1,self_1.repoInfo_,self_1.applicationId_,onDataMessage_1,onReady_1,onDisconnect_1,/* onKill= */function(reason){warn(reason+' ('+self_1.repoInfo_.toString()+')');self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);},lastSessionId_1);}else{log('getToken() completed but was canceled');}}).then(null,function(error){self_1.log_('Failed to get token: '+error);if(!canceled_1){if(_this.repoInfo_.nodeAdmin){// This may be a critical error for the Admin Node.js SDK, so log a warning.
// But getToken() may also just have temporarily failed, so we still want to
// continue retrying.
warn(error);}closeFn_1();}});}};PersistentConnection.prototype.interrupt=function(reason){log('Interrupting connection for reason: '+reason);this.interruptReasons_[reason]=true;if(this.realtime_){this.realtime_.close();}else{if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);this.establishConnectionTimer_=null;}if(this.connected_){this.onRealtimeDisconnect_();}}};PersistentConnection.prototype.resume=function(reason){log('Resuming connection for reason: '+reason);delete this.interruptReasons_[reason];if((0,_util.isEmpty)(this.interruptReasons_)){this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}};PersistentConnection.prototype.handleTimestamp_=function(timestamp){var delta=timestamp-new Date().getTime();this.onServerInfoUpdate_({serverTimeOffset:delta});};PersistentConnection.prototype.cancelSentTransactions_=function(){for(var i=0;i<this.outstandingPuts_.length;i++){var put=this.outstandingPuts_[i];if(put&&/*hash*/'h'in put.request&&put.queued){if(put.onComplete){put.onComplete('disconnect');}delete this.outstandingPuts_[i];this.outstandingPutCount_--;}}// Clean up array occasionally.
if(this.outstandingPutCount_===0){this.outstandingPuts_=[];}};PersistentConnection.prototype.onListenRevoked_=function(pathString,query){// Remove the listen and manufacture a "permission_denied" error for the failed listen.
var queryId;if(!query){queryId='default';}else{queryId=query.map(function(q){return ObjectToUniqueKey(q);}).join('$');}var listen=this.removeListen_(pathString,queryId);if(listen&&listen.onComplete){listen.onComplete('permission_denied');}};PersistentConnection.prototype.removeListen_=function(pathString,queryId){var normalizedPathString=new Path(pathString).toString();// normalize path.
var listen;if(this.listens.has(normalizedPathString)){var map=this.listens.get(normalizedPathString);listen=map.get(queryId);map["delete"](queryId);if(map.size===0){this.listens["delete"](normalizedPathString);}}else{// all listens for this path has already been removed
listen=undefined;}return listen;};PersistentConnection.prototype.onAuthRevoked_=function(statusCode,explanation){log('Auth token revoked: '+statusCode+'/'+explanation);this.authToken_=null;this.forceTokenRefresh_=true;this.realtime_.close();if(statusCode==='invalid_token'||statusCode==='permission_denied'){// We'll wait a couple times before logging the warning / increasing the
// retry period since oauth tokens will report as "invalid" if they're
// just expired. Plus there may be transient issues that resolve themselves.
this.invalidAuthTokenCount_++;if(this.invalidAuthTokenCount_>=INVALID_AUTH_TOKEN_THRESHOLD){// Set a long reconnect delay because recovery is unlikely
this.reconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;// Notify the auth token provider that the token is invalid, which will log
// a warning
this.authTokenProvider_.notifyForInvalidToken();}}};PersistentConnection.prototype.onSecurityDebugPacket_=function(body){if(this.securityDebugCallback_){this.securityDebugCallback_(body);}else{if('msg'in body){console.log('FIREBASE: '+body['msg'].replace('\n','\nFIREBASE: '));}}};PersistentConnection.prototype.restoreState_=function(){var e_1,_a,e_2,_b;//Re-authenticate ourselves if we have a credential stored.
this.tryAuth();try{// Puts depend on having received the corresponding data update from the server before they complete, so we must
// make sure to send listens before puts.
for(var _c=(0,_tslib.__values)(this.listens.values()),_d=_c.next();!_d.done;_d=_c.next()){var queries=_d.value;try{for(var _e=(e_2=void 0,(0,_tslib.__values)(queries.values())),_f=_e.next();!_f.done;_f=_e.next()){var listenSpec=_f.value;this.sendListen_(listenSpec);}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_f&&!_f.done&&(_b=_e["return"]))_b.call(_e);}finally{if(e_2)throw e_2.error;}}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_d&&!_d.done&&(_a=_c["return"]))_a.call(_c);}finally{if(e_1)throw e_1.error;}}for(var i=0;i<this.outstandingPuts_.length;i++){if(this.outstandingPuts_[i]){this.sendPut_(i);}}while(this.onDisconnectRequestQueue_.length){var request=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(request.action,request.pathString,request.data,request.onComplete);}for(var i=0;i<this.outstandingGets_.length;i++){if(this.outstandingGets_[i]){this.sendGet_(i);}}};/**
     * Sends client stats for first connection
     */PersistentConnection.prototype.sendConnectStats_=function(){var stats={};var clientName='js';if((0,_util.isNodeSdk)()){if(this.repoInfo_.nodeAdmin){clientName='admin_node';}else{clientName='node';}}stats['sdk.'+clientName+'.'+SDK_VERSION.replace(/\./g,'-')]=1;if((0,_util.isMobileCordova)()){stats['framework.cordova']=1;}else if((0,_util.isReactNative)()){stats['framework.reactnative']=1;}this.reportStats(stats);};PersistentConnection.prototype.shouldReconnect_=function(){var online=OnlineMonitor.getInstance().currentlyOnline();return(0,_util.isEmpty)(this.interruptReasons_)&&online;};PersistentConnection.nextPersistentConnectionId_=0;/**
     * Counter for number of connections created. Mainly used for tagging in the logs
     */PersistentConnection.nextConnectionId_=0;return PersistentConnection;}(ServerActions);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */var ReadonlyRestClient=/** @class */function(_super){(0,_tslib.__extends)(ReadonlyRestClient,_super);/**
     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
     * @param {AuthTokenProvider} authTokenProvider_
     * @implements {ServerActions}
     */function ReadonlyRestClient(repoInfo_,onDataUpdate_,authTokenProvider_){var _this=_super.call(this)||this;_this.repoInfo_=repoInfo_;_this.onDataUpdate_=onDataUpdate_;_this.authTokenProvider_=authTokenProvider_;/** @private {function(...[*])} */_this.log_=logWrapper('p:rest:');/**
         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
         * that's been removed. :-/
         *
         * @private {!Object.<string, !Object>}
         */_this.listens_={};return _this;}ReadonlyRestClient.prototype.reportStats=function(stats){throw new Error('Method not implemented.');};/**
     * @param {!Query} query
     * @param {?number=} tag
     * @return {string}
     * @private
     */ReadonlyRestClient.getListenId_=function(query,tag){if(tag!==undefined){return'tag$'+tag;}else{(0,_util.assert)(query.getQueryParams().isDefault(),"should have a tag if it's not a default query.");return query.path.toString();}};/** @inheritDoc */ReadonlyRestClient.prototype.listen=function(query,currentHashFn,tag,onComplete){var _this=this;var pathString=query.path.toString();this.log_('Listen called for '+pathString+' '+query.queryIdentifier());// Mark this listener so we can tell if it's removed.
var listenId=ReadonlyRestClient.getListenId_(query,tag);var thisListen={};this.listens_[listenId]=thisListen;var queryStringParameters=query.getQueryParams().toRestQueryStringParameters();this.restRequest_(pathString+'.json',queryStringParameters,function(error,result){var data=result;if(error===404){data=null;error=null;}if(error===null){_this.onDataUpdate_(pathString,data,/*isMerge=*/false,tag);}if((0,_util.safeGet)(_this.listens_,listenId)===thisListen){var status_1;if(!error){status_1='ok';}else if(error===401){status_1='permission_denied';}else{status_1='rest_error:'+error;}onComplete(status_1,null);}});};/** @inheritDoc */ReadonlyRestClient.prototype.unlisten=function(query,tag){var listenId=ReadonlyRestClient.getListenId_(query,tag);delete this.listens_[listenId];};ReadonlyRestClient.prototype.get=function(query){var _this=this;var queryStringParameters=query.getQueryParams().toRestQueryStringParameters();var pathString=query.path.toString();var deferred=new _util.Deferred();this.restRequest_(pathString+'.json',queryStringParameters,function(error,result){var data=result;if(error===404){data=null;error=null;}if(error===null){_this.onDataUpdate_(pathString,data,/*isMerge=*/false,/*tag=*/null);deferred.resolve(data);}else{deferred.reject(new Error(data));}});return deferred.promise;};/** @inheritDoc */ReadonlyRestClient.prototype.refreshAuthToken=function(token){// no-op since we just always call getToken.
};/**
     * Performs a REST request to the given path, with the provided query string parameters,
     * and any auth credentials we have.
     *
     * @param {!string} pathString
     * @param {!Object.<string, *>} queryStringParameters
     * @param {?function(?number, *=)} callback
     * @private
     */ReadonlyRestClient.prototype.restRequest_=function(pathString,queryStringParameters,callback){var _this=this;if(queryStringParameters===void 0){queryStringParameters={};}queryStringParameters['format']='export';this.authTokenProvider_.getToken(/*forceRefresh=*/false).then(function(authTokenData){var authToken=authTokenData&&authTokenData.accessToken;if(authToken){queryStringParameters['auth']=authToken;}var url=(_this.repoInfo_.secure?'https://':'http://')+_this.repoInfo_.host+pathString+'?'+'ns='+_this.repoInfo_.namespace+(0,_util.querystring)(queryStringParameters);_this.log_('Sending REST request for '+url);var xhr=new XMLHttpRequest();xhr.onreadystatechange=function(){if(callback&&xhr.readyState===4){_this.log_('REST Response for '+url+' received. status:',xhr.status,'response:',xhr.responseText);var res=null;if(xhr.status>=200&&xhr.status<300){try{res=(0,_util.jsonEval)(xhr.responseText);}catch(e){warn('Failed to parse JSON response for '+url+': '+xhr.responseText);}callback(null,res);}else{// 401 and 404 are expected.
if(xhr.status!==401&&xhr.status!==404){warn('Got unsuccessful REST response for '+url+' Status: '+xhr.status);}callback(xhr.status);}callback=null;}};xhr.open('GET',url,/*asynchronous=*/true);xhr.send();});};return ReadonlyRestClient;}(ServerActions);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var INTERRUPT_REASON='repo_interrupt';/**
 * A connection to a single data repository.
 */var Repo=/** @class */function(){function Repo(repoInfo_,forceRestClient_,app,authTokenProvider_){this.repoInfo_=repoInfo_;this.forceRestClient_=forceRestClient_;this.app=app;this.authTokenProvider_=authTokenProvider_;this.dataUpdateCount=0;this.statsListener_=null;this.eventQueue_=new EventQueue();this.nextWriteId_=1;this.interceptServerDataCallback_=null;/** A list of data pieces and paths to be set when this client disconnects. */this.onDisconnect_=new SparseSnapshotTree();// TODO: This should be @private but it's used by test_access.js and internal.js
this.persistentConnection_=null;// This key is intentionally not updated if RepoInfo is later changed or replaced
this.key=this.repoInfo_.toURLString();}Repo.prototype.start=function(){var _this=this;this.stats_=StatsManager.getCollection(this.repoInfo_);if(this.forceRestClient_||beingCrawled()){this.server_=new ReadonlyRestClient(this.repoInfo_,this.onDataUpdate_.bind(this),this.authTokenProvider_);// Minor hack: Fire onConnect immediately, since there's no actual connection.
setTimeout(this.onConnectStatus_.bind(this,true),0);}else{var authOverride=this.app.options['databaseAuthVariableOverride'];// Validate authOverride
if(typeof authOverride!=='undefined'&&authOverride!==null){if(_typeof(authOverride)!=='object'){throw new Error('Only objects are supported for option databaseAuthVariableOverride');}try{(0,_util.stringify)(authOverride);}catch(e){throw new Error('Invalid authOverride provided: '+e);}}this.persistentConnection_=new PersistentConnection(this.repoInfo_,this.app.options.appId,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),this.authTokenProvider_,authOverride);this.server_=this.persistentConnection_;}this.authTokenProvider_.addTokenChangeListener(function(token){_this.server_.refreshAuthToken(token);});// In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
// we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
this.statsReporter_=StatsManager.getOrCreateReporter(this.repoInfo_,function(){return new StatsReporter(_this.stats_,_this.server_);});this.transactionsInit_();// Used for .info.
this.infoData_=new SnapshotHolder();this.infoSyncTree_=new SyncTree({startListening:function startListening(query,tag,currentHashFn,onComplete){var infoEvents=[];var node=_this.infoData_.getNode(query.path);// This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
// on initial data...
if(!node.isEmpty()){infoEvents=_this.infoSyncTree_.applyServerOverwrite(query.path,node);setTimeout(function(){onComplete('ok');},0);}return infoEvents;},stopListening:function stopListening(){}});this.updateInfo_('connected',false);this.serverSyncTree_=new SyncTree({startListening:function startListening(query,tag,currentHashFn,onComplete){_this.server_.listen(query,currentHashFn,tag,function(status,data){var events=onComplete(status,data);_this.eventQueue_.raiseEventsForChangedPath(query.path,events);});// No synchronous events for network-backed sync trees
return[];},stopListening:function stopListening(query,tag){_this.server_.unlisten(query,tag);}});};/**
     * @return The URL corresponding to the root of this Firebase.
     */Repo.prototype.toString=function(){return(this.repoInfo_.secure?'https://':'http://')+this.repoInfo_.host;};/**
     * @return The namespace represented by the repo.
     */Repo.prototype.name=function(){return this.repoInfo_.namespace;};/**
     * @return The time in milliseconds, taking the server offset into account if we have one.
     */Repo.prototype.serverTime=function(){var offsetNode=this.infoData_.getNode(new Path('.info/serverTimeOffset'));var offset=offsetNode.val()||0;return new Date().getTime()+offset;};/**
     * Generate ServerValues using some variables from the repo object.
     */Repo.prototype.generateServerValues=function(){return generateWithValues({timestamp:this.serverTime()});};/**
     * Called by realtime when we get new messages from the server.
     */Repo.prototype.onDataUpdate_=function(pathString,data,isMerge,tag){// For testing.
this.dataUpdateCount++;var path=new Path(pathString);data=this.interceptServerDataCallback_?this.interceptServerDataCallback_(pathString,data):data;var events=[];if(tag){if(isMerge){var taggedChildren=(0,_util.map)(data,function(raw){return nodeFromJSON$1(raw);});events=this.serverSyncTree_.applyTaggedQueryMerge(path,taggedChildren,tag);}else{var taggedSnap=nodeFromJSON$1(data);events=this.serverSyncTree_.applyTaggedQueryOverwrite(path,taggedSnap,tag);}}else if(isMerge){var changedChildren=(0,_util.map)(data,function(raw){return nodeFromJSON$1(raw);});events=this.serverSyncTree_.applyServerMerge(path,changedChildren);}else{var snap=nodeFromJSON$1(data);events=this.serverSyncTree_.applyServerOverwrite(path,snap);}var affectedPath=path;if(events.length>0){// Since we have a listener outstanding for each transaction, receiving any events
// is a proxy for some change having occurred.
affectedPath=this.rerunTransactions_(path);}this.eventQueue_.raiseEventsForChangedPath(affectedPath,events);};// TODO: This should be @private but it's used by test_access.js and internal.js
Repo.prototype.interceptServerData_=function(callback){this.interceptServerDataCallback_=callback;};Repo.prototype.onConnectStatus_=function(connectStatus){this.updateInfo_('connected',connectStatus);if(connectStatus===false){this.runOnDisconnectEvents_();}};Repo.prototype.onServerInfoUpdate_=function(updates){var _this=this;each(updates,function(key,value){_this.updateInfo_(key,value);});};Repo.prototype.updateInfo_=function(pathString,value){var path=new Path('/.info/'+pathString);var newNode=nodeFromJSON$1(value);this.infoData_.updateSnapshot(path,newNode);var events=this.infoSyncTree_.applyServerOverwrite(path,newNode);this.eventQueue_.raiseEventsForChangedPath(path,events);};Repo.prototype.getNextWriteId_=function(){return this.nextWriteId_++;};/**
     * The purpose of `getValue` is to return the latest known value
     * satisfying `query`.
     *
     * If the client is connected, this method will send a request
     * to the server. If the client is not connected, then either:
     *
     * 1. The client was once connected, but not anymore.
     * 2. The client has never connected, this is the first operation
     *    this repo is handling.
     *
     * In case (1), it's possible that the client still has an active
     * listener, with cached data. Since this is the latest known
     * value satisfying the query, that's what getValue will return.
     * If there is no cached data, `getValue` surfaces an "offline"
     * error.
     *
     * In case (2), `getValue` will trigger a time-limited connection
     * attempt. If the client is unable to connect to the server, it
     * will surface an "offline" error because there cannot be any
     * cached data. On the other hand, if the client is able to connect,
     * `getValue` will return the server's value for the query, if one
     * exists.
     *
     * @param query - The query to surface a value for.
     */Repo.prototype.getValue=function(query){var _this=this;return this.server_.get(query).then(function(payload){var node=nodeFromJSON$1(payload);var events=_this.serverSyncTree_.applyServerOverwrite(query.path,node);_this.eventQueue_.raiseEventsAtPath(query.path,events);return Promise.resolve(new DataSnapshot(node,query.getRef(),query.getQueryParams().getIndex()));},function(err){_this.log_('get for query '+(0,_util.stringify)(query)+' falling back to cache after error: '+err);var cached=_this.serverSyncTree_.calcCompleteEventCache(query.path);if(!cached.isEmpty()){return Promise.resolve(new DataSnapshot(cached,query.getRef(),query.getQueryParams().getIndex()));}return Promise.reject(new Error(err));});};Repo.prototype.setWithPriority=function(path,newVal,newPriority,onComplete){var _this=this;this.log_('set',{path:path.toString(),value:newVal,priority:newPriority});// TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
// (b) store unresolved paths on JSON parse
var serverValues=this.generateServerValues();var newNodeUnresolved=nodeFromJSON$1(newVal,newPriority);var existing=this.serverSyncTree_.calcCompleteEventCache(path);var newNode=resolveDeferredValueSnapshot(newNodeUnresolved,existing,serverValues);var writeId=this.getNextWriteId_();var events=this.serverSyncTree_.applyUserOverwrite(path,newNode,writeId,true);this.eventQueue_.queueEvents(events);this.server_.put(path.toString(),newNodeUnresolved.val(/*export=*/true),function(status,errorReason){var success=status==='ok';if(!success){warn('set at '+path+' failed: '+status);}var clearEvents=_this.serverSyncTree_.ackUserWrite(writeId,!success);_this.eventQueue_.raiseEventsForChangedPath(path,clearEvents);_this.callOnCompleteCallback(onComplete,status,errorReason);});var affectedPath=this.abortTransactions_(path);this.rerunTransactions_(affectedPath);// We queued the events above, so just flush the queue here
this.eventQueue_.raiseEventsForChangedPath(affectedPath,[]);};Repo.prototype.update=function(path,childrenToMerge,onComplete){var _this=this;this.log_('update',{path:path.toString(),value:childrenToMerge});// Start with our existing data and merge each child into it.
var empty=true;var serverValues=this.generateServerValues();var changedChildren={};each(childrenToMerge,function(changedKey,changedValue){empty=false;changedChildren[changedKey]=resolveDeferredValueTree(path.child(changedKey),nodeFromJSON$1(changedValue),_this.serverSyncTree_,serverValues);});if(!empty){var writeId_1=this.getNextWriteId_();var events=this.serverSyncTree_.applyUserMerge(path,changedChildren,writeId_1);this.eventQueue_.queueEvents(events);this.server_.merge(path.toString(),childrenToMerge,function(status,errorReason){var success=status==='ok';if(!success){warn('update at '+path+' failed: '+status);}var clearEvents=_this.serverSyncTree_.ackUserWrite(writeId_1,!success);var affectedPath=clearEvents.length>0?_this.rerunTransactions_(path):path;_this.eventQueue_.raiseEventsForChangedPath(affectedPath,clearEvents);_this.callOnCompleteCallback(onComplete,status,errorReason);});each(childrenToMerge,function(changedPath){var affectedPath=_this.abortTransactions_(path.child(changedPath));_this.rerunTransactions_(affectedPath);});// We queued the events above, so just flush the queue here
this.eventQueue_.raiseEventsForChangedPath(path,[]);}else{log("update() called with empty data.  Don't do anything.");this.callOnCompleteCallback(onComplete,'ok');}};/**
     * Applies all of the changes stored up in the onDisconnect_ tree.
     */Repo.prototype.runOnDisconnectEvents_=function(){var _this=this;this.log_('onDisconnectEvents');var serverValues=this.generateServerValues();var resolvedOnDisconnectTree=new SparseSnapshotTree();this.onDisconnect_.forEachTree(Path.Empty,function(path,node){var resolved=resolveDeferredValueTree(path,node,_this.serverSyncTree_,serverValues);resolvedOnDisconnectTree.remember(path,resolved);});var events=[];resolvedOnDisconnectTree.forEachTree(Path.Empty,function(path,snap){events=events.concat(_this.serverSyncTree_.applyServerOverwrite(path,snap));var affectedPath=_this.abortTransactions_(path);_this.rerunTransactions_(affectedPath);});this.onDisconnect_=new SparseSnapshotTree();this.eventQueue_.raiseEventsForChangedPath(Path.Empty,events);};Repo.prototype.onDisconnectCancel=function(path,onComplete){var _this=this;this.server_.onDisconnectCancel(path.toString(),function(status,errorReason){if(status==='ok'){_this.onDisconnect_.forget(path);}_this.callOnCompleteCallback(onComplete,status,errorReason);});};Repo.prototype.onDisconnectSet=function(path,value,onComplete){var _this=this;var newNode=nodeFromJSON$1(value);this.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),function(status,errorReason){if(status==='ok'){_this.onDisconnect_.remember(path,newNode);}_this.callOnCompleteCallback(onComplete,status,errorReason);});};Repo.prototype.onDisconnectSetWithPriority=function(path,value,priority,onComplete){var _this=this;var newNode=nodeFromJSON$1(value,priority);this.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),function(status,errorReason){if(status==='ok'){_this.onDisconnect_.remember(path,newNode);}_this.callOnCompleteCallback(onComplete,status,errorReason);});};Repo.prototype.onDisconnectUpdate=function(path,childrenToMerge,onComplete){var _this=this;if((0,_util.isEmpty)(childrenToMerge)){log("onDisconnect().update() called with empty data.  Don't do anything.");this.callOnCompleteCallback(onComplete,'ok');return;}this.server_.onDisconnectMerge(path.toString(),childrenToMerge,function(status,errorReason){if(status==='ok'){each(childrenToMerge,function(childName,childNode){var newChildNode=nodeFromJSON$1(childNode);_this.onDisconnect_.remember(path.child(childName),newChildNode);});}_this.callOnCompleteCallback(onComplete,status,errorReason);});};Repo.prototype.addEventCallbackForQuery=function(query,eventRegistration){var events;if(query.path.getFront()==='.info'){events=this.infoSyncTree_.addEventRegistration(query,eventRegistration);}else{events=this.serverSyncTree_.addEventRegistration(query,eventRegistration);}this.eventQueue_.raiseEventsAtPath(query.path,events);};Repo.prototype.removeEventCallbackForQuery=function(query,eventRegistration){// These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
// a little bit by handling the return values anyways.
var events;if(query.path.getFront()==='.info'){events=this.infoSyncTree_.removeEventRegistration(query,eventRegistration);}else{events=this.serverSyncTree_.removeEventRegistration(query,eventRegistration);}this.eventQueue_.raiseEventsAtPath(query.path,events);};Repo.prototype.interrupt=function(){if(this.persistentConnection_){this.persistentConnection_.interrupt(INTERRUPT_REASON);}};Repo.prototype.resume=function(){if(this.persistentConnection_){this.persistentConnection_.resume(INTERRUPT_REASON);}};Repo.prototype.stats=function(showDelta){if(showDelta===void 0){showDelta=false;}if(typeof console==='undefined'){return;}var stats;if(showDelta){if(!this.statsListener_){this.statsListener_=new StatsListener(this.stats_);}stats=this.statsListener_.get();}else{stats=this.stats_.get();}var longestName=Object.keys(stats).reduce(function(previousValue,currentValue){return Math.max(currentValue.length,previousValue);},0);each(stats,function(stat,value){var paddedStat=stat;// pad stat names to be the same length (plus 2 extra spaces).
for(var i=stat.length;i<longestName+2;i++){paddedStat+=' ';}console.log(paddedStat+value);});};Repo.prototype.statsIncrementCounter=function(metric){this.stats_.incrementCounter(metric);this.statsReporter_.includeStat(metric);};Repo.prototype.log_=function(){var varArgs=[];for(var _i=0;_i<arguments.length;_i++){varArgs[_i]=arguments[_i];}var prefix='';if(this.persistentConnection_){prefix=this.persistentConnection_.id+':';}log.apply(void 0,(0,_tslib.__spread)([prefix],varArgs));};Repo.prototype.callOnCompleteCallback=function(callback,status,errorReason){if(callback){exceptionGuard(function(){if(status==='ok'){callback(null);}else{var code=(status||'error').toUpperCase();var message=code;if(errorReason){message+=': '+errorReason;}var error=new Error(message);// eslint-disable-next-line @typescript-eslint/no-explicit-any
error.code=code;callback(error);}});}};Object.defineProperty(Repo.prototype,"database",{get:function get(){return this.__database||(this.__database=new Database(this));},enumerable:false,configurable:true});return Repo;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 *
 * @constructor
 * @implements {NodeFilter}
 */var RangedFilter=/** @class */function(){/**
     * @param {!QueryParams} params
     */function RangedFilter(params){this.indexedFilter_=new IndexedFilter(params.getIndex());this.index_=params.getIndex();this.startPost_=RangedFilter.getStartPost_(params);this.endPost_=RangedFilter.getEndPost_(params);}/**
     * @return {!NamedNode}
     */RangedFilter.prototype.getStartPost=function(){return this.startPost_;};/**
     * @return {!NamedNode}
     */RangedFilter.prototype.getEndPost=function(){return this.endPost_;};/**
     * @param {!NamedNode} node
     * @return {boolean}
     */RangedFilter.prototype.matches=function(node){return this.index_.compare(this.getStartPost(),node)<=0&&this.index_.compare(node,this.getEndPost())<=0;};/**
     * @inheritDoc
     */RangedFilter.prototype.updateChild=function(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}return this.indexedFilter_.updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);};/**
     * @inheritDoc
     */RangedFilter.prototype.updateFullNode=function(oldSnap,newSnap,optChangeAccumulator){if(newSnap.isLeafNode()){// Make sure we have a children node with the correct index, not a leaf node;
newSnap=ChildrenNode.EMPTY_NODE;}var filtered=newSnap.withIndex(this.index_);// Don't support priorities on queries
filtered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);var self=this;newSnap.forEachChild(PRIORITY_INDEX,function(key,childNode){if(!self.matches(new NamedNode(key,childNode))){filtered=filtered.updateImmediateChild(key,ChildrenNode.EMPTY_NODE);}});return this.indexedFilter_.updateFullNode(oldSnap,filtered,optChangeAccumulator);};/**
     * @inheritDoc
     */RangedFilter.prototype.updatePriority=function(oldSnap,newPriority){// Don't support priorities on queries
return oldSnap;};/**
     * @inheritDoc
     */RangedFilter.prototype.filtersNodes=function(){return true;};/**
     * @inheritDoc
     */RangedFilter.prototype.getIndexedFilter=function(){return this.indexedFilter_;};/**
     * @inheritDoc
     */RangedFilter.prototype.getIndex=function(){return this.index_;};/**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */RangedFilter.getStartPost_=function(params){if(params.hasStart()){var startName=params.getIndexStartName();return params.getIndex().makePost(params.getIndexStartValue(),startName);}else{return params.getIndex().minPost();}};/**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */RangedFilter.getEndPost_=function(params){if(params.hasEnd()){var endName=params.getIndexEndName();return params.getIndex().makePost(params.getIndexEndValue(),endName);}else{return params.getIndex().maxPost();}};return RangedFilter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 *
 * @constructor
 * @implements {NodeFilter}
 */var LimitedFilter=/** @class */function(){/**
     * @param {!QueryParams} params
     */function LimitedFilter(params){this.rangedFilter_=new RangedFilter(params);this.index_=params.getIndex();this.limit_=params.getLimit();this.reverse_=!params.isViewFromLeft();}/**
     * @inheritDoc
     */LimitedFilter.prototype.updateChild=function(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.rangedFilter_.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}if(snap.getImmediateChild(key).equals(newChild)){// No change
return snap;}else if(snap.numChildren()<this.limit_){return this.rangedFilter_.getIndexedFilter().updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);}else{return this.fullLimitUpdateChild_(snap,key,newChild,source,optChangeAccumulator);}};/**
     * @inheritDoc
     */LimitedFilter.prototype.updateFullNode=function(oldSnap,newSnap,optChangeAccumulator){var filtered;if(newSnap.isLeafNode()||newSnap.isEmpty()){// Make sure we have a children node with the correct index, not a leaf node;
filtered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);}else{if(this.limit_*2<newSnap.numChildren()&&newSnap.isIndexed(this.index_)){// Easier to build up a snapshot, since what we're given has more than twice the elements we want
filtered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);// anchor to the startPost, endPost, or last element as appropriate
var iterator=void 0;if(this.reverse_){iterator=newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_);}else{iterator=newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);}var count=0;while(iterator.hasNext()&&count<this.limit_){var next=iterator.getNext();var inRange=void 0;if(this.reverse_){inRange=this.index_.compare(this.rangedFilter_.getStartPost(),next)<=0;}else{inRange=this.index_.compare(next,this.rangedFilter_.getEndPost())<=0;}if(inRange){filtered=filtered.updateImmediateChild(next.name,next.node);count++;}else{// if we have reached the end post, we cannot keep adding elemments
break;}}}else{// The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
filtered=newSnap.withIndex(this.index_);// Don't support priorities on queries
filtered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);var startPost=void 0;var endPost=void 0;var cmp=void 0;var iterator=void 0;if(this.reverse_){iterator=filtered.getReverseIterator(this.index_);startPost=this.rangedFilter_.getEndPost();endPost=this.rangedFilter_.getStartPost();var indexCompare_1=this.index_.getCompare();cmp=function cmp(a,b){return indexCompare_1(b,a);};}else{iterator=filtered.getIterator(this.index_);startPost=this.rangedFilter_.getStartPost();endPost=this.rangedFilter_.getEndPost();cmp=this.index_.getCompare();}var count=0;var foundStartPost=false;while(iterator.hasNext()){var next=iterator.getNext();if(!foundStartPost&&cmp(startPost,next)<=0){// start adding
foundStartPost=true;}var inRange=foundStartPost&&count<this.limit_&&cmp(next,endPost)<=0;if(inRange){count++;}else{filtered=filtered.updateImmediateChild(next.name,ChildrenNode.EMPTY_NODE);}}}}return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap,filtered,optChangeAccumulator);};/**
     * @inheritDoc
     */LimitedFilter.prototype.updatePriority=function(oldSnap,newPriority){// Don't support priorities on queries
return oldSnap;};/**
     * @inheritDoc
     */LimitedFilter.prototype.filtersNodes=function(){return true;};/**
     * @inheritDoc
     */LimitedFilter.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter();};/**
     * @inheritDoc
     */LimitedFilter.prototype.getIndex=function(){return this.index_;};/**
     * @param {!Node} snap
     * @param {string} childKey
     * @param {!Node} childSnap
     * @param {!CompleteChildSource} source
     * @param {?ChildChangeAccumulator} changeAccumulator
     * @return {!Node}
     * @private
     */LimitedFilter.prototype.fullLimitUpdateChild_=function(snap,childKey,childSnap,source,changeAccumulator){// TODO: rename all cache stuff etc to general snap terminology
var cmp;if(this.reverse_){var indexCmp_1=this.index_.getCompare();cmp=function cmp(a,b){return indexCmp_1(b,a);};}else{cmp=this.index_.getCompare();}var oldEventCache=snap;(0,_util.assert)(oldEventCache.numChildren()===this.limit_,'');var newChildNamedNode=new NamedNode(childKey,childSnap);var windowBoundary=this.reverse_?oldEventCache.getFirstChild(this.index_):oldEventCache.getLastChild(this.index_);var inRange=this.rangedFilter_.matches(newChildNamedNode);if(oldEventCache.hasChild(childKey)){var oldChildSnap=oldEventCache.getImmediateChild(childKey);var nextChild=source.getChildAfterChild(this.index_,windowBoundary,this.reverse_);while(nextChild!=null&&(nextChild.name===childKey||oldEventCache.hasChild(nextChild.name))){// There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
// been applied to the limited filter yet. Ignore this next child which will be updated later in
// the limited filter...
nextChild=source.getChildAfterChild(this.index_,nextChild,this.reverse_);}var compareNext=nextChild==null?1:cmp(nextChild,newChildNamedNode);var remainsInWindow=inRange&&!childSnap.isEmpty()&&compareNext>=0;if(remainsInWindow){if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childChangedChange(childKey,childSnap,oldChildSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap);}else{if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childRemovedChange(childKey,oldChildSnap));}var newEventCache=oldEventCache.updateImmediateChild(childKey,ChildrenNode.EMPTY_NODE);var nextChildInRange=nextChild!=null&&this.rangedFilter_.matches(nextChild);if(nextChildInRange){if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name,nextChild.node));}return newEventCache.updateImmediateChild(nextChild.name,nextChild.node);}else{return newEventCache;}}}else if(childSnap.isEmpty()){// we're deleting a node, but it was not in the window, so ignore it
return snap;}else if(inRange){if(cmp(windowBoundary,newChildNamedNode)>=0){if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name,windowBoundary.node));changeAccumulator.trackChildChange(Change.childAddedChange(childKey,childSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap).updateImmediateChild(windowBoundary.name,ChildrenNode.EMPTY_NODE);}else{return snap;}}else{return snap;}};return LimitedFilter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 * @constructor
 */var QueryParams=/** @class */function(){function QueryParams(){this.limitSet_=false;this.startSet_=false;this.startNameSet_=false;this.endSet_=false;this.endNameSet_=false;this.limit_=0;this.viewFrom_='';this.indexStartValue_=null;this.indexStartName_='';this.indexEndValue_=null;this.indexEndName_='';this.index_=PRIORITY_INDEX;}/**
     * @return {boolean}
     */QueryParams.prototype.hasStart=function(){return this.startSet_;};/**
     * @return {boolean} True if it would return from left.
     */QueryParams.prototype.isViewFromLeft=function(){if(this.viewFrom_===''){// limit(), rather than limitToFirst or limitToLast was called.
// This means that only one of startSet_ and endSet_ is true. Use them
// to calculate which side of the view to anchor to. If neither is set,
// anchor to the end.
return this.startSet_;}else{return this.viewFrom_===QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;}};/**
     * Only valid to call if hasStart() returns true
     * @return {*}
     */QueryParams.prototype.getIndexStartValue=function(){(0,_util.assert)(this.startSet_,'Only valid if start has been set');return this.indexStartValue_;};/**
     * Only valid to call if hasStart() returns true.
     * Returns the starting key name for the range defined by these query parameters
     * @return {!string}
     */QueryParams.prototype.getIndexStartName=function(){(0,_util.assert)(this.startSet_,'Only valid if start has been set');if(this.startNameSet_){return this.indexStartName_;}else{return MIN_NAME;}};/**
     * @return {boolean}
     */QueryParams.prototype.hasEnd=function(){return this.endSet_;};/**
     * Only valid to call if hasEnd() returns true.
     * @return {*}
     */QueryParams.prototype.getIndexEndValue=function(){(0,_util.assert)(this.endSet_,'Only valid if end has been set');return this.indexEndValue_;};/**
     * Only valid to call if hasEnd() returns true.
     * Returns the end key name for the range defined by these query parameters
     * @return {!string}
     */QueryParams.prototype.getIndexEndName=function(){(0,_util.assert)(this.endSet_,'Only valid if end has been set');if(this.endNameSet_){return this.indexEndName_;}else{return MAX_NAME;}};/**
     * @return {boolean}
     */QueryParams.prototype.hasLimit=function(){return this.limitSet_;};/**
     * @return {boolean} True if a limit has been set and it has been explicitly anchored
     */QueryParams.prototype.hasAnchoredLimit=function(){return this.limitSet_&&this.viewFrom_!=='';};/**
     * Only valid to call if hasLimit() returns true
     * @return {!number}
     */QueryParams.prototype.getLimit=function(){(0,_util.assert)(this.limitSet_,'Only valid if limit has been set');return this.limit_;};/**
     * @return {!Index}
     */QueryParams.prototype.getIndex=function(){return this.index_;};/**
     * @return {!QueryParams}
     * @private
     */QueryParams.prototype.copy_=function(){var copy=new QueryParams();copy.limitSet_=this.limitSet_;copy.limit_=this.limit_;copy.startSet_=this.startSet_;copy.indexStartValue_=this.indexStartValue_;copy.startNameSet_=this.startNameSet_;copy.indexStartName_=this.indexStartName_;copy.endSet_=this.endSet_;copy.indexEndValue_=this.indexEndValue_;copy.endNameSet_=this.endNameSet_;copy.indexEndName_=this.indexEndName_;copy.index_=this.index_;copy.viewFrom_=this.viewFrom_;return copy;};/**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */QueryParams.prototype.limit=function(newLimit){var newParams=this.copy_();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_='';return newParams;};/**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */QueryParams.prototype.limitToFirst=function(newLimit){var newParams=this.copy_();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;return newParams;};/**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */QueryParams.prototype.limitToLast=function(newLimit){var newParams=this.copy_();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;return newParams;};/**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */QueryParams.prototype.startAt=function(indexValue,key){var newParams=this.copy_();newParams.startSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexStartValue_=indexValue;if(key!=null){newParams.startNameSet_=true;newParams.indexStartName_=key;}else{newParams.startNameSet_=false;newParams.indexStartName_='';}return newParams;};/**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */QueryParams.prototype.endAt=function(indexValue,key){var newParams=this.copy_();newParams.endSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexEndValue_=indexValue;if(key!==undefined){newParams.endNameSet_=true;newParams.indexEndName_=key;}else{newParams.endNameSet_=false;newParams.indexEndName_='';}return newParams;};/**
     * @param {!Index} index
     * @return {!QueryParams}
     */QueryParams.prototype.orderBy=function(index){var newParams=this.copy_();newParams.index_=index;return newParams;};/**
     * @return {!Object}
     */QueryParams.prototype.getQueryObject=function(){var WIRE_PROTOCOL_CONSTANTS=QueryParams.WIRE_PROTOCOL_CONSTANTS_;var obj={};if(this.startSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE]=this.indexStartValue_;if(this.startNameSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME]=this.indexStartName_;}}if(this.endSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE]=this.indexEndValue_;if(this.endNameSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME]=this.indexEndName_;}}if(this.limitSet_){obj[WIRE_PROTOCOL_CONSTANTS.LIMIT]=this.limit_;var viewFrom=this.viewFrom_;if(viewFrom===''){if(this.isViewFromLeft()){viewFrom=WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;}else{viewFrom=WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;}}obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM]=viewFrom;}// For now, priority index is the default, so we only specify if it's some other index
if(this.index_!==PRIORITY_INDEX){obj[WIRE_PROTOCOL_CONSTANTS.INDEX]=this.index_.toString();}return obj;};/**
     * @return {boolean}
     */QueryParams.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_);};/**
     * @return {boolean}
     */QueryParams.prototype.isDefault=function(){return this.loadsAllData()&&this.index_===PRIORITY_INDEX;};/**
     * @return {!NodeFilter}
     */QueryParams.prototype.getNodeFilter=function(){if(this.loadsAllData()){return new IndexedFilter(this.getIndex());}else if(this.hasLimit()){return new LimitedFilter(this);}else{return new RangedFilter(this);}};/**
     * Returns a set of REST query string parameters representing this query.
     *
     * @return {!Object.<string,*>} query string parameters
     */QueryParams.prototype.toRestQueryStringParameters=function(){var REST_CONSTANTS=QueryParams.REST_QUERY_CONSTANTS_;var qs={};if(this.isDefault()){return qs;}var orderBy;if(this.index_===PRIORITY_INDEX){orderBy=REST_CONSTANTS.PRIORITY_INDEX;}else if(this.index_===VALUE_INDEX){orderBy=REST_CONSTANTS.VALUE_INDEX;}else if(this.index_===KEY_INDEX){orderBy=REST_CONSTANTS.KEY_INDEX;}else{(0,_util.assert)(this.index_ instanceof PathIndex,'Unrecognized index type!');orderBy=this.index_.toString();}qs[REST_CONSTANTS.ORDER_BY]=(0,_util.stringify)(orderBy);if(this.startSet_){qs[REST_CONSTANTS.START_AT]=(0,_util.stringify)(this.indexStartValue_);if(this.startNameSet_){qs[REST_CONSTANTS.START_AT]+=','+(0,_util.stringify)(this.indexStartName_);}}if(this.endSet_){qs[REST_CONSTANTS.END_AT]=(0,_util.stringify)(this.indexEndValue_);if(this.endNameSet_){qs[REST_CONSTANTS.END_AT]+=','+(0,_util.stringify)(this.indexEndName_);}}if(this.limitSet_){if(this.isViewFromLeft()){qs[REST_CONSTANTS.LIMIT_TO_FIRST]=this.limit_;}else{qs[REST_CONSTANTS.LIMIT_TO_LAST]=this.limit_;}}return qs;};/**
     * Wire Protocol Constants
     * @const
     * @enum {string}
     * @private
     */QueryParams.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:'sp',INDEX_START_NAME:'sn',INDEX_END_VALUE:'ep',INDEX_END_NAME:'en',LIMIT:'l',VIEW_FROM:'vf',VIEW_FROM_LEFT:'l',VIEW_FROM_RIGHT:'r',INDEX:'i'};/**
     * REST Query Constants
     * @const
     * @enum {string}
     * @private
     */QueryParams.REST_QUERY_CONSTANTS_={ORDER_BY:'orderBy',PRIORITY_INDEX:'$priority',VALUE_INDEX:'$value',KEY_INDEX:'$key',START_AT:'startAt',END_AT:'endAt',LIMIT_TO_FIRST:'limitToFirst',LIMIT_TO_LAST:'limitToLast'};/**
     * Default, empty query parameters
     * @type {!QueryParams}
     * @const
     */QueryParams.DEFAULT=new QueryParams();return QueryParams;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Reference=/** @class */function(_super){(0,_tslib.__extends)(Reference,_super);/**
     * Call options:
     *   new Reference(Repo, Path) or
     *   new Reference(url: string, string|RepoManager)
     *
     * Externally - this is the firebase.database.Reference type.
     *
     * @param {!Repo} repo
     * @param {(!Path)} path
     * @extends {Query}
     */function Reference(repo,path){var _this=this;if(!(repo instanceof Repo)){throw new Error('new Reference() no longer supported - use app.database().');}// call Query's constructor, passing in the repo and path.
_this=_super.call(this,repo,path,QueryParams.DEFAULT,false)||this;return _this;}/** @return {?string} */Reference.prototype.getKey=function(){(0,_util.validateArgCount)('Reference.key',0,0,arguments.length);if(this.path.isEmpty()){return null;}else{return this.path.getBack();}};/**
     * @param {!(string|Path)} pathString
     * @return {!Reference}
     */Reference.prototype.child=function(pathString){(0,_util.validateArgCount)('Reference.child',1,1,arguments.length);if(typeof pathString==='number'){pathString=String(pathString);}else if(!(pathString instanceof Path)){if(this.path.getFront()===null){validateRootPathString('Reference.child',1,pathString,false);}else{validatePathString('Reference.child',1,pathString,false);}}return new Reference(this.repo,this.path.child(pathString));};/** @return {?Reference} */Reference.prototype.getParent=function(){(0,_util.validateArgCount)('Reference.parent',0,0,arguments.length);var parentPath=this.path.parent();return parentPath===null?null:new Reference(this.repo,parentPath);};/** @return {!Reference} */Reference.prototype.getRoot=function(){(0,_util.validateArgCount)('Reference.root',0,0,arguments.length);var ref=this;while(ref.getParent()!==null){ref=ref.getParent();}return ref;};/** @return {!Database} */Reference.prototype.databaseProp=function(){return this.repo.database;};/**
     * @param {*} newVal
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */Reference.prototype.set=function(newVal,onComplete){(0,_util.validateArgCount)('Reference.set',1,2,arguments.length);validateWritablePath('Reference.set',this.path);validateFirebaseDataArg('Reference.set',1,newVal,this.path,false);(0,_util.validateCallback)('Reference.set',2,onComplete,true);var deferred=new _util.Deferred();this.repo.setWithPriority(this.path,newVal,/*priority=*/null,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */Reference.prototype.update=function(objectToMerge,onComplete){(0,_util.validateArgCount)('Reference.update',1,2,arguments.length);validateWritablePath('Reference.update',this.path);if(Array.isArray(objectToMerge)){var newObjectToMerge={};for(var i=0;i<objectToMerge.length;++i){newObjectToMerge[''+i]=objectToMerge[i];}objectToMerge=newObjectToMerge;warn('Passing an Array to Firebase.update() is deprecated. '+'Use set() if you want to overwrite the existing data, or '+'an Object with integer keys if you really do want to '+'only update some of the children.');}validateFirebaseMergeDataArg('Reference.update',1,objectToMerge,this.path,false);(0,_util.validateCallback)('Reference.update',2,onComplete,true);var deferred=new _util.Deferred();this.repo.update(this.path,objectToMerge,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {*} newVal
     * @param {string|number|null} newPriority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */Reference.prototype.setWithPriority=function(newVal,newPriority,onComplete){(0,_util.validateArgCount)('Reference.setWithPriority',2,3,arguments.length);validateWritablePath('Reference.setWithPriority',this.path);validateFirebaseDataArg('Reference.setWithPriority',1,newVal,this.path,false);validatePriority('Reference.setWithPriority',2,newPriority,false);(0,_util.validateCallback)('Reference.setWithPriority',3,onComplete,true);if(this.getKey()==='.length'||this.getKey()==='.keys'){throw'Reference.setWithPriority failed: '+this.getKey()+' is a read-only object.';}var deferred=new _util.Deferred();this.repo.setWithPriority(this.path,newVal,newPriority,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */Reference.prototype.remove=function(onComplete){(0,_util.validateArgCount)('Reference.remove',0,1,arguments.length);validateWritablePath('Reference.remove',this.path);(0,_util.validateCallback)('Reference.remove',1,onComplete,true);return this.set(null,onComplete);};/**
     * @param {function(*):*} transactionUpdate
     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
     * @param {boolean=} applyLocally
     * @return {!Promise}
     */Reference.prototype.transaction=function(transactionUpdate,onComplete,applyLocally){(0,_util.validateArgCount)('Reference.transaction',1,3,arguments.length);validateWritablePath('Reference.transaction',this.path);(0,_util.validateCallback)('Reference.transaction',1,transactionUpdate,false);(0,_util.validateCallback)('Reference.transaction',2,onComplete,true);// NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
// to expose it.
validateBoolean('Reference.transaction',3,applyLocally,true);if(this.getKey()==='.length'||this.getKey()==='.keys'){throw'Reference.transaction failed: '+this.getKey()+' is a read-only object.';}if(applyLocally===undefined){applyLocally=true;}var deferred=new _util.Deferred();if(typeof onComplete==='function'){deferred.promise["catch"](function(){});}var promiseComplete=function promiseComplete(error,committed,snapshot){if(error){deferred.reject(error);}else{deferred.resolve(new TransactionResult(committed,snapshot));}if(typeof onComplete==='function'){onComplete(error,committed,snapshot);}};this.repo.startTransaction(this.path,transactionUpdate,promiseComplete,applyLocally);return deferred.promise;};/**
     * @param {string|number|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */Reference.prototype.setPriority=function(priority,onComplete){(0,_util.validateArgCount)('Reference.setPriority',1,2,arguments.length);validateWritablePath('Reference.setPriority',this.path);validatePriority('Reference.setPriority',1,priority,false);(0,_util.validateCallback)('Reference.setPriority',2,onComplete,true);var deferred=new _util.Deferred();this.repo.setWithPriority(this.path.child('.priority'),priority,null,deferred.wrapCallback(onComplete));return deferred.promise;};/**
     * @param {*=} value
     * @param {function(?Error)=} onComplete
     * @return {!Reference}
     */Reference.prototype.push=function(value,onComplete){(0,_util.validateArgCount)('Reference.push',0,2,arguments.length);validateWritablePath('Reference.push',this.path);validateFirebaseDataArg('Reference.push',1,value,this.path,true);(0,_util.validateCallback)('Reference.push',2,onComplete,true);var now=this.repo.serverTime();var name=nextPushId(now);// push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
// We use child() to create handles to two different references. The first is turned into a
// ThennableReference below by adding then() and catch() methods and is used as the
// return value of push(). The second remains a regular Reference and is used as the fulfilled
// value of the first ThennableReference.
var thennablePushRef=this.child(name);var pushRef=this.child(name);var promise;if(value!=null){promise=thennablePushRef.set(value,onComplete).then(function(){return pushRef;});}else{promise=Promise.resolve(pushRef);}thennablePushRef.then=promise.then.bind(promise);thennablePushRef["catch"]=promise.then.bind(promise,undefined);if(typeof onComplete==='function'){promise["catch"](function(){});}return thennablePushRef;};/**
     * @return {!OnDisconnect}
     */Reference.prototype.onDisconnect=function(){validateWritablePath('Reference.onDisconnect',this.path);return new OnDisconnect(this.repo,this.path);};Object.defineProperty(Reference.prototype,"database",{get:function get(){return this.databaseProp();},enumerable:false,configurable:true});Object.defineProperty(Reference.prototype,"key",{get:function get(){return this.getKey();},enumerable:false,configurable:true});Object.defineProperty(Reference.prototype,"parent",{get:function get(){return this.getParent();},enumerable:false,configurable:true});Object.defineProperty(Reference.prototype,"root",{get:function get(){return this.getRoot();},enumerable:false,configurable:true});return Reference;}(Query);/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */exports.Reference=Reference;Query.__referenceConstructor=Reference;SyncPoint.__referenceConstructor=Reference;/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Node in a Tree.
 */var TreeNode=/** @class */function(){function TreeNode(){// TODO: Consider making accessors that create children and value lazily or
// separate Internal / Leaf 'types'.
this.children={};this.childCount=0;this.value=null;}return TreeNode;}();/**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */var Tree=/** @class */function(){/**
     * @template T
     * @param {string=} name_ Optional name of the node.
     * @param {Tree=} parent_ Optional parent node.
     * @param {TreeNode=} node_ Optional node to wrap.
     */function Tree(name_,parent_,node_){if(name_===void 0){name_='';}if(parent_===void 0){parent_=null;}if(node_===void 0){node_=new TreeNode();}this.name_=name_;this.parent_=parent_;this.node_=node_;}/**
     * Returns a sub-Tree for the given path.
     *
     * @param {!(string|Path)} pathObj Path to look up.
     * @return {!Tree.<T>} Tree for path.
     */Tree.prototype.subTree=function(pathObj){// TODO: Require pathObj to be Path?
var path=pathObj instanceof Path?pathObj:new Path(pathObj);var child=this,next=path.getFront();while(next!==null){var childNode=(0,_util.safeGet)(child.node_.children,next)||new TreeNode();child=new Tree(next,child,childNode);path=path.popFront();next=path.getFront();}return child;};/**
     * Returns the data associated with this tree node.
     *
     * @return {?T} The data or null if no data exists.
     */Tree.prototype.getValue=function(){return this.node_.value;};/**
     * Sets data to this tree node.
     *
     * @param {!T} value Value to set.
     */Tree.prototype.setValue=function(value){(0,_util.assert)(typeof value!=='undefined','Cannot set value to undefined');this.node_.value=value;this.updateParents_();};/**
     * Clears the contents of the tree node (its value and all children).
     */Tree.prototype.clear=function(){this.node_.value=null;this.node_.children={};this.node_.childCount=0;this.updateParents_();};/**
     * @return {boolean} Whether the tree has any children.
     */Tree.prototype.hasChildren=function(){return this.node_.childCount>0;};/**
     * @return {boolean} Whether the tree is empty (no value or children).
     */Tree.prototype.isEmpty=function(){return this.getValue()===null&&!this.hasChildren();};/**
     * Calls action for each child of this tree node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */Tree.prototype.forEachChild=function(action){var _this=this;each(this.node_.children,function(child,childTree){action(new Tree(child,_this,childTree));});};/**
     * Does a depth-first traversal of this node's descendants, calling action for each one.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
     *   false.
     * @param {boolean=} childrenFirst Whether to call action on children before calling it on
     *   parent.
     */Tree.prototype.forEachDescendant=function(action,includeSelf,childrenFirst){if(includeSelf&&!childrenFirst){action(this);}this.forEachChild(function(child){child.forEachDescendant(action,/*includeSelf=*/true,childrenFirst);});if(includeSelf&&childrenFirst){action(this);}};/**
     * Calls action on each ancestor node.
     *
     * @param {function(!Tree.<T>)} action Action to be called on each parent; return
     *   true to abort.
     * @param {boolean=} includeSelf Whether to call action on this node as well.
     * @return {boolean} true if the action callback returned true.
     */Tree.prototype.forEachAncestor=function(action,includeSelf){var node=includeSelf?this:this.parent();while(node!==null){if(action(node)){return true;}node=node.parent();}return false;};/**
     * Does a depth-first traversal of this node's descendants.  When a descendant with a value
     * is found, action is called on it and traversal does not continue inside the node.
     * Action is *not* called on this node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */Tree.prototype.forEachImmediateDescendantWithValue=function(action){this.forEachChild(function(child){if(child.getValue()!==null){action(child);}else{child.forEachImmediateDescendantWithValue(action);}});};/**
     * @return {!Path} The path of this tree node, as a Path.
     */Tree.prototype.path=function(){return new Path(this.parent_===null?this.name_:this.parent_.path()+'/'+this.name_);};/**
     * @return {string} The name of the tree node.
     */Tree.prototype.name=function(){return this.name_;};/**
     * @return {?Tree} The parent tree node, or null if this is the root of the tree.
     */Tree.prototype.parent=function(){return this.parent_;};/**
     * Adds or removes this child from its parent based on whether it's empty or not.
     *
     * @private
     */Tree.prototype.updateParents_=function(){if(this.parent_!==null){this.parent_.updateChild_(this.name_,this);}};/**
     * Adds or removes the passed child to this tree node, depending on whether it's empty.
     *
     * @param {string} childName The name of the child to update.
     * @param {!Tree.<T>} child The child to update.
     * @private
     */Tree.prototype.updateChild_=function(childName,child){var childEmpty=child.isEmpty();var childExists=(0,_util.contains)(this.node_.children,childName);if(childEmpty&&childExists){delete this.node_.children[childName];this.node_.childCount--;this.updateParents_();}else if(!childEmpty&&!childExists){this.node_.children[childName]=child.node_;this.node_.childCount++;this.updateParents_();}};return Tree;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
// For now it's part of Repo, but in its own file.
/**
 * @enum {number}
 */var TransactionStatus;(function(TransactionStatus){// We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
// server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
// mismatched hash.
TransactionStatus[TransactionStatus["RUN"]=0]="RUN";// We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
// or rejected yet).
TransactionStatus[TransactionStatus["SENT"]=1]="SENT";// Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
// removed when we get a chance to prune completed ones.
TransactionStatus[TransactionStatus["COMPLETED"]=2]="COMPLETED";// Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
// If it comes back as unsuccessful, we'll abort it.
TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"]=3]="SENT_NEEDS_ABORT";// Temporary state used to mark transactions that need to be aborted.
TransactionStatus[TransactionStatus["NEEDS_ABORT"]=4]="NEEDS_ABORT";})(TransactionStatus||(TransactionStatus={}));/**
 * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
 * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
 * @type {number}
 * @const
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.MAX_TRANSACTION_RETRIES_=25;/**
 * Setup the transaction data structures
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.transactionsInit_=function(){/**
     * Stores queues of outstanding transactions for Firebase locations.
     *
     * @type {!Tree.<Array.<!Transaction>>}
     * @private
     */this.transactionQueueTree_=new Tree();};/**
 * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
 *
 * @param {!Path} path Path at which to do transaction.
 * @param {function(*):*} transactionUpdate Update callback.
 * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
 * @param {boolean} applyLocally Whether or not to make intermediate results visible
 */Repo.prototype.startTransaction=function(path,transactionUpdate,onComplete,applyLocally){this.log_('transaction on '+path);// Add a watch to make sure we get server updates.
var valueCallback=function valueCallback(){};var watchRef=new Reference(this,path);watchRef.on('value',valueCallback);var unwatcher=function unwatcher(){watchRef.off('value',valueCallback);};// Initialize transaction.
var transaction={path:path,update:transactionUpdate,onComplete:onComplete,// One of TransactionStatus enums.
status:null,// Used when combining transactions at different locations to figure out which one goes first.
order:LUIDGenerator(),// Whether to raise local events for this transaction.
applyLocally:applyLocally,// Count of how many times we've retried the transaction.
retryCount:0,// Function to call to clean up our .on() listener.
unwatcher:unwatcher,// Stores why a transaction was aborted.
abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null};// Run transaction initially.
var currentState=this.getLatestState_(path);transaction.currentInputSnapshot=currentState;var newVal=transaction.update(currentState.val());if(newVal===undefined){// Abort transaction.
transaction.unwatcher();transaction.currentOutputSnapshotRaw=null;transaction.currentOutputSnapshotResolved=null;if(transaction.onComplete){// We just set the input snapshot, so this cast should be safe
var snapshot=new DataSnapshot(transaction.currentInputSnapshot,new Reference(this,transaction.path),PRIORITY_INDEX);transaction.onComplete(null,false,snapshot);}}else{validateFirebaseData('transaction failed: Data returned ',newVal,transaction.path);// Mark as run and add to our queue.
transaction.status=TransactionStatus.RUN;var queueNode=this.transactionQueueTree_.subTree(path);var nodeQueue=queueNode.getValue()||[];nodeQueue.push(transaction);queueNode.setValue(nodeQueue);// Update visibleData and raise events
// Note: We intentionally raise events after updating all of our transaction state, since the user could
// start new transactions from the event callbacks.
var priorityForNode=void 0;if(_typeof(newVal)==='object'&&newVal!==null&&(0,_util.contains)(newVal,'.priority')){// eslint-disable-next-line @typescript-eslint/no-explicit-any
priorityForNode=(0,_util.safeGet)(newVal,'.priority');(0,_util.assert)(isValidPriority(priorityForNode),'Invalid priority returned by transaction. '+'Priority must be a valid string, finite number, server value, or null.');}else{var currentNode=this.serverSyncTree_.calcCompleteEventCache(path)||ChildrenNode.EMPTY_NODE;priorityForNode=currentNode.getPriority().val();}priorityForNode/** @type {null|number|string} */=priorityForNode;var serverValues=this.generateServerValues();var newNodeUnresolved=nodeFromJSON$1(newVal,priorityForNode);var newNode=resolveDeferredValueSnapshot(newNodeUnresolved,currentState,serverValues);transaction.currentOutputSnapshotRaw=newNodeUnresolved;transaction.currentOutputSnapshotResolved=newNode;transaction.currentWriteId=this.getNextWriteId_();var events=this.serverSyncTree_.applyUserOverwrite(path,newNode,transaction.currentWriteId,transaction.applyLocally);this.eventQueue_.raiseEventsForChangedPath(path,events);this.sendReadyTransactions_();}};/**
 * @param {!Path} path
 * @param {Array.<number>=} excludeSets A specific set to exclude
 * @return {Node}
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.getLatestState_=function(path,excludeSets){return this.serverSyncTree_.calcCompleteEventCache(path,excludeSets)||ChildrenNode.EMPTY_NODE;};/**
 * Sends any already-run transactions that aren't waiting for outstanding transactions to
 * complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively with a particular
 * transactionQueueTree node to recurse through the tree.
 *
 * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.sendReadyTransactions_=function(node){var _this=this;if(node===void 0){node=this.transactionQueueTree_;}// Before recursing, make sure any completed transactions are removed.
if(!node){this.pruneCompletedTransactionsBelowNode_(node);}if(node.getValue()!==null){var queue=this.buildTransactionQueue_(node);(0,_util.assert)(queue.length>0,'Sending zero length transaction queue');var allRun=queue.every(function(transaction){return transaction.status===TransactionStatus.RUN;});// If they're all run (and not sent), we can send them.  Else, we must wait.
if(allRun){this.sendTransactionQueue_(node.path(),queue);}}else if(node.hasChildren()){node.forEachChild(function(childNode){_this.sendReadyTransactions_(childNode);});}};/**
 * Given a list of run transactions, send them to the server and then handle the result (success or failure).
 *
 * @param {!Path} path The location of the queue.
 * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.sendTransactionQueue_=function(path,queue){var _this=this;// Mark transactions as sent and increment retry count!
var setsToIgnore=queue.map(function(txn){return txn.currentWriteId;});var latestState=this.getLatestState_(path,setsToIgnore);var snapToSend=latestState;var latestHash=latestState.hash();for(var i=0;i<queue.length;i++){var txn=queue[i];(0,_util.assert)(txn.status===TransactionStatus.RUN,'tryToSendTransactionQueue_: items in queue should all be run.');txn.status=TransactionStatus.SENT;txn.retryCount++;var relativePath=Path.relativePath(path,txn.path);// If we've gotten to this point, the output snapshot must be defined.
snapToSend=snapToSend.updateChild(relativePath/** @type {!Node} */,txn.currentOutputSnapshotRaw);}var dataToSend=snapToSend.val(true);var pathToSend=path;// Send the put.
this.server_.put(pathToSend.toString(),dataToSend,function(status){_this.log_('transaction put response',{path:pathToSend.toString(),status:status});var events=[];if(status==='ok'){// Queue up the callbacks and fire them after cleaning up all of our transaction state, since
// the callback could trigger more transactions or sets.
var callbacks=[];for(var i=0;i<queue.length;i++){queue[i].status=TransactionStatus.COMPLETED;events=events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));if(queue[i].onComplete){// We never unset the output snapshot, and given that this transaction is complete, it should be set
var node=queue[i].currentOutputSnapshotResolved;var ref=new Reference(_this,queue[i].path);var snapshot=new DataSnapshot(node,ref,PRIORITY_INDEX);callbacks.push(queue[i].onComplete.bind(null,null,true,snapshot));}queue[i].unwatcher();}// Now remove the completed transactions.
_this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));// There may be pending transactions that we can now send.
_this.sendReadyTransactions_();_this.eventQueue_.raiseEventsForChangedPath(path,events);// Finally, trigger onComplete callbacks.
for(var i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}}else{// transactions are no longer sent.  Update their status appropriately.
if(status==='datastale'){for(var i=0;i<queue.length;i++){if(queue[i].status===TransactionStatus.SENT_NEEDS_ABORT){queue[i].status=TransactionStatus.NEEDS_ABORT;}else{queue[i].status=TransactionStatus.RUN;}}}else{warn('transaction at '+pathToSend.toString()+' failed: '+status);for(var i=0;i<queue.length;i++){queue[i].status=TransactionStatus.NEEDS_ABORT;queue[i].abortReason=status;}}_this.rerunTransactions_(path);}},latestHash);};/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
 * be raised for.
 *
 * @param {!Path} changedPath The path in mergedData that changed.
 * @return {!Path} The rootmost path that was affected by rerunning transactions.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.rerunTransactions_=function(changedPath){var rootMostTransactionNode=this.getAncestorTransactionNode_(changedPath);var path=rootMostTransactionNode.path();var queue=this.buildTransactionQueue_(rootMostTransactionNode);this.rerunTransactionQueue_(queue,path);return path;};/**
 * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
 *
 * @param {Array.<Transaction>} queue The queue of transactions to run.
 * @param {!Path} path The path the queue is for.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.rerunTransactionQueue_=function(queue,path){if(queue.length===0){return;// Nothing to do!
}// Queue up the callbacks and fire them after cleaning up all of our transaction state, since
// the callback could trigger more transactions or sets.
var callbacks=[];var events=[];// Ignore all of the sets we're going to re-run.
var txnsToRerun=queue.filter(function(q){return q.status===TransactionStatus.RUN;});var setsToIgnore=txnsToRerun.map(function(q){return q.currentWriteId;});for(var i=0;i<queue.length;i++){var transaction=queue[i];var relativePath=Path.relativePath(path,transaction.path);var abortTransaction=false,abortReason=void 0;(0,_util.assert)(relativePath!==null,'rerunTransactionsUnderNode_: relativePath should not be null.');if(transaction.status===TransactionStatus.NEEDS_ABORT){abortTransaction=true;abortReason=transaction.abortReason;events=events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId,true));}else if(transaction.status===TransactionStatus.RUN){// eslint-disable-next-line @typescript-eslint/no-explicit-any
if(transaction.retryCount>=Repo.MAX_TRANSACTION_RETRIES_){abortTransaction=true;abortReason='maxretry';events=events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId,true));}else{// This code reruns a transaction
var currentNode=this.getLatestState_(transaction.path,setsToIgnore);transaction.currentInputSnapshot=currentNode;var newData=queue[i].update(currentNode.val());if(newData!==undefined){validateFirebaseData('transaction failed: Data returned ',newData,transaction.path);var newDataNode=nodeFromJSON$1(newData);var hasExplicitPriority=_typeof(newData)==='object'&&newData!=null&&(0,_util.contains)(newData,'.priority');if(!hasExplicitPriority){// Keep the old priority if there wasn't a priority explicitly specified.
newDataNode=newDataNode.updatePriority(currentNode.getPriority());}var oldWriteId=transaction.currentWriteId;var serverValues=this.generateServerValues();var newNodeResolved=resolveDeferredValueSnapshot(newDataNode,currentNode,serverValues);transaction.currentOutputSnapshotRaw=newDataNode;transaction.currentOutputSnapshotResolved=newNodeResolved;transaction.currentWriteId=this.getNextWriteId_();// Mutates setsToIgnore in place
setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId),1);events=events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path,newNodeResolved,transaction.currentWriteId,transaction.applyLocally));events=events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId,true));}else{abortTransaction=true;abortReason='nodata';events=events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId,true));}}}this.eventQueue_.raiseEventsForChangedPath(path,events);events=[];if(abortTransaction){// Abort.
queue[i].status=TransactionStatus.COMPLETED;// Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
// So defer the unwatcher until we're done.
(function(unwatcher){setTimeout(unwatcher,Math.floor(0));})(queue[i].unwatcher);if(queue[i].onComplete){if(abortReason==='nodata'){var ref=new Reference(this,queue[i].path);// We set this field immediately, so it's safe to cast to an actual snapshot
var lastInput/** @type {!Node} */=queue[i].currentInputSnapshot;var snapshot=new DataSnapshot(lastInput,ref,PRIORITY_INDEX);callbacks.push(queue[i].onComplete.bind(null,null,false,snapshot));}else{callbacks.push(queue[i].onComplete.bind(null,new Error(abortReason),false,null));}}}}// Clean up completed transactions.
this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);// Now fire callbacks, now that we're in a good, known state.
for(var i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}// Try to send the transaction result to the server.
this.sendReadyTransactions_();};/**
 * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
 * the node for the given path if there are no pending transactions on any ancestor.
 *
 * @param {!Path} path The location to start at.
 * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.getAncestorTransactionNode_=function(path){var front;// Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
var transactionNode=this.transactionQueueTree_;front=path.getFront();while(front!==null&&transactionNode.getValue()===null){transactionNode=transactionNode.subTree(front);path=path.popFront();front=path.getFront();}return transactionNode;};/**
 * Builds the queue of all transactions at or below the specified transactionNode.
 *
 * @param {!Tree.<Array.<Transaction>>} transactionNode
 * @return {Array.<Transaction>} The generated queue.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.buildTransactionQueue_=function(transactionNode){// Walk any child transaction queues and aggregate them into a single queue.
var transactionQueue=[];this.aggregateTransactionQueuesForNode_(transactionNode,transactionQueue);// Sort them by the order the transactions were created.
transactionQueue.sort(function(a,b){return a.order-b.order;});return transactionQueue;};/**
 * @param {!Tree.<Array.<Transaction>>} node
 * @param {Array.<Transaction>} queue
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.aggregateTransactionQueuesForNode_=function(node,queue){var _this=this;var nodeQueue=node.getValue();if(nodeQueue!==null){for(var i=0;i<nodeQueue.length;i++){queue.push(nodeQueue[i]);}}node.forEachChild(function(child){_this.aggregateTransactionQueuesForNode_(child,queue);});};/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 *
 * @param {!Tree.<Array.<!Transaction>>} node
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.pruneCompletedTransactionsBelowNode_=function(node){var _this=this;var queue=node.getValue();if(queue){var to=0;for(var from=0;from<queue.length;from++){if(queue[from].status!==TransactionStatus.COMPLETED){queue[to]=queue[from];to++;}}queue.length=to;node.setValue(queue.length>0?queue:null);}node.forEachChild(function(childNode){_this.pruneCompletedTransactionsBelowNode_(childNode);});};/**
 * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
 * since we consider them incompatible with transactions.
 *
 * @param {!Path} path Path for which we want to abort related transactions.
 * @return {!Path}
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.abortTransactions_=function(path){var _this=this;var affectedPath=this.getAncestorTransactionNode_(path).path();var transactionNode=this.transactionQueueTree_.subTree(path);transactionNode.forEachAncestor(function(node){_this.abortTransactionsOnNode_(node);});this.abortTransactionsOnNode_(transactionNode);transactionNode.forEachDescendant(function(node){_this.abortTransactionsOnNode_(node);});return affectedPath;};/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.abortTransactionsOnNode_=function(node){var queue=node.getValue();if(queue!==null){// Queue up the callbacks and fire them after cleaning up all of our transaction state, since
// the callback could trigger more transactions or sets.
var callbacks=[];// Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
// can be immediately aborted and removed.
var events=[];var lastSent=-1;for(var i=0;i<queue.length;i++){if(queue[i].status===TransactionStatus.SENT_NEEDS_ABORT);else if(queue[i].status===TransactionStatus.SENT){(0,_util.assert)(lastSent===i-1,'All SENT items should be at beginning of queue.');lastSent=i;// Mark transaction for abort when it comes back.
queue[i].status=TransactionStatus.SENT_NEEDS_ABORT;queue[i].abortReason='set';}else{(0,_util.assert)(queue[i].status===TransactionStatus.RUN,'Unexpected transaction status in abort');// We can abort it immediately.
queue[i].unwatcher();events=events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId,true));if(queue[i].onComplete){var snapshot=null;callbacks.push(queue[i].onComplete.bind(null,new Error('set'),false,snapshot));}}}if(lastSent===-1){// We're not waiting for any sent transactions.  We can clear the queue.
node.setValue(null);}else{// Remove the transactions we aborted.
queue.length=lastSent+1;}// Now fire the callbacks.
this.eventQueue_.raiseEventsForChangedPath(node.path(),events);for(var i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}}};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */var FirebaseAuthTokenProvider=/** @class */function(){function FirebaseAuthTokenProvider(app_,authProvider_){var _this=this;this.app_=app_;this.authProvider_=authProvider_;this.auth_=null;this.auth_=authProvider_.getImmediate({optional:true});if(!this.auth_){authProvider_.get().then(function(auth){return _this.auth_=auth;});}}/**
     * @param {boolean} forceRefresh
     * @return {!Promise<FirebaseAuthTokenData>}
     */FirebaseAuthTokenProvider.prototype.getToken=function(forceRefresh){if(!this.auth_){return Promise.resolve(null);}return this.auth_.getToken(forceRefresh)["catch"](function(error){// TODO: Need to figure out all the cases this is raised and whether
// this makes sense.
if(error&&error.code==='auth/token-not-initialized'){log('Got auth/token-not-initialized error.  Treating as null token.');return null;}else{return Promise.reject(error);}});};FirebaseAuthTokenProvider.prototype.addTokenChangeListener=function(listener){// TODO: We might want to wrap the listener and call it with no args to
// avoid a leaky abstraction, but that makes removing the listener harder.
if(this.auth_){this.auth_.addAuthTokenListener(listener);}else{setTimeout(function(){return listener(null);},0);this.authProvider_.get().then(function(auth){return auth.addAuthTokenListener(listener);});}};FirebaseAuthTokenProvider.prototype.removeTokenChangeListener=function(listener){this.authProvider_.get().then(function(auth){return auth.removeAuthTokenListener(listener);});};FirebaseAuthTokenProvider.prototype.notifyForInvalidToken=function(){var errorMessage='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not '+'initialized correctly. ';if('credential'in this.app_.options){errorMessage+='Make sure the "credential" property provided to initializeApp() '+'is authorized to access the specified "databaseURL" and is from the correct '+'project.';}else if('serviceAccount'in this.app_.options){errorMessage+='Make sure the "serviceAccount" property provided to initializeApp() '+'is authorized to access the specified "databaseURL" and is from the correct '+'project.';}else{errorMessage+='Make sure the "apiKey" and "databaseURL" properties provided to '+'initializeApp() match the values provided for your app at '+'https://console.firebase.google.com/.';}warn(errorMessage);};return FirebaseAuthTokenProvider;}();/* Auth token provider that the Admin SDK uses to connect to the Emulator. */var EmulatorAdminTokenProvider=/** @class */function(){function EmulatorAdminTokenProvider(){}EmulatorAdminTokenProvider.prototype.getToken=function(forceRefresh){return Promise.resolve({accessToken:EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN});};EmulatorAdminTokenProvider.prototype.addTokenChangeListener=function(listener){// Invoke the listener immediately to match the behavior in Firebase Auth
// (see packages/auth/src/auth.js#L1807)
listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);};EmulatorAdminTokenProvider.prototype.removeTokenChangeListener=function(listener){};EmulatorAdminTokenProvider.prototype.notifyForInvalidToken=function(){};EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN='owner';return EmulatorAdminTokenProvider;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This variable is also defined in the firebase node.js admin SDK. Before
 * modifying this definition, consult the definition in:
 *
 * https://github.com/firebase/firebase-admin-node
 *
 * and make sure the two are consistent.
 */var FIREBASE_DATABASE_EMULATOR_HOST_VAR='FIREBASE_DATABASE_EMULATOR_HOST';var _staticInstance;/**
 * Creates and caches Repo instances.
 */var RepoManager=/** @class */function(){function RepoManager(){/**
         * @private {!Object.<string, Object<string, !fb.core.Repo>>}
         */this.repos_={};/**
         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
         * @private {boolean}
         */this.useRestClient_=false;}RepoManager.getInstance=function(){if(!_staticInstance){_staticInstance=new RepoManager();}return _staticInstance;};// TODO(koss): Remove these functions unless used in tests?
RepoManager.prototype.interrupt=function(){var e_1,_a,e_2,_b;try{for(var _c=(0,_tslib.__values)(Object.keys(this.repos_)),_d=_c.next();!_d.done;_d=_c.next()){var appName=_d.value;try{for(var _e=(e_2=void 0,(0,_tslib.__values)(Object.keys(this.repos_[appName]))),_f=_e.next();!_f.done;_f=_e.next()){var dbUrl=_f.value;this.repos_[appName][dbUrl].interrupt();}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_f&&!_f.done&&(_b=_e["return"]))_b.call(_e);}finally{if(e_2)throw e_2.error;}}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_d&&!_d.done&&(_a=_c["return"]))_a.call(_c);}finally{if(e_1)throw e_1.error;}}};RepoManager.prototype.resume=function(){var e_3,_a,e_4,_b;try{for(var _c=(0,_tslib.__values)(Object.keys(this.repos_)),_d=_c.next();!_d.done;_d=_c.next()){var appName=_d.value;try{for(var _e=(e_4=void 0,(0,_tslib.__values)(Object.keys(this.repos_[appName]))),_f=_e.next();!_f.done;_f=_e.next()){var dbUrl=_f.value;this.repos_[appName][dbUrl].resume();}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_f&&!_f.done&&(_b=_e["return"]))_b.call(_e);}finally{if(e_4)throw e_4.error;}}}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_d&&!_d.done&&(_a=_c["return"]))_a.call(_c);}finally{if(e_3)throw e_3.error;}}};/**
     * Update an existing repo in place to point to a new host/port.
     */RepoManager.prototype.applyEmulatorSettings=function(repo,host,port){repo.repoInfo_=new RepoInfo(host+":"+port,/* secure= */false,repo.repoInfo_.namespace,repo.repoInfo_.webSocketOnly,repo.repoInfo_.nodeAdmin,repo.repoInfo_.persistenceKey,repo.repoInfo_.includeNamespaceInQueryParams);if(repo.repoInfo_.nodeAdmin){repo.authTokenProvider_=new EmulatorAdminTokenProvider();}};/**
     * This function should only ever be called to CREATE a new database instance.
     *
     * @param {!FirebaseApp} app
     * @return {!Database}
     */RepoManager.prototype.databaseFromApp=function(app,authProvider,url,nodeAdmin){var dbUrl=url||app.options.databaseURL;if(dbUrl===undefined){if(!app.options.projectId){fatal("Can't determine Firebase Database URL. Be sure to include "+' a Project ID when calling firebase.initializeApp().');}log('Using default host for project ',app.options.projectId);dbUrl=app.options.projectId+"-default-rtdb.firebaseio.com";}var parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);var repoInfo=parsedUrl.repoInfo;var isEmulator;var dbEmulatorHost=undefined;if(typeof process!=='undefined'){dbEmulatorHost=process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];}if(dbEmulatorHost){isEmulator=true;dbUrl="http://"+dbEmulatorHost+"?ns="+repoInfo.namespace;parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);repoInfo=parsedUrl.repoInfo;}else{isEmulator=!parsedUrl.repoInfo.secure;}var authTokenProvider=nodeAdmin&&isEmulator?new EmulatorAdminTokenProvider():new FirebaseAuthTokenProvider(app,authProvider);validateUrl('Invalid Firebase Database URL',1,parsedUrl);if(!parsedUrl.path.isEmpty()){fatal('Database URL must point to the root of a Firebase Database '+'(not including a child path).');}var repo=this.createRepo(repoInfo,app,authTokenProvider);return repo.database;};/**
     * Remove the repo and make sure it is disconnected.
     *
     * @param {!Repo} repo
     */RepoManager.prototype.deleteRepo=function(repo){var appRepos=(0,_util.safeGet)(this.repos_,repo.app.name);// This should never happen...
if(!appRepos||(0,_util.safeGet)(appRepos,repo.key)!==repo){fatal("Database "+repo.app.name+"("+repo.repoInfo_+") has already been deleted.");}repo.interrupt();delete appRepos[repo.key];};/**
     * Ensures a repo doesn't already exist and then creates one using the
     * provided app.
     *
     * @param {!RepoInfo} repoInfo The metadata about the Repo
     * @param {!FirebaseApp} app
     * @return {!Repo} The Repo object for the specified server / repoName.
     */RepoManager.prototype.createRepo=function(repoInfo,app,authTokenProvider){var appRepos=(0,_util.safeGet)(this.repos_,app.name);if(!appRepos){appRepos={};this.repos_[app.name]=appRepos;}var repo=(0,_util.safeGet)(appRepos,repoInfo.toURLString());if(repo){fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');}repo=new Repo(repoInfo,this.useRestClient_,app,authTokenProvider);appRepos[repoInfo.toURLString()]=repo;return repo;};/**
     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
     * @param {boolean} forceRestClient
     */RepoManager.prototype.forceRestClient=function(forceRestClient){this.useRestClient_=forceRestClient;};return RepoManager;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Class representing a firebase database.
 * @implements {FirebaseService}
 */var Database=/** @class */function(){/**
     * The constructor should not be called by users of our public API.
     * @param {!Repo} repoInternal_
     */function Database(repoInternal_){var _this=this;this.repoInternal_=repoInternal_;/** Track if the instance has been used (root or repo accessed) */this.instanceStarted_=false;this.INTERNAL={"delete":function _delete(){return(0,_tslib.__awaiter)(_this,void 0,void 0,function(){return(0,_tslib.__generator)(this,function(_a){this.checkDeleted_('delete');RepoManager.getInstance().deleteRepo(this.repo_);this.repoInternal_=null;this.rootInternal_=null;return[2/*return*/];});});}};if(!(repoInternal_ instanceof Repo)){fatal("Don't call new Database() directly - please use firebase.database().");}}Object.defineProperty(Database.prototype,"repo_",{get:function get(){if(!this.instanceStarted_){this.repoInternal_.start();this.instanceStarted_=true;}return this.repoInternal_;},enumerable:false,configurable:true});Object.defineProperty(Database.prototype,"root_",{get:function get(){if(!this.rootInternal_){this.rootInternal_=new Reference(this.repo_,Path.Empty);}return this.rootInternal_;},enumerable:false,configurable:true});Object.defineProperty(Database.prototype,"app",{get:function get(){return this.repo_.app;},enumerable:false,configurable:true});/**
     * Modify this instance to communicate with the Realtime Database emulator.
     *
     * <p>Note: This method must be called before performing any other operation.
     *
     * @param host the emulator host (ex: localhost)
     * @param port the emulator port (ex: 8080)
     */Database.prototype.useEmulator=function(host,port){this.checkDeleted_('useEmulator');if(this.instanceStarted_){fatal('Cannot call useEmulator() after instance has already been initialized.');return;}// Modify the repo to apply emulator settings
RepoManager.getInstance().applyEmulatorSettings(this.repoInternal_,host,port);};Database.prototype.ref=function(path){this.checkDeleted_('ref');(0,_util.validateArgCount)('database.ref',0,1,arguments.length);if(path instanceof Reference){return this.refFromURL(path.toString());}return path!==undefined?this.root_.child(path):this.root_;};/**
     * Returns a reference to the root or the path specified in url.
     * We throw a exception if the url is not in the same domain as the
     * current repo.
     * @param {string} url
     * @return {!Reference} Firebase reference.
     */Database.prototype.refFromURL=function(url){/** @const {string} */var apiName='database.refFromURL';this.checkDeleted_(apiName);(0,_util.validateArgCount)(apiName,1,1,arguments.length);var parsedURL=parseRepoInfo(url,this.repo_.repoInfo_.nodeAdmin);validateUrl(apiName,1,parsedURL);var repoInfo=parsedURL.repoInfo;if(!repoInfo.isCustomHost()&&repoInfo.host!==this.repo_.repoInfo_.host){fatal(apiName+': Host name does not match the current database: '+'(found '+repoInfo.host+' but expected '+this.repo_.repoInfo_.host+')');}return this.ref(parsedURL.path.toString());};/**
     * @param {string} apiName
     */Database.prototype.checkDeleted_=function(apiName){if(this.repoInternal_===null){fatal('Cannot call '+apiName+' on a deleted database.');}};// Make individual repo go offline.
Database.prototype.goOffline=function(){(0,_util.validateArgCount)('database.goOffline',0,0,arguments.length);this.checkDeleted_('goOffline');this.repo_.interrupt();};Database.prototype.goOnline=function(){(0,_util.validateArgCount)('database.goOnline',0,0,arguments.length);this.checkDeleted_('goOnline');this.repo_.resume();};Database.ServerValue={TIMESTAMP:{'.sv':'timestamp'},increment:function increment(delta){return{'.sv':{'increment':delta}};}};return Database;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * INTERNAL methods for internal-use only (tests, etc.).
 *
 * Customers shouldn't use these or else should be aware that they could break at any time.
 *
 * @const
 */exports.Database=Database;var forceLongPolling=function forceLongPolling(){WebSocketConnection.forceDisallow();BrowserPollConnection.forceAllow();};var forceWebSockets=function forceWebSockets(){BrowserPollConnection.forceDisallow();};/* Used by App Manager */var isWebSocketsAvailable=function isWebSocketsAvailable(){return WebSocketConnection['isAvailable']();};var setSecurityDebugCallback=function setSecurityDebugCallback(ref,callback){// eslint-disable-next-line @typescript-eslint/no-explicit-any
ref.repo.persistentConnection_.securityDebugCallback_=callback;};var stats=function stats(ref,showDelta){ref.repo.stats(showDelta);};var statsIncrementCounter=function statsIncrementCounter(ref,metric){ref.repo.statsIncrementCounter(metric);};var dataUpdateCount=function dataUpdateCount(ref){return ref.repo.dataUpdateCount;};var interceptServerData=function interceptServerData(ref,callback){return ref.repo.interceptServerData_(callback);};/**
 * Used by console to create a database based on the app,
 * passed database URL and a custom auth implementation.
 *
 * @param app A valid FirebaseApp-like object
 * @param url A valid Firebase databaseURL
 * @param version custom version e.g. firebase-admin version
 * @param customAuthImpl custom auth implementation
 */function initStandalone(_a){var app=_a.app,url=_a.url,version=_a.version,customAuthImpl=_a.customAuthImpl,namespace=_a.namespace,_b=_a.nodeAdmin,nodeAdmin=_b===void 0?false:_b;setSDKVersion(version);/**
     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform
     * any actual function.
     */var authProvider=new _component.Provider('auth-internal',new _component.ComponentContainer('database-standalone'));authProvider.setComponent(new _component.Component('auth-internal',function(){return customAuthImpl;},"PRIVATE"/* PRIVATE */));return{instance:RepoManager.getInstance().databaseFromApp(app,authProvider,url,nodeAdmin),namespace:namespace};}var INTERNAL=/*#__PURE__*/Object.freeze({__proto__:null,forceLongPolling:forceLongPolling,forceWebSockets:forceWebSockets,isWebSocketsAvailable:isWebSocketsAvailable,setSecurityDebugCallback:setSecurityDebugCallback,stats:stats,statsIncrementCounter:statsIncrementCounter,dataUpdateCount:dataUpdateCount,interceptServerData:interceptServerData,initStandalone:initStandalone});/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var DataConnection=PersistentConnection;/**
 * @param {!string} pathString
 * @param {function(*)} onComplete
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
PersistentConnection.prototype.simpleListen=function(pathString,onComplete){this.sendRequest('q',{p:pathString},onComplete);};/**
 * @param {*} data
 * @param {function(*)} onEcho
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
PersistentConnection.prototype.echo=function(data,onEcho){this.sendRequest('echo',{d:data},onEcho);};// RealTimeConnection properties that we use in tests.
var RealTimeConnection=Connection;/**
 * @param {function(): string} newHash
 * @return {function()}
 */var hijackHash=function hijackHash(newHash){var oldPut=PersistentConnection.prototype.put;PersistentConnection.prototype.put=function(pathString,data,onComplete,hash){if(hash!==undefined){hash=newHash();}oldPut.call(this,pathString,data,onComplete,hash);};return function(){PersistentConnection.prototype.put=oldPut;};};/**
 * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
 */var ConnectionTarget=RepoInfo;/**
 * @param {!Query} query
 * @return {!string}
 */var queryIdentifier=function queryIdentifier(query){return query.queryIdentifier();};/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 *
 * @param {boolean} forceRestClient
 */var forceRestClient=function forceRestClient(_forceRestClient){RepoManager.getInstance().forceRestClient(_forceRestClient);};var TEST_ACCESS=/*#__PURE__*/Object.freeze({__proto__:null,DataConnection:DataConnection,RealTimeConnection:RealTimeConnection,hijackHash:hijackHash,ConnectionTarget:ConnectionTarget,queryIdentifier:queryIdentifier,forceRestClient:forceRestClient});var name="@firebase/database";var version="0.8.2";/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ServerValue=Database.ServerValue;exports.ServerValue=ServerValue;function registerDatabase(instance){// set SDK_VERSION
setSDKVersion(instance.SDK_VERSION);// Register the Database Service with the 'firebase' namespace.
var namespace=instance.INTERNAL.registerComponent(new _component.Component('database',function(container,url){/* Dependencies */ // getImmediate for FirebaseApp will always succeed
var app=container.getProvider('app').getImmediate();var authProvider=container.getProvider('auth-internal');return RepoManager.getInstance().databaseFromApp(app,authProvider,url);},"PUBLIC"/* PUBLIC */).setServiceProps(// firebase.database namespace properties
{Reference:Reference,Query:Query,Database:Database,DataSnapshot:DataSnapshot,enableLogging:enableLogging,INTERNAL:INTERNAL,ServerValue:ServerValue,TEST_ACCESS:TEST_ACCESS}).setMultipleInstances(true));instance.registerVersion(name,version);if((0,_util.isNodeSdk)()){module.exports=namespace;}}registerDatabase(_app["default"]);

}).call(this)}).call(this,require('_process'))

},{"@firebase/app":3,"@firebase/component":5,"@firebase/logger":7,"@firebase/util":9,"_process":1,"tslib":17}],15:[function(require,module,exports){
'use strict';

require('@firebase/storage');

},{"@firebase/storage":8}],16:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.idb = {}));
})(void 0, function (exports) {
  'use strict';

  function toArray(arr) {
    return Array.prototype.slice.call(arr);
  }

  function promisifyRequest(request) {
    return new Promise(function (resolve, reject) {
      request.onsuccess = function () {
        resolve(request.result);
      };

      request.onerror = function () {
        reject(request.error);
      };
    });
  }

  function promisifyRequestCall(obj, method, args) {
    var request;
    var p = new Promise(function (resolve, reject) {
      request = obj[method].apply(obj, args);
      promisifyRequest(request).then(resolve, reject);
    });
    p.request = request;
    return p;
  }

  function promisifyCursorRequestCall(obj, method, args) {
    var p = promisifyRequestCall(obj, method, args);
    return p.then(function (value) {
      if (!value) return;
      return new Cursor(value, p.request);
    });
  }

  function proxyProperties(ProxyClass, targetProp, properties) {
    properties.forEach(function (prop) {
      Object.defineProperty(ProxyClass.prototype, prop, {
        get: function get() {
          return this[targetProp][prop];
        },
        set: function set(val) {
          this[targetProp][prop] = val;
        }
      });
    });
  }

  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function (prop) {
      if (!(prop in Constructor.prototype)) return;

      ProxyClass.prototype[prop] = function () {
        return promisifyRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function (prop) {
      if (!(prop in Constructor.prototype)) return;

      ProxyClass.prototype[prop] = function () {
        return this[targetProp][prop].apply(this[targetProp], arguments);
      };
    });
  }

  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function (prop) {
      if (!(prop in Constructor.prototype)) return;

      ProxyClass.prototype[prop] = function () {
        return promisifyCursorRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function Index(index) {
    this._index = index;
  }

  proxyProperties(Index, '_index', ['name', 'keyPath', 'multiEntry', 'unique']);
  proxyRequestMethods(Index, '_index', IDBIndex, ['get', 'getKey', 'getAll', 'getAllKeys', 'count']);
  proxyCursorRequestMethods(Index, '_index', IDBIndex, ['openCursor', 'openKeyCursor']);

  function Cursor(cursor, request) {
    this._cursor = cursor;
    this._request = request;
  }

  proxyProperties(Cursor, '_cursor', ['direction', 'key', 'primaryKey', 'value']);
  proxyRequestMethods(Cursor, '_cursor', IDBCursor, ['update', 'delete']); // proxy 'next' methods

  ['advance', 'continue', 'continuePrimaryKey'].forEach(function (methodName) {
    if (!(methodName in IDBCursor.prototype)) return;

    Cursor.prototype[methodName] = function () {
      var cursor = this;
      var args = arguments;
      return Promise.resolve().then(function () {
        cursor._cursor[methodName].apply(cursor._cursor, args);

        return promisifyRequest(cursor._request).then(function (value) {
          if (!value) return;
          return new Cursor(value, cursor._request);
        });
      });
    };
  });

  function ObjectStore(store) {
    this._store = store;
  }

  ObjectStore.prototype.createIndex = function () {
    return new Index(this._store.createIndex.apply(this._store, arguments));
  };

  ObjectStore.prototype.index = function () {
    return new Index(this._store.index.apply(this._store, arguments));
  };

  proxyProperties(ObjectStore, '_store', ['name', 'keyPath', 'indexNames', 'autoIncrement']);
  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, ['put', 'add', 'delete', 'clear', 'get', 'getAll', 'getKey', 'getAllKeys', 'count']);
  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, ['openCursor', 'openKeyCursor']);
  proxyMethods(ObjectStore, '_store', IDBObjectStore, ['deleteIndex']);

  function Transaction(idbTransaction) {
    this._tx = idbTransaction;
    this.complete = new Promise(function (resolve, reject) {
      idbTransaction.oncomplete = function () {
        resolve();
      };

      idbTransaction.onerror = function () {
        reject(idbTransaction.error);
      };

      idbTransaction.onabort = function () {
        reject(idbTransaction.error);
      };
    });
  }

  Transaction.prototype.objectStore = function () {
    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
  };

  proxyProperties(Transaction, '_tx', ['objectStoreNames', 'mode']);
  proxyMethods(Transaction, '_tx', IDBTransaction, ['abort']);

  function UpgradeDB(db, oldVersion, transaction) {
    this._db = db;
    this.oldVersion = oldVersion;
    this.transaction = new Transaction(transaction);
  }

  UpgradeDB.prototype.createObjectStore = function () {
    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
  };

  proxyProperties(UpgradeDB, '_db', ['name', 'version', 'objectStoreNames']);
  proxyMethods(UpgradeDB, '_db', IDBDatabase, ['deleteObjectStore', 'close']);

  function DB(db) {
    this._db = db;
  }

  DB.prototype.transaction = function () {
    return new Transaction(this._db.transaction.apply(this._db, arguments));
  };

  proxyProperties(DB, '_db', ['name', 'version', 'objectStoreNames']);
  proxyMethods(DB, '_db', IDBDatabase, ['close']); // Add cursor iterators
  // TODO: remove this once browsers do the right thing with promises

  ['openCursor', 'openKeyCursor'].forEach(function (funcName) {
    [ObjectStore, Index].forEach(function (Constructor) {
      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
      if (!(funcName in Constructor.prototype)) return;

      Constructor.prototype[funcName.replace('open', 'iterate')] = function () {
        var args = toArray(arguments);
        var callback = args[args.length - 1];
        var nativeObject = this._store || this._index;
        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));

        request.onsuccess = function () {
          callback(request.result);
        };
      };
    });
  }); // polyfill getAll

  [Index, ObjectStore].forEach(function (Constructor) {
    if (Constructor.prototype.getAll) return;

    Constructor.prototype.getAll = function (query, count) {
      var instance = this;
      var items = [];
      return new Promise(function (resolve) {
        instance.iterateCursor(query, function (cursor) {
          if (!cursor) {
            resolve(items);
            return;
          }

          items.push(cursor.value);

          if (count !== undefined && items.length == count) {
            resolve(items);
            return;
          }

          cursor["continue"]();
        });
      });
    };
  });

  function openDb(name, version, upgradeCallback) {
    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
    var request = p.request;

    if (request) {
      request.onupgradeneeded = function (event) {
        if (upgradeCallback) {
          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
        }
      };
    }

    return p.then(function (db) {
      return new DB(db);
    });
  }

  function deleteDb(name) {
    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
  }

  exports.openDb = openDb;
  exports.deleteDb = deleteDb;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],17:[function(require,module,exports){
(function (global){(function (){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global global, define, System, Reflect, Promise */
var __extends;

var __assign;

var __rest;

var __decorate;

var __param;

var __metadata;

var __awaiter;

var __generator;

var __exportStar;

var __values;

var __read;

var __spread;

var __spreadArrays;

var _await;

var __asyncGenerator;

var __asyncDelegator;

var __asyncValues;

var __makeTemplateObject;

var __importStar;

var __importDefault;

var __classPrivateFieldGet;

var __classPrivateFieldSet;

var __createBinding;

(function (factory) {
  var root = (typeof global === "undefined" ? "undefined" : _typeof(global)) === "object" ? global : (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" ? self : _typeof(this) === "object" ? this : {};

  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }

  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }

    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };

  __extends = function __extends(d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };

  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  __rest = function __rest(s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  __decorate = function __decorate(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  __param = function __param(paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };

  __metadata = function __metadata(metadataKey, metadataValue) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };

  __awaiter = function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  __generator = function __generator(thisArg, body) {
    var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) {
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };

  __createBinding = function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };

  __exportStar = function __exportStar(m, exports) {
    for (var p in m) {
      if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }
  };

  __values = function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function next() {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };

  __read = function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;

    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
        ar.push(r.value);
      }
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }

    return ar;
  };

  __spread = function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++) {
      ar = ar.concat(__read(arguments[i]));
    }

    return ar;
  };

  __spreadArrays = function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
      s += arguments[i].length;
    }

    for (var r = Array(s), k = 0, i = 0; i < il; i++) {
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
        r[k] = a[j];
      }
    }

    return r;
  };

  _await = function __await(v) {
    return this instanceof _await ? (this.v = v, this) : new _await(v);
  };

  __asyncGenerator = function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []),
        i,
        q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i;

    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }

    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }

    function step(r) {
      r.value instanceof _await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }

    function fulfill(value) {
      resume("next", value);
    }

    function reject(value) {
      resume("throw", value);
    }

    function settle(f, v) {
      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
  };

  __asyncDelegator = function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i;

    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: _await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };

  __asyncValues = function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator],
        i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);

    function verb(n) {
      i[n] = o[n] && function (v) {
        return new Promise(function (resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }

    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };

  __makeTemplateObject = function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }

    return cooked;
  };

  __importStar = function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) {
      if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result["default"] = mod;
    return result;
  };

  __importDefault = function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  __classPrivateFieldGet = function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }

    return privateMap.get(receiver);
  };

  __classPrivateFieldSet = function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to set private field on non-instance");
    }

    privateMap.set(receiver, value);
    return value;
  };

  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__await", _await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],18:[function(require,module,exports){
"use strict";

var firebase = require("firebase/app");

require('firebase/analytics');

require('firebase/auth');

require('firebase/database');

require('firebase/storage');

var firebaseConfig = {
  apiKey: "AIzaSyBhdymNUMHIMZqKKCLIfzeyQ3vV7Fl8cf8",
  authDomain: "obivision-7645d.firebaseapp.com",
  databaseURL: "https://obivision-7645d-default-rtdb.firebaseio.com",
  projectId: "obivision-7645d",
  storageBucket: "obivision-7645d.appspot.com",
  messagingSenderId: "809563515817",
  appId: "1:809563515817:web:a06de894ebd9115cbd72b8",
  measurementId: "G-BL2T39VTVF"
}; // TODO try to bundle the firebaseapp.js file with the login.js file

function initFirebase() {
  firebase.initializeApp({
    firebaseConfig: firebaseConfig
  });
  firebase.analytics();
  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);
  return firebase;
}

;
var FirebaseApp = initFirebase();

},{"firebase/analytics":10,"firebase/app":11,"firebase/auth":12,"firebase/database":13,"firebase/storage":15}]},{},[18])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
